using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;


public class CMPInfo
{
    string[] montharr = { "January", "Fabuary", "March", "April", "May", "June", "July", "Auguest", "September", "October", "November", "December" };

    private CManpowerInfo oMP = new CManpowerInfo();
    private ConnectDBCosty oConn = new ConnectDBCosty();
    private ConnectDBPDB oConPDB = new ConnectDBPDB();
    private ConnectDBDCI oConDCI = new ConnectDBDCI();
    private ConnectDBBCS oConBCS = new ConnectDBBCS();
    string txtCostCenter = "";





    public CMPInfo()
    {

    }

    public DataTable GetMP(string CostCenter)
    {


        DataTable dtMPAll = new DataTable();
        dtMPAll.Columns.Add("Time", typeof(string));
        dtMPAll.Columns.Add("IDCH", typeof(string));
        dtMPAll.Columns.Add("Temp", typeof(decimal));

        DateTime strDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 0, 0, 0);

        int idx = 1;

        DataTable dtManPower = new DataTable();

        return dtMPAll;
    }



    public List<MMPInfo.MPAllChartInfo> GetChartMPMAandSupport(int _Month, DateTime _DataDate, string _Type)
    {

        List<MMPInfo.MPAllChartInfo> oListMP = new List<MMPInfo.MPAllChartInfo>();


        string[] ArryPrd = { "1YC", "2YC", "SCR", "1YC/3", "ODM" };
        //string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702", "4310", "4320", "4510", "4720", "8120" };
        string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702" };

        //* Maintenance 
        string[] ArryMT = { "4310", "4320" };
        string[] ArryMTM = { "4310" };
        string[] ArryMTA = { "4320" };

        //* Engineer
        string[] ArryENALL = { "4410", "4420", "4430" };
        string[] ArryENA = { "4410" };
        string[] ArryENM = { "4420" };
        string[] ArryENMOT = { "4430" };


        //* IT & Env.
        string[] ArryITEC = { "7510", "4510", "4520" };
        string[] ArryIT = { "7510" };
        string[] ArryEC = { "4520" };
        string[] ArryUT = { "4510" };
        //* Procurement 
        string[] ArryProcurement = { "4110", "4120", "4130" };
        string[] ArryProPU = { "4110" };
        string[] ArryProSP = { "4120" };
        string[] ArryProSPU = { "4130" };
        //* Production Control and SCM
        string[] ArryPDSCM = { "4610", "4620", "4210", "4140" };
        string[] ArryIM = { "4610" };
        string[] ArryPN = { "4210" };
        string[] ArryPS = { "4620" };
        string[] ArryDC = { "4140" };
        string[] ArryWH = { "7610" };

        //* QCQAQS
        string[] ArryQCQAQS = { "4710", "4720", "4830" };
        string[] ArryQC = { "4710" };
        string[] ArryQA = { "4720" };
        string[] ArryQS = { "4830" };

        //* Design and Development
        string[] ArryDDCD = { "4810", "4820" };
        string[] ArryDD = { "4810" };
        string[] ArryCD = { "4820" };



        string[] ArryPrdFac1 = { "1101", "1102" };
        string[] ArryPrdFac1M = { "1101" };
        string[] ArryPrdFac1A = { "1102" };
        string[] ArryPrdFac2 = { "1201", "1202", "1301", "1302", "1401", "1402" };
        string[] ArryPrdFac2M = { "1201" };
        string[] ArryPrdFac2A = { "1202" };
        string[] ArryPrdFac2Mo = { "1401" };
        string[] ArryPrdFac2MoA = { "1402" };
        string[] ArryPrdSCA = { "1301", "1302" };
        string[] ArryPrdSCRM = { "1301" };
        string[] ArryPrdSCRA = { "1302" };
        string[] ArryPrdFac3 = { "1701", "1702" };
        string[] ArryPrdFac3M = { "1701" };
        string[] ArryPrdFac3A = { "1702" };
        string[] ArryPrdODM = { "1501" };

        string[] ArryPeriod = { "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod1 = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod2 = { "PRD_JAN", "PRD_FEB", "PRD_MAR", "PRD_APR", "PRD_MAY", "PRD_JUN", "PRD_JUL", "PRD_AUG", "PRD_SEP", "PRD_OCT", "PRD_NOV", "PRD_DEC" };
        int[] ArryMonth = { 4, 5, 6, 7, 8, 9, 10, 11, 12 };
        int[] ArryMonth1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };


        string pAccGroup = "EXP";
        string pBudgetType = "DI";
        string pYear = _DataDate.ToString("yyyy");
        string pMonth = _DataDate.ToString("MM");
        DateTime _LastYear = new DateTime();
        DateTime _Last2Year = new DateTime();
        DateTime _Last3Year = new DateTime();
        _LastYear = _DataDate.AddYears(-1);
        _Last2Year = _DataDate.AddYears(-2);
        _Last3Year = _DataDate.AddYears(-3);
        string pLastYear = _LastYear.ToString("yyyy");
        string pLast2Year = _Last2Year.ToString("yyyy");
        string pLast3Year = _Last3Year.ToString("yyyy");
        string TxtModel = " ";

        #region init



        int[] _PrdActual = new int[12];

        string[] ArrySeires5 = new string[5];
        Decimal[] ArrySeiresValue5 = new Decimal[5];



        #endregion

        string[] ArryLoop = new string[0];
        string ProductType = "";
        string TargetType = "";



        DateTime strDate = new DateTime(DateTime.Now.Year, _Month, 1, 0, 0, 0);
        DateTime endDate = strDate.AddMonths(1).Date + new TimeSpan(0, 0, 0);

        DateTime strHr = DateTime.Today + new TimeSpan(08, 00, 00);
        DateTime dateEnd = DateTime.Today + new TimeSpan(20, 00, 00);
        DateTime Endtoday = DateTime.Now;


        int MonthSelect = _Month;
        int PrevMonth = _Month - 1;
        int NextMonth = _Month + 1;



        //DataTable dtWorkingHour = new DataTable();
        //dtWorkingHour.Columns.Add("Position", typeof(string));
        //dtWorkingHour.Columns.Add("OT1", typeof(string));
        //dtWorkingHour.Columns.Add("OT15", typeof(string));
        //dtWorkingHour.Columns.Add("OT2", typeof(string));
        //dtWorkingHour.Columns.Add("OT3", typeof(string));
        //string[] arrPotition = { "OP", "LE", "FO", "SU" };
        //foreach (string item in arrPotition)
        //{
        //    dtWorkingHour.Rows.Add(item, "", "", "", "");
        //}


        //------------- Create column header OT  -----------------


        DataTable dtBCPD = new DataTable();
        dtBCPD.Columns.Add("Fiscal_year", typeof(string));
        dtBCPD.Columns.Add("ProductType", typeof(string));
        dtBCPD.Columns.Add("PRD_JAN", typeof(string));
        dtBCPD.Columns.Add("PRD_FEB", typeof(string));
        dtBCPD.Columns.Add("PRD_MAR", typeof(string));
        dtBCPD.Columns.Add("PRD_APR", typeof(string));
        dtBCPD.Columns.Add("PRD_MAY", typeof(string));
        dtBCPD.Columns.Add("PRD_JUN", typeof(string));
        dtBCPD.Columns.Add("PRD_JUL", typeof(string));
        dtBCPD.Columns.Add("PRD_AUG", typeof(string));
        dtBCPD.Columns.Add("PRD_SEP", typeof(string));
        dtBCPD.Columns.Add("PRD_OCT", typeof(string));
        dtBCPD.Columns.Add("PRD_NOV", typeof(string));
        dtBCPD.Columns.Add("PRD_DEC", typeof(string));
        DateTime setDate1 = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sqlBCPD = new SqlCommand();
        sqlBCPD.CommandText = "SELECT Fiscal_year " +
            " ,ProductType,PRD_APR,PRD_MAY,PRD_JUN,PRD_JUL,PRD_AUG " +
            " ,PRD_SEP,PRD_OCT,PRD_NOV,PRD_DEC,PRD_JAN,PRD_FEB,PRD_MAR,Total_PRD " +
           " from BC_PRODUCTION " +
           " where [Fiscal_year] = " + setDate1.Year;




        // int LBCSPD = 0;
        double Prd = 0, Prd1 = 0, Prd2 = 0, Prd3 = 0, Prd4 = 0, Prd5 = 0, Prd6 = 0, Prd7 = 0;
        double Prd8 = 0, Prd9 = 0, Prd10 = 0, Prd11 = 0, Prd12 = 0, SumPrd = 0, SumPrdOverAll = 0, PrdMonth = 0, SumPrdMonth = 0;
        DataTable dt1 = oConn.SqlGet(sqlBCPD, "DBBCS");
        foreach (DataRow item in dt1.Rows)
        {
            DataRow _rowBCSPD = dtBCPD.NewRow();
            _rowBCSPD["Fiscal_year"] = item["Fiscal_year"].ToString();
            _rowBCSPD["ProductType"] = item["ProductType"].ToString();
            _rowBCSPD["PRD_JAN"] = item["PRD_JAN"];
            _rowBCSPD["PRD_FEB"] = item["PRD_FEB"];
            _rowBCSPD["PRD_MAR"] = item["PRD_MAR"];
            _rowBCSPD["PRD_APR"] = item["PRD_APR"];
            _rowBCSPD["PRD_MAY"] = item["PRD_MAY"];
            _rowBCSPD["PRD_JUN"] = item["PRD_JUN"];
            _rowBCSPD["PRD_JUL"] = item["PRD_JUL"];
            _rowBCSPD["PRD_AUG"] = item["PRD_AUG"];
            _rowBCSPD["PRD_SEP"] = item["PRD_SEP"];
            _rowBCSPD["PRD_OCT"] = item["PRD_OCT"];
            _rowBCSPD["PRD_NOV"] = item["PRD_NOV"];
            _rowBCSPD["PRD_DEC"] = item["PRD_DEC"];
            dtBCPD.Rows.Add(_rowBCSPD);
        }


        //---------------- Get Employeee of Line --------------
        DataTable dtEmp = new DataTable();
        dtEmp.Columns.Add("Code", typeof(string));
        dtEmp.Columns.Add("Position", typeof(string));
        dtEmp.Columns.Add("CostCenter", typeof(string));
        dtEmp.Columns.Add("WType", typeof(string));
        DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sql = new SqlCommand();

        //Get Time Attendance by Section

        // All Maintenance
        if (_Type == "MTALL")
        {
            ArryLoop = ArryMT;

            txtCostCenter = " = " + ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1];

        }
        else if (_Type == "MTM")
        {
            ArryLoop = ArryMTM;

            txtCostCenter = " = " + ArryLoop[0];


        }
        else if (_Type == "MTA")
        {
            ArryLoop = ArryMTA;

            txtCostCenter = " = " + ArryLoop[0];


        }
        else if (_Type == "MTA")
        {
            ArryLoop = ArryMTA;

            txtCostCenter = " = " + ArryLoop[0];


        }
        else if (_Type == "PU")
        {
            ArryLoop = ArryProPU;

            txtCostCenter = " = " + ArryLoop[0];


        }
        else if (_Type == "SP")
        {
            ArryLoop = ArryProSP;

            txtCostCenter = " = " + ArryLoop[0];


        }
        else if (_Type == "SPU")
        {
            ArryLoop = ArryProSPU;

            txtCostCenter = " = " + ArryLoop[0];


        }
        else if (_Type == "IM")
        {
            ArryLoop = ArryIM;

            txtCostCenter = " = " + ArryLoop[0];


        }
        else if (_Type == "PN")
        {
            ArryLoop = ArryPN;

            txtCostCenter = " = " + ArryLoop[0];


        }
        else if (_Type == "WH")
        {
            ArryLoop = ArryWH;

            txtCostCenter = " = " + ArryLoop[0];


        }
        else if (_Type == "PS")
        {
            ArryLoop = ArryPS;

            txtCostCenter = " = " + ArryLoop[0];


        }
        else if (_Type == "DC")
        {
            ArryLoop = ArryDC;

            txtCostCenter = " = " + ArryLoop[0];


        }
        else if (_Type == "QC")
        {
            ArryLoop = ArryQC;

            txtCostCenter = " = " + ArryLoop[0];


        }
        else if (_Type == "QA")
        {
            ArryLoop = ArryQA;

            txtCostCenter = " = " + ArryLoop[0];


        }
        else if (_Type == "QS")
        {
            ArryLoop = ArryQS;

            txtCostCenter = " = " + ArryLoop[0];


        }
        else if (_Type == "DD")
        {
            ArryLoop = ArryDD;

            txtCostCenter = " = " + ArryLoop[0];


        }
        else if (_Type == "CD")
        {
            ArryLoop = ArryCD;

            txtCostCenter = " = " + ArryLoop[0];


        }
        else if (_Type == "ENA")
        {
            ArryLoop = ArryENA;

            txtCostCenter = " = " + ArryLoop[0];


        }
        else if (_Type == "ENM")
        {
            ArryLoop = ArryENM;

            txtCostCenter = " = " + ArryLoop[0];


        }
        else if (_Type == "ENMOT")
        {
            ArryLoop = ArryENMOT;

            txtCostCenter = " = " + ArryLoop[0];

        }
        else if (_Type == "IT")
        {
            ArryLoop = ArryIT;

            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "WC")
        {
            ArryLoop = ArryEC;

            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "UT")
        {
            ArryLoop = ArryUT;

            txtCostCenter = " = " + ArryLoop[0];
        }



        sql.CommandText = "SELECT e.CODE, POSIT,COSTCENTER,WTYPE FROM [Employee] e " +
        " where [COSTCENTER] " + txtCostCenter + " ORDER BY COSTCENTER,e.POSIT";


        int ii = 0;
        DataTable dt = oConn.SqlGet(sql, "DBDCI");
        foreach (DataRow item in dt.Rows)
        {
            DataRow _rowEmp = dtEmp.NewRow();
            _rowEmp["Code"] = item["CODE"].ToString();
            _rowEmp["Position"] = item["POSIT"].ToString();
            _rowEmp["CostCenter"] = item["COSTCENTER"].ToString();
            _rowEmp["WTYPE"] = item["WTYPE"].ToString();
            dtEmp.Rows.Add(_rowEmp);
        }
        //  lbMP.Text = dtEmp.Rows.Count.ToString();
        //---------------- Get Employeee of Line --------------        

        //----------------- Create row content Manpower ------------------

        MMPInfo.MPAllChartInfo oItemMPP = new MMPInfo.MPAllChartInfo();

        int accuOP1 = 0, accuOP15 = 0, accuOP2 = 0, accuOP3 = 0, CountMPOP = 1;
        int accuLE1 = 0, accuLE15 = 0, accuLE2 = 0, accuLE3 = 0, CountMPLE = 1;
        int accuFO1 = 0, accuFO15 = 0, accuFO2 = 0, accuFO3 = 0, CountMPFO = 1;
        int accuSU1 = 0, accuSU15 = 0, accuSU2 = 0, accuSU3 = 0, CountMPSU = 1;
        double CostOverAllSum = 0;

        double MPOP = 4, MPLE = 50, MPFO = 90, MPSU = 100;
        double totalOP = 0, totalOPOT1 = 0, totalOPOT15 = 0, totalOPOT2 = 0, totalOPOT3 = 0;
        double totalLE = 0, totalLEOT1 = 0, totalLEOT15 = 0, totalLEOT2 = 0, totalLEOT3 = 0;
        double totalFO = 0, totalFOOT1 = 0, totalFOOT15 = 0, totalFOOT2 = 0, totalFOOT3 = 0;
        double totalSU = 0, totalSUOT1 = 0, totalSUOT15 = 0, totalSUOT2 = 0, totalSUOT3 = 0;
        double TotalOT1 = 0, TotalOT15 = 0, TotalOT2 = 0, TotalOT3 = 0, TotalSum = 0;
        double CostOverall = 0;
        int SumTimeOP = 0, SumTimeLE = 0, SumTimeFO = 0, SumTimeSU = 0;



        for (ii = 3; ii <= MonthSelect; ii++)
        {
            Prd = 0;
            if (dtBCPD.Rows.Count > 0)
            {

                foreach (DataRow _rowbcpd in dtBCPD.Rows)
                {

                    int k = 0;
                    for (k = 1; k <= ArryPrd.Count(); k++)
                    {



                        if (ArryPrd[k - 1] == Convert.ToString(_rowbcpd["ProductType"].ToString()))
                        {
                            if (ArryPrd[k - 1] == "ODM")
                            {
                                PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                                PrdMonth = PrdMonth / 20;
                            }
                            else
                            {
                                PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                            }
                            Prd += PrdMonth;
                            // SumPrdMonth += PrdMonth;

                        }
                        PrdMonth = 0;





                        //if (ArryPrd[k - 1] == Convert.ToString(_rowbcpd["ProductType"].ToString()))
                        //{
                        //    Prd += Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());

                        //    //  SumPrdOverAll += SumPrd;
                        //}

                    }
                    //if (ii == 1)
                    //{
                    //    Prd1 = PrdMonth;

                    //}
                    //else if (ii == 2)
                    //{
                    //    Prd2 = PrdMonth;
                    //}
                    //else if (ii == 3)
                    //{
                    //    Prd3 = PrdMonth;
                    //}
                    //else if (ii == 4)
                    //{
                    //    Prd4 = PrdMonth;
                    //}
                    //else if (ii == 5)
                    //{
                    //    Prd5 = PrdMonth;
                    //}
                    //else if (ii == 6)
                    //{
                    //    Prd6 = PrdMonth;
                    //}
                    //else if (ii == 7)
                    //{
                    //    Prd7 = PrdMonth;
                    //}
                    //else if (ii == 8)
                    //{
                    //    Prd8 = PrdMonth;
                    //}
                    //else if (ii == 9)
                    //{
                    //    Prd9 = PrdMonth;
                    //}
                    //else if (ii == 10)
                    //{
                    //    Prd10 = PrdMonth;
                    //}
                    //else if (ii == 11)
                    //{
                    //    Prd11 = PrdMonth;
                    //}
                    //else if (ii == 12)
                    //{
                    //    Prd12 = PrdMonth;
                    //}
                    //SumPrdMonth += Prd1 + Prd2 + Prd3 + Prd4 + Prd5 + Prd6 + Prd7 + Prd8 + Prd9 + Prd10 + Prd11 + Prd12;
                    //}else  if (ProductType == Convert.ToString(_rowbcpd["ProductType"].ToString()))
                    //{
                    //    Prd = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                    //    SumPrd += Prd;
                    //}
                    //SumPrd += Prd1 + Prd2 + Prd3 + Prd4 + Prd5 + Prd6 + Prd7 + Prd8 + Prd9 + Prd10 + Prd11 + Prd12;
                    //SumPrdOverAll += SumPrdMonth;

                }
                //SumPrdOverAll += SumPrdMonth;
                SumPrd += Prd;
                // Prd = 0;
            }

            if (ii < MonthSelect)
            {
                setDate = new DateTime(DateTime.Now.Year, ii, 1);

            }
            else if (ii == MonthSelect)
            {
                setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);

            }
            else if (ii > MonthSelect)
            {

                setDate = new DateTime(DateTime.Now.Year, NextMonth, 1);

            }
            int __Month = setDate.Month;



            // Start Check Working Time OT in DB

            //---------------- Get Employeee of Line --------------
            DataTable dtMNOT = new DataTable();
            dtMNOT.Columns.Add("Fiscal_year", typeof(string));
            dtMNOT.Columns.Add("Monthly", typeof(string));
            dtMNOT.Columns.Add("ProductType", typeof(string));
            dtMNOT.Columns.Add("OPOT1", typeof(string));
            dtMNOT.Columns.Add("OPOT15", typeof(string));
            dtMNOT.Columns.Add("OPOT2", typeof(string));
            dtMNOT.Columns.Add("OPOT3", typeof(string));
            dtMNOT.Columns.Add("LEOT1", typeof(string));
            dtMNOT.Columns.Add("LEOT15", typeof(string));
            dtMNOT.Columns.Add("LEOT2", typeof(string));
            dtMNOT.Columns.Add("LEOT3", typeof(string));
            dtMNOT.Columns.Add("FOOT1", typeof(string));
            dtMNOT.Columns.Add("FOOT15", typeof(string));
            dtMNOT.Columns.Add("FOOT2", typeof(string));
            dtMNOT.Columns.Add("FOOT3", typeof(string));
            dtMNOT.Columns.Add("SUOT1", typeof(string));
            dtMNOT.Columns.Add("SUOT15", typeof(string));
            dtMNOT.Columns.Add("SUOT2", typeof(string));
            dtMNOT.Columns.Add("SUOT3", typeof(string));




            // DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


            SqlCommand sqlMNOT = new SqlCommand();


            sqlMNOT.CommandText = "SELECT Fiscal_year,ProductType,Monthly,OPOT1,OPOT15,OPOT2,OPOT3, " +
                    "LEOT1,LEOT15,LEOT2,LEOT3,FOOT1,FOOT15,FOOT2,FOOT3,SUOT1,SUOT15,SUOT2,SUOT3 FROM [BC_MANOT] " +
                     " where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' and ProductType ='" + _Type + "'";



            DataTable dtMOT = oConn.SqlGet(sqlMNOT, "DBBCS");

            if (dtMOT.Rows.Count > 0)
            {
                foreach (DataRow item in dtMOT.Rows)
                {
                    DataRow _rowMNOT = dtMNOT.NewRow();
                    _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                    _rowMNOT["Monthly"] = item["Monthly"].ToString();
                    _rowMNOT["ProductType"] = item["ProductType"].ToString();
                    _rowMNOT["OPOT1"] = item["OPOT1"].ToString();
                    _rowMNOT["OPOT15"] = item["OPOT15"].ToString();
                    _rowMNOT["OPOT2"] = item["OPOT2"].ToString();
                    _rowMNOT["OPOT3"] = item["OPOT3"].ToString();
                    _rowMNOT["LEOT1"] = item["LEOT1"].ToString();
                    _rowMNOT["LEOT15"] = item["LEOT15"].ToString();
                    _rowMNOT["LEOT2"] = item["LEOT2"].ToString();
                    _rowMNOT["LEOT3"] = item["LEOT3"].ToString();
                    _rowMNOT["FOOT1"] = item["FOOT1"].ToString();
                    _rowMNOT["FOOT15"] = item["FOOT15"].ToString();
                    _rowMNOT["FOOT2"] = item["FOOT2"].ToString();
                    _rowMNOT["FOOT3"] = item["FOOT3"].ToString();
                    _rowMNOT["SUOT1"] = item["SUOT1"].ToString();
                    _rowMNOT["SUOT15"] = item["SUOT15"].ToString();
                    _rowMNOT["SUOT2"] = item["SUOT2"].ToString();
                    _rowMNOT["SUOT3"] = item["SUOT3"].ToString();

                    dtMNOT.Rows.Add(_rowMNOT);
                }

            }




            if (dtMNOT.Rows.Count > 0)
            {

                if ((ii == MonthSelect))
                //if ((_Type == "ALL" || _Type == "FAC1" || _Type == "FAC2" || _Type == "FAC3" || _Type == "ODM") && (ii == MonthSelect))
                {

                    if (dtEmp.Rows.Count > 0)
                    {

                        foreach (DataRow _rowMP in dtEmp.Rows)
                        {


                            int idxMP = 0;
                            //--------------- Get Employee working Time ---------------------
                            DataTable dtempWorkingTime = new DataTable();
                            dtempWorkingTime = oMP.GetEmployeeWorkTimeOfMonth(_rowMP["Code"].ToString(), _rowMP["WTYPE"].ToString(), setDate.Month);
                            //--------------- Get Employee working Time ---------------------

                            for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                            {
                                setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);
                                //----------------- Fillter Working Time -------------
                                bool Working = false;
                                string OT1 = "-", OT15 = "-", OT2 = "-", OT3 = "-";
                                if (dtempWorkingTime.Rows.Count > 0)
                                {
                                    DataRow[] fillWork = dtempWorkingTime.Select("WorkDate = '" + setDate.ToString("yyyy-MM-dd") + "'");
                                    if (fillWork.Length > 0)
                                    {
                                        OT1 = Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]).ToString() : "-";
                                        OT15 = Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]).ToString() : "-";
                                        OT2 = Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]).ToString() : "-";
                                        OT3 = Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]).ToString() : "-";
                                        Working = true;

                                        //-------------------- Get OT Working Summary Each Position ---------------------
                                        #region
                                        if (_rowMP["Position"].ToString() == "OP" || _rowMP["Position"].ToString() == "OP.S")
                                        {
                                            accuOP1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                            accuOP15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                            accuOP2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                            accuOP3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                            CountMPOP += 1;

                                        }
                                        else if (_rowMP["Position"].ToString() == "LE" || _rowMP["Position"].ToString() == "LE.S")
                                        {
                                            accuLE1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                            accuLE15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                            accuLE2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                            accuLE3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                            CountMPLE += 1;
                                        }
                                        else if (_rowMP["Position"].ToString() == "FO" || _rowMP["Position"].ToString() == "FO.S")
                                        {
                                            accuFO1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                            accuFO15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                            accuFO2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                            accuFO3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                            CountMPFO += 1;
                                        }
                                        else if (_rowMP["Position"].ToString() == "SU" || _rowMP["Position"].ToString() == "SU.S")
                                        {
                                            accuSU1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                            accuSU15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                            accuSU2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                            accuSU3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                            CountMPSU += 1;
                                        }
                                        #endregion
                                        //-------------------- Get OT Working Summary Each Position ---------------------
                                    }


                                }

                            }


                        }


                    }



                    SqlCommand UpdateMNOT = new SqlCommand();

                    UpdateMNOT.CommandText = "Update  BC_MANOT set OPOT1 ='" + accuOP1 + "',OPOT15 ='" + accuOP15 + "' , " +
                                        "OPOT2 ='" + accuOP2 + "',OPOT3 ='" + accuOP3 + "',LEOT1='" + accuLE1 + "' , " +
                                        "LEOT15 ='" + accuLE15 + "',LEOT2='" + accuLE2 + "',LEOT3='" + accuLE3 + "' ," +
                                        "FOOT1='" + accuFO1 + "',FOOT15='" + accuFO15 + "' ,FOOT2='" + accuFO2 + "'," +
                                        "FOOT3='" + accuFO3 + "', " +
                                        " SUOT1='" + accuSU1 + "' ,SUOT15='" + accuSU15 + "' ,SUOT2='" + accuSU2 + "' ,SUOT3='" + accuSU3 + "'" +
                                        "where  Fiscal_year ='" + setDate.ToString("yyyy") + "' and Monthly ='" + ii + "' and ProductType ='" + _Type + "'";

                    oConn.SqlExecute(UpdateMNOT, "DBBCS");
                }
            }
            else
            {

                //if (_Type == "ALL" || _Type == "FAC1" || _Type == "FAC2" || _Type == "FAC3" || _Type == "ODM")
                //{

                if (dtEmp.Rows.Count > 0)
                {

                    foreach (DataRow _rowMP in dtEmp.Rows)
                    {


                        int idxMP = 0;
                        //--------------- Get Employee working Time ---------------------
                        DataTable dtempWorkingTime = new DataTable();
                        dtempWorkingTime = oMP.GetEmployeeWorkTimeOfMonth(_rowMP["Code"].ToString(), _rowMP["WTYPE"].ToString(), setDate.Month);
                        //--------------- Get Employee working Time ---------------------

                        for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                        {
                            setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);
                            //----------------- Fillter Working Time -------------
                            bool Working = false;
                            string OT1 = "-", OT15 = "-", OT2 = "-", OT3 = "-";
                            if (dtempWorkingTime.Rows.Count > 0)
                            {
                                DataRow[] fillWork = dtempWorkingTime.Select("WorkDate = '" + setDate.ToString("yyyy-MM-dd") + "'");
                                if (fillWork.Length > 0)
                                {
                                    OT1 = Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]).ToString() : "-";
                                    OT15 = Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]).ToString() : "-";
                                    OT2 = Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]).ToString() : "-";
                                    OT3 = Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]).ToString() : "-";
                                    Working = true;

                                    //-------------------- Get OT Working Summary Each Position ---------------------
                                    #region
                                    if (_rowMP["Position"].ToString() == "OP" || _rowMP["Position"].ToString() == "OP.S")
                                    {
                                        accuOP1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                        accuOP15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                        accuOP2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                        accuOP3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                        CountMPOP += 1;

                                    }
                                    else if (_rowMP["Position"].ToString() == "LE" || _rowMP["Position"].ToString() == "LE.S")
                                    {
                                        accuLE1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                        accuLE15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                        accuLE2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                        accuLE3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                        CountMPLE += 1;
                                    }
                                    else if (_rowMP["Position"].ToString() == "FO" || _rowMP["Position"].ToString() == "FO.S")
                                    {
                                        accuFO1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                        accuFO15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                        accuFO2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                        accuFO3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                        CountMPFO += 1;
                                    }
                                    else if (_rowMP["Position"].ToString() == "SU" || _rowMP["Position"].ToString() == "SU.S")
                                    {
                                        accuSU1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                        accuSU15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                        accuSU2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                        accuSU3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                        CountMPSU += 1;
                                    }
                                    #endregion
                                    //-------------------- Get OT Working Summary Each Position ---------------------
                                }


                            }

                        }


                    }


                    //}


                    SqlCommand InsertMNOT = new SqlCommand();

                    InsertMNOT.CommandText = "Insert into BC_MANOT(Fiscal_year,ProductType,Monthly,OPOT1,OPOT15," +
                                        " OPOT2,OPOT3,LEOT1,LEOT15,LEOT2,LEOT3,FOOT1,FOOT15,FOOT2,FOOT3," +
                                        " SUOT1,SUOT15,SUOT2,SUOT3) " +
                                        "  values ('" + setDate.ToString("yyyy") + "','" + _Type + "' ,'" + ii + "','" + accuOP1 + "'" +
                                        ",'" + accuOP15 + "','" + accuOP2 + "','" + accuOP3 + "'" +
                                        ",'" + accuLE1 + "','" + accuLE15 + "','" + accuLE2 + "','" + accuLE3 + "'" +
                                        ",'" + accuFO1 + "','" + accuFO15 + "','" + accuFO2 + "','" + accuFO3 + "'" +
                                        ",'" + accuSU1 + "','" + accuSU15 + "','" + accuSU2 + "','" + accuSU3 + "')";
                    oConn.SqlExecute(InsertMNOT, "DBBCS");

                }
            }



            //  #region


            if (dtMNOT.Rows.Count > 0)
            {
                foreach (DataRow _rowMN in dtMNOT.Rows)
                {
                    if (_Type == _rowMN["ProductType"].ToString())
                    {

                        // Operator OT1,15,2,3
                        totalOPOT1 = Convert.ToDouble(_rowMN["OPOT1"]) / 60;
                        totalOPOT15 = Convert.ToDouble(_rowMN["OPOT15"]) / 60;
                        totalOPOT2 = Convert.ToDouble(_rowMN["OPOT2"]) / 60;
                        totalOPOT3 = Convert.ToDouble(_rowMN["OPOT3"]) / 60;



                        oItemMPP.OPOT1 = totalOPOT1;
                        oItemMPP.OPOT15 = totalOPOT15;
                        oItemMPP.OPOT2 = totalOPOT2;
                        oItemMPP.OPOT3 = totalOPOT3;

                        // Cost OT of Operator Ot1,15,2,3
                        totalOP += (totalOPOT1 * MPLE);
                        totalOP += (totalOPOT15 * (MPLE * 1.5));
                        totalOP += (totalOPOT2 * (MPLE * 2));
                        totalOP += (totalOPOT3 * (MPLE * 3));
                        TotalOT1 = totalOP;
                        //totalLE = totalLEOT1;



                        // Leader OT1,15,2,3
                        totalLEOT1 = Convert.ToDouble(_rowMN["LEOT1"]) / 60;
                        totalLEOT15 = Convert.ToDouble(_rowMN["LEOT15"]) / 60;
                        totalLEOT2 = Convert.ToDouble(_rowMN["LEOT2"]) / 60;
                        totalLEOT3 = Convert.ToDouble(_rowMN["LEOT3"]) / 60;

                        oItemMPP.LEOT1 = totalLEOT1;
                        oItemMPP.LEOT15 = totalLEOT15;
                        oItemMPP.LEOT2 = totalLEOT2;
                        oItemMPP.LEOT3 = totalLEOT3;
                        // Cost OT of Leader Ot1,15,2,3
                        totalLE += (totalLEOT1 * MPLE);
                        totalLE += (totalLEOT15 * (MPLE * 1.5));
                        totalLE += (totalLEOT2 * (MPLE * 2));
                        totalLE += (totalLEOT3 * (MPLE * 3));
                        TotalOT15 = totalLE;
                        //totalLE = totalLEOT1;



                        //** Foreman OT1,15,2,3
                        totalFOOT1 = Convert.ToDouble(_rowMN["FOOT1"]) / 60;
                        totalFOOT15 = Convert.ToDouble(_rowMN["FOOT15"]) / 60;
                        totalFOOT2 = Convert.ToDouble(_rowMN["FOOT2"]) / 60;
                        totalFOOT3 = Convert.ToDouble(_rowMN["FOOT3"]) / 60;

                        oItemMPP.FOOT1 = totalFOOT1;
                        oItemMPP.FOOT15 = totalFOOT15;
                        oItemMPP.FOOT2 = totalFOOT2;
                        oItemMPP.FOOT3 = totalFOOT3;
                        // ** Cost OT of Foreman Ot1,15,2,3
                        totalFO += (totalFOOT1 * MPFO);
                        totalFO += (totalFOOT15 * (MPFO * 1.5));
                        totalFO += (totalFOOT2 * (MPFO * 2));
                        totalFO += (totalFOOT3 * (MPFO * 3));
                        TotalOT2 = totalFO;
                        //totalFO = totalFOOT1;


                        totalSUOT1 = Convert.ToDouble(_rowMN["SUOT1"]) / 60;
                        totalSUOT15 = Convert.ToDouble(_rowMN["SUOT15"]) / 60;
                        totalSUOT2 = Convert.ToDouble(_rowMN["SUOT2"]) / 60;
                        totalSUOT3 = Convert.ToDouble(_rowMN["SUOT3"]) / 60;

                        totalSU += (totalSUOT1 * MPSU);
                        totalSU += (totalSUOT15 * (MPSU * 1.5));
                        totalSU += (totalSUOT2 * (MPSU * 2));
                        totalSU += (totalSUOT3 * (MPSU * 3));
                        TotalOT3 = totalSU;
                        //totalSU = totalSUOT1;


                        oItemMPP.SUPosition = "SU";

                        oItemMPP.SUOT1 = totalSUOT1;
                        oItemMPP.SUOT15 = totalSUOT15;
                        oItemMPP.SUOT2 = totalSUOT2;
                        oItemMPP.SUOT3 = totalSUOT3;






                    }
                }
            }


            //Calculate Cost/Unit and Accum Cost/Unit

            double CostUnitch = 0, AccumCostUnitch = 0;



            CostOverall = totalOP + totalLE + totalFO + totalSU;

            CostOverAllSum += CostOverall;




            //if (_Type == "ALL")
            //{
            if ((Prd != 0) && (SumPrd != 0))
            {
                string CostUnit, AccumCostUnit;
                if (Prd != SumPrd)
                {
                    CostUnit = String.Format("{0:F3}", (CostOverall / Prd));
                    AccumCostUnit = String.Format("{0:F3}", (CostOverAllSum / SumPrd));
                }
                else
                {
                    CostUnit = String.Format("{0:F3}", (CostOverall / Prd));
                    AccumCostUnit = String.Format("{0:F3}", (CostOverAllSum / Prd));


                }

                CostUnitch = Convert.ToDouble(CostUnit.ToString());
                AccumCostUnitch = Convert.ToDouble(AccumCostUnit.ToString());
            }




            int ix = 0;
            //foreach (string __Month in ArryPeriod)
            //{
            // add data 
            MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


            if (__Month == 4)
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;

                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if (__Month == 5)
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if (__Month == 6)
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if (__Month == 7)
            {

                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if (__Month == 8)
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if (__Month == 9)
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if (__Month == 10)
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if (__Month == 11)
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if (__Month == 12)
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if (__Month == 1)
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if (__Month == 2)
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if (__Month == 3)
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }
            //if (AccumCostUnitch != 0) 
            //{
            mManPower.dataCostCenter = ArryPeriod1[__Month - 1];
            mManPower.dataYearMonth = ArryPeriod1[__Month - 1];
            oListMP.Add(mManPower);
            //}


            //mManPower.dataCostCenter = ArryPeriod1[__Month-1];
            //mManPower.dataYearMonth = ArryPeriod1[__Month - 1];
            //oListMP.Add(mManPower);

            //  Prd = 0;
            //   SumPrd = 0;
            PrdMonth = 0;
            SumPrdMonth = 0;
            //   SumPrdOverAll = 0;
            CostOverall = 0;
            totalOP = 0;
            totalLE = 0;
            totalFO = 0;
            totalSU = 0;

            totalOP = 0;
            totalLE = 0;
            totalFO = 0;
            totalSU = 0;

            accuOP1 = 0;
            accuOP15 = 0;
            accuOP2 = 0;
            accuOP3 = 0;

            accuLE1 = 0;
            accuLE15 = 0;
            accuLE2 = 0;
            accuLE3 = 0;

            accuFO1 = 0;
            accuFO15 = 0;
            accuFO2 = 0;
            accuFO3 = 0;

            accuSU1 = 0;
            accuSU15 = 0;
            accuSU2 = 0;
            accuSU3 = 0;

            totalOPOT1 = 0;
            totalOPOT15 = 0;
            totalOPOT2 = 0;
            totalOPOT3 = 0;
            totalOP = 0;

            totalLEOT1 = 0;
            totalLEOT15 = 0;
            totalLEOT2 = 0;
            totalLEOT3 = 0;
            totalLE = 0;

            totalFOOT1 = 0;
            totalFOOT15 = 0;
            totalFOOT2 = 0;
            totalFOOT3 = 0;
            totalFO = 0;

            totalSUOT1 = 0;
            totalSUOT15 = 0;
            totalSUOT2 = 0;
            totalSUOT3 = 0;
            totalSU = 0;

            oItemMPP.OPOT1 = 0;
            oItemMPP.OPOT15 = 0;
            oItemMPP.OPOT2 = 0;
            oItemMPP.OPOT3 = 0;

            oItemMPP.LEOT1 = 0;
            oItemMPP.LEOT15 = 0;
            oItemMPP.LEOT2 = 0;
            oItemMPP.LEOT3 = 0;

            oItemMPP.FOOT1 = 0;
            oItemMPP.FOOT15 = 0;
            oItemMPP.FOOT2 = 0;
            oItemMPP.FOOT3 = 0;

            oItemMPP.SUOT1 = 0;
            oItemMPP.SUOT15 = 0;
            oItemMPP.SUOT2 = 0;
            oItemMPP.SUOT3 = 0;




        }
        return oListMP;
    }




    public List<MMPInfo.MPAllChartInfo> GetChartMP(int _Month, DateTime _DataDate, string _Type)
    {

        List<MMPInfo.MPAllChartInfo> oListMP = new List<MMPInfo.MPAllChartInfo>();


        string[] ArryPrd = { "1YC", "2YC", "SCR", "1YC/3", "ODM" };
        //string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702", "4310", "4320", "4510", "4720", "8120" };
        string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702" };
        string[] ArryPrdFac1 = { "1101", "1102" };
        string[] ArryPrdFac1M = { "1101" };
        string[] ArryPrdFac1A = { "1102" };
        string[] ArryPrdFac2 = { "1201", "1202", "1301", "1302", "1401", "1402" };
        string[] ArryPrdFac2M = { "1201" };
        string[] ArryPrdFac2A = { "1202" };
        string[] ArryPrdFac2Mo = { "1401" };
        string[] ArryPrdFac2MoA = { "1402" };
        string[] ArryPrdSCA = { "1301", "1302" };
        string[] ArryPrdSCRM = { "1301" };
        string[] ArryPrdSCRA = { "1302" };
        string[] ArryPrdFac3 = { "1701", "1702" };
        string[] ArryPrdFac3M = { "1701" };
        string[] ArryPrdFac3A = { "1702" };
        string[] ArryPrdODM = { "1501" };

        string[] ArryPeriod = { "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod1 = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod2 = { "PRD_JAN", "PRD_FEB", "PRD_MAR", "PRD_APR", "PRD_MAY", "PRD_JUN", "PRD_JUL", "PRD_AUG", "PRD_SEP", "PRD_OCT", "PRD_NOV", "PRD_DEC" };
        int[] ArryDay = { 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };
        int[] ArryMonth = { 4, 5, 6, 7, 8, 9, 10, 11, 12 };
        int[] ArryMonth1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };


        string pAccGroup = "EXP";
        string pBudgetType = "DI";
        string pYear = _DataDate.ToString("yyyy");
        string pMonth = _DataDate.ToString("MM");
        DateTime _LastYear = new DateTime();
        DateTime _Last2Year = new DateTime();
        DateTime _Last3Year = new DateTime();
        _LastYear = _DataDate.AddYears(-1);
        _Last2Year = _DataDate.AddYears(-2);
        _Last3Year = _DataDate.AddYears(-3);
        string pLastYear = _LastYear.ToString("yyyy");
        string pLast2Year = _Last2Year.ToString("yyyy");
        string pLast3Year = _Last3Year.ToString("yyyy");
        string TxtModel = " ";

        #region init



        int[] _PrdActual = new int[12];

        string[] ArrySeires5 = new string[5];
        Decimal[] ArrySeiresValue5 = new Decimal[5];



        #endregion

        string[] ArryLoop = new string[0];
        string ProductType = "";
        string TargetType = "";
        if (_Type == "ALL")
        {
            ArryLoop = ArryPrdALL;
            TargetType = "DCI";
        }
        else if (_Type == "FAC1")
        {
            ArryLoop = ArryPrdFac1;
            ProductType = "1YC";
            TargetType = "1YC";
            TxtModel = "1YC%";

        }
        else if (_Type == "FAC1M")
        {
            ArryLoop = ArryPrdFac1M;
            ProductType = "1YC";
            TargetType = "1YC";
        }
        else if (_Type == "FAC1A")
        {
            ArryLoop = ArryPrdFac1A;
            ProductType = "1YC";
            TargetType = "1YC";
        }
        else if (_Type == "FAC2")
        {
            ArryLoop = ArryPrdFac2;
            ProductType = "2YC";
            TargetType = "2YC";
            TxtModel = "2YC%";
        }
        else if (_Type == "FAC2M")
        {
            ArryLoop = ArryPrdFac2M;
            ProductType = "2YC";
            TargetType = "2YC";
        }
        else if (_Type == "FAC2A")
        {
            ArryLoop = ArryPrdFac2A;
            ProductType = "2YC";
            TargetType = "2YC";
        }
        else if (_Type == "FAC2MOM")
        {
            ArryLoop = ArryPrdFac2M;
            ProductType = "2YC";
            TargetType = "2YC";
        }
        else if (_Type == "FAC2MOA")
        {
            ArryLoop = ArryPrdFac2A;
            ProductType = "2YC";
            TargetType = "2YC";
        }
        else if (_Type == "FAC3")
        {
            ArryLoop = ArryPrdFac3;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            TxtModel = "1YC%";
        }
        else if (_Type == "FAC3M")
        {
            ArryLoop = ArryPrdFac3M;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
        }
        else if (_Type == "FAC3A")
        {
            ArryLoop = ArryPrdFac3A;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
        }
        else if (_Type == "ODM")
        {
            ArryLoop = ArryPrdODM;
            ProductType = "ODM";
            TargetType = "ODM";
        }
        else if (_Type == "SCR")
        {
            ArryLoop = ArryPrdSCA;
            ProductType = "SCR";
            TargetType = "SCR";
        }
        else if (_Type == "SCRM")
        {
            ArryLoop = ArryPrdSCRM;
            ProductType = "SCR";
            TargetType = "SCR";
        }
        else if (_Type == "SCRA")
        {
            ArryLoop = ArryPrdSCRA;
            ProductType = "SCR";
            TargetType = "SCR";
        }



        DateTime strDate = new DateTime(DateTime.Now.Year, _Month, 1, 0, 0, 0);
        DateTime endDate = strDate.AddMonths(1).Date + new TimeSpan(0, 0, 0);

        DateTime strHr = DateTime.Today + new TimeSpan(08, 00, 00);
        DateTime dateEnd = DateTime.Today + new TimeSpan(20, 00, 00);
        DateTime Endtoday = DateTime.Now;


        int MonthSelect = _Month;
        int PrevMonth = _Month - 1;
        int NextMonth = _Month + 1;



        //DataTable dtWorkingHour = new DataTable();
        //dtWorkingHour.Columns.Add("Position", typeof(string));
        //dtWorkingHour.Columns.Add("OT1", typeof(string));
        //dtWorkingHour.Columns.Add("OT15", typeof(string));
        //dtWorkingHour.Columns.Add("OT2", typeof(string));
        //dtWorkingHour.Columns.Add("OT3", typeof(string));
        //string[] arrPotition = { "OP", "LE", "FO", "SU" };
        //foreach (string item in arrPotition)
        //{
        //    dtWorkingHour.Rows.Add(item, "", "", "", "");
        //}


        //------------- Create column header OT  -----------------


        DataTable dtBCPD = new DataTable();
        dtBCPD.Columns.Add("Fiscal_year", typeof(string));
        dtBCPD.Columns.Add("ProductType", typeof(string));
        dtBCPD.Columns.Add("PRD_JAN", typeof(string));
        dtBCPD.Columns.Add("PRD_FEB", typeof(string));
        dtBCPD.Columns.Add("PRD_MAR", typeof(string));
        dtBCPD.Columns.Add("PRD_APR", typeof(string));
        dtBCPD.Columns.Add("PRD_MAY", typeof(string));
        dtBCPD.Columns.Add("PRD_JUN", typeof(string));
        dtBCPD.Columns.Add("PRD_JUL", typeof(string));
        dtBCPD.Columns.Add("PRD_AUG", typeof(string));
        dtBCPD.Columns.Add("PRD_SEP", typeof(string));
        dtBCPD.Columns.Add("PRD_OCT", typeof(string));
        dtBCPD.Columns.Add("PRD_NOV", typeof(string));
        dtBCPD.Columns.Add("PRD_DEC", typeof(string));
        DateTime setDate1 = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sqlBCPD = new SqlCommand();
        sqlBCPD.CommandText = "SELECT Fiscal_year " +
            " ,ProductType,PRD_APR,PRD_MAY,PRD_JUN,PRD_JUL,PRD_AUG " +
            " ,PRD_SEP,PRD_OCT,PRD_NOV,PRD_DEC,PRD_JAN,PRD_FEB,PRD_MAR,Total_PRD " +
           " from BC_PRODUCTION " +
           " where [Fiscal_year] = " + setDate1.Year;


        // int LBCSPD = 0;
        double Prd = 0, Prd1 = 0, Prd2 = 0, Prd3 = 0, Prd4 = 0, Prd5 = 0, Prd6 = 0, Prd7 = 0;
        double Prd8 = 0, Prd9 = 0, Prd10 = 0, Prd11 = 0, Prd12 = 0, SumPrd = 0, SumPrdOverAll = 0, PrdMonth = 0, SumPrdMonth = 0;
        DataTable dt1 = oConn.SqlGet(sqlBCPD, "DBBCS");
        foreach (DataRow item in dt1.Rows)
        {
            DataRow _rowBCSPD = dtBCPD.NewRow();
            _rowBCSPD["Fiscal_year"] = item["Fiscal_year"].ToString();
            _rowBCSPD["ProductType"] = item["ProductType"].ToString();
            _rowBCSPD["PRD_JAN"] = item["PRD_JAN"];
            _rowBCSPD["PRD_FEB"] = item["PRD_FEB"];
            _rowBCSPD["PRD_MAR"] = item["PRD_MAR"];
            _rowBCSPD["PRD_APR"] = item["PRD_APR"];
            _rowBCSPD["PRD_MAY"] = item["PRD_MAY"];
            _rowBCSPD["PRD_JUN"] = item["PRD_JUN"];
            _rowBCSPD["PRD_JUL"] = item["PRD_JUL"];
            _rowBCSPD["PRD_AUG"] = item["PRD_AUG"];
            _rowBCSPD["PRD_SEP"] = item["PRD_SEP"];
            _rowBCSPD["PRD_OCT"] = item["PRD_OCT"];
            _rowBCSPD["PRD_NOV"] = item["PRD_NOV"];
            _rowBCSPD["PRD_DEC"] = item["PRD_DEC"];
            dtBCPD.Rows.Add(_rowBCSPD);
        }


        //---------------- Get Employeee of Line --------------
        DataTable dtEmp = new DataTable();
        dtEmp.Columns.Add("Code", typeof(string));
        dtEmp.Columns.Add("Position", typeof(string));
        dtEmp.Columns.Add("CostCenter", typeof(string));
        dtEmp.Columns.Add("WType", typeof(string));
        DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sql = new SqlCommand();

        if (_Type == "ALL")
        {

            txtCostCenter = " = " + ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1] +
              " or [COSTCENTER] = " + ArryLoop[2] + " or [COSTCENTER] = " + ArryLoop[3] +
               " or [COSTCENTER] = " + ArryLoop[4] + " or [COSTCENTER] = " + ArryLoop[5] +
               " or [COSTCENTER] = " + ArryLoop[6] + " or [COSTCENTER] = " + ArryLoop[7] +
            " or [COSTCENTER] = " + ArryLoop[8] + " or [COSTCENTER] = " + ArryLoop[9] +
            " or [COSTCENTER] = " + ArryLoop[10];



        }
        else if (_Type == "FAC3")
        {
            txtCostCenter = " = " + ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1];

        }
        else if (_Type == "FAC3M")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "FAC3A")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "FAC2")
        {
            txtCostCenter = " = " + ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1] +
                         " or [COSTCENTER] = " + ArryLoop[2] + " or [COSTCENTER] = " + ArryLoop[3] +
                          " or [COSTCENTER] = " + ArryLoop[4] + " or [COSTCENTER] = " + ArryLoop[5];
        }
        else if (_Type == "FAC2M")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "FAC2A")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "FAC2MOM")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "FAC2MOA")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "SCRA")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "SCRM")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }


        else if (_Type == "FAC1")
        {
            txtCostCenter = " = " + ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1];
        }
        else if (_Type == "FAC1M")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "FAC1A")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "ODM")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }

        sql.CommandText = "SELECT e.CODE, POSIT,COSTCENTER,WTYPE FROM [Employee] e " +
        " where [COSTCENTER] " + txtCostCenter + " ORDER BY COSTCENTER,e.POSIT";


        int ii = 0;
        DataTable dt = oConn.SqlGet(sql, "DBDCI");
        foreach (DataRow item in dt.Rows)
        {
            DataRow _rowEmp = dtEmp.NewRow();
            _rowEmp["Code"] = item["CODE"].ToString();
            _rowEmp["Position"] = item["POSIT"].ToString();
            _rowEmp["CostCenter"] = item["COSTCENTER"].ToString();
            _rowEmp["WType"] = item["WTYPE"].ToString();
            dtEmp.Rows.Add(_rowEmp);
        }
        //  lbMP.Text = dtEmp.Rows.Count.ToString();
        //---------------- Get Employeee of Line --------------        

        //----------------- Create row content Manpower ------------------

        MMPInfo.MPAllChartInfo oItemMPP = new MMPInfo.MPAllChartInfo();

        int accuOP1 = 0, accuOP15 = 0, accuOP2 = 0, accuOP3 = 0, CountMPOP = 1;
        int accuLE1 = 0, accuLE15 = 0, accuLE2 = 0, accuLE3 = 0, CountMPLE = 1;
        int accuFO1 = 0, accuFO15 = 0, accuFO2 = 0, accuFO3 = 0, CountMPFO = 1;
        int accuSU1 = 0, accuSU15 = 0, accuSU2 = 0, accuSU3 = 0, CountMPSU = 1;
        double CostOverAllSum = 0;
        // double CostOverAll = 0;




        for (ii = 1; ii <= MonthSelect; ii++)
        {
            Prd = 0;
            if (dtBCPD.Rows.Count > 0)
            {

                foreach (DataRow _rowbcpd in dtBCPD.Rows)
                {

                    if (_Type == "FAC2")
                    {
                        if (Convert.ToString(_rowbcpd["ProductType"].ToString()) == "2YC" || Convert.ToString(_rowbcpd["ProductType"].ToString()) == "SCR")
                        {
                            PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                            Prd += PrdMonth;
                            //    SumPrd += Prd;
                        }
                    }
                    else if (_Type == "ALL")
                    {
                        int k = 0;
                        for (k = 1; k <= ArryPrd.Count(); k++)
                        {


                            if (ArryPrd[k - 1] == Convert.ToString(_rowbcpd["ProductType"].ToString()))
                            {
                                if (ArryPrd[k - 1] == "ODM")
                                {
                                    PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                                    PrdMonth = PrdMonth / 20;
                                }
                                else
                                {
                                    PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                                }
                                Prd += PrdMonth;


                            }
                            PrdMonth = 0;
                        }
                    }
                    else

                        if (ProductType == Convert.ToString(_rowbcpd["ProductType"].ToString()))
                        {
                            Prd = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                            // SumPrd += Prd;
                        }


                    // SumPrd += Prd;
                }
                SumPrd += Prd;

            }


            if (ii < MonthSelect)
            {
                setDate = new DateTime(DateTime.Now.Year, ii, 1);

            }
            else if (ii == MonthSelect)
            {
                setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);

            }
            else if (ii > MonthSelect)
            {

                setDate = new DateTime(DateTime.Now.Year, NextMonth, 1);

            }
            int __Month = setDate.Month;


            // Start Check Working Time OT in DB

            //---------------- Get Employeee of Line --------------
            DataTable dtMNOT = new DataTable();
            dtMNOT.Columns.Add("Fiscal_year", typeof(string));
            dtMNOT.Columns.Add("Monthly", typeof(string));
            dtMNOT.Columns.Add("ProductType", typeof(string));
            dtMNOT.Columns.Add("OPOT1", typeof(string));
            dtMNOT.Columns.Add("OPOT15", typeof(string));
            dtMNOT.Columns.Add("OPOT2", typeof(string));
            dtMNOT.Columns.Add("OPOT3", typeof(string));
            dtMNOT.Columns.Add("LEOT1", typeof(string));
            dtMNOT.Columns.Add("LEOT15", typeof(string));
            dtMNOT.Columns.Add("LEOT2", typeof(string));
            dtMNOT.Columns.Add("LEOT3", typeof(string));
            dtMNOT.Columns.Add("FOOT1", typeof(string));
            dtMNOT.Columns.Add("FOOT15", typeof(string));
            dtMNOT.Columns.Add("FOOT2", typeof(string));
            dtMNOT.Columns.Add("FOOT3", typeof(string));
            dtMNOT.Columns.Add("SUOT1", typeof(string));
            dtMNOT.Columns.Add("SUOT15", typeof(string));
            dtMNOT.Columns.Add("SUOT2", typeof(string));
            dtMNOT.Columns.Add("SUOT3", typeof(string));




            // DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


            SqlCommand sqlMNOT = new SqlCommand();


            sqlMNOT.CommandText = "SELECT Fiscal_year,ProductType,Monthly,OPOT1,OPOT15,OPOT2,OPOT3, " +
                    "LEOT1,LEOT15,LEOT2,LEOT3,FOOT1,FOOT15,FOOT2,FOOT3,SUOT1,SUOT15,SUOT2,SUOT3 FROM [BC_MANOT] " +
                     " where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' and ProductType ='" + _Type + "'";



            DataTable dtMOT = oConn.SqlGet(sqlMNOT, "DBBCS");

            if (dtMOT.Rows.Count > 0)
            {
                foreach (DataRow item in dtMOT.Rows)
                {
                    DataRow _rowMNOT = dtMNOT.NewRow();
                    _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                    _rowMNOT["Monthly"] = item["Monthly"].ToString();
                    _rowMNOT["ProductType"] = item["ProductType"].ToString();
                    _rowMNOT["OPOT1"] = item["OPOT1"].ToString();
                    _rowMNOT["OPOT15"] = item["OPOT15"].ToString();
                    _rowMNOT["OPOT2"] = item["OPOT2"].ToString();
                    _rowMNOT["OPOT3"] = item["OPOT3"].ToString();
                    _rowMNOT["LEOT1"] = item["LEOT1"].ToString();
                    _rowMNOT["LEOT15"] = item["LEOT15"].ToString();
                    _rowMNOT["LEOT2"] = item["LEOT2"].ToString();
                    _rowMNOT["LEOT3"] = item["LEOT3"].ToString();
                    _rowMNOT["FOOT1"] = item["FOOT1"].ToString();
                    _rowMNOT["FOOT15"] = item["FOOT15"].ToString();
                    _rowMNOT["FOOT2"] = item["FOOT2"].ToString();
                    _rowMNOT["FOOT3"] = item["FOOT3"].ToString();
                    _rowMNOT["SUOT1"] = item["SUOT1"].ToString();
                    _rowMNOT["SUOT15"] = item["SUOT15"].ToString();
                    _rowMNOT["SUOT2"] = item["SUOT2"].ToString();
                    _rowMNOT["SUOT3"] = item["SUOT3"].ToString();

                    dtMNOT.Rows.Add(_rowMNOT);
                }

            }





            //   string InsertDD;

            double MPOP = 4, MPLE = 50, MPFO = 90, MPSU = 100;
            double totalOP = 0, totalOPOT1 = 0, totalOPOT15 = 0, totalOPOT2 = 0, totalOPOT3 = 0;
            double totalLE = 0, totalLEOT1 = 0, totalLEOT15 = 0, totalLEOT2 = 0, totalLEOT3 = 0;
            double totalFO = 0, totalFOOT1 = 0, totalFOOT15 = 0, totalFOOT2 = 0, totalFOOT3 = 0;
            double totalSU = 0, totalSUOT1 = 0, totalSUOT15 = 0, totalSUOT2 = 0, totalSUOT3 = 0;
            double TotalOT1 = 0, TotalOT15 = 0, TotalOT2 = 0, TotalOT3 = 0, TotalSum = 0;
            double CostOverall = 0;
            int SumTimeOP = 0, SumTimeLE = 0, SumTimeFO = 0, SumTimeSU = 0;

            if (dtMNOT.Rows.Count > 0)
            {
                if ((ii == MonthSelect))
                //if ((_Type == "ALL" || _Type == "FAC1" || _Type == "FAC2" || _Type == "FAC3" || _Type == "ODM") && (ii == MonthSelect))
                {

                    if (dtEmp.Rows.Count > 0)
                    {

                        foreach (DataRow _rowMP in dtEmp.Rows)
                        {


                            int idxMP = 0;
                            //--------------- Get Employee working Time ---------------------
                            DataTable dtempWorkingTime = new DataTable();
                            dtempWorkingTime = oMP.GetEmployeeWorkTimeOfMonthNew(_rowMP["Code"].ToString(), _rowMP["WTYPE"].ToString(), setDate.Month);
                            //--------------- Get Employee working Time ---------------------

                            for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                            {
                                setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);
                                //----------------- Fillter Working Time -------------
                                bool Working = false;
                                string OT1 = "-", OT15 = "-", OT2 = "-", OT3 = "-";
                                if (dtempWorkingTime.Rows.Count > 0)
                                {
                                    DataRow[] fillWork = dtempWorkingTime.Select("WorkDate = '" + setDate.ToString("yyyy-MM-dd") + "'");
                                    if (fillWork.Length > 0)
                                    {
                                        OT1 = Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]).ToString() : "-";
                                        OT15 = Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]).ToString() : "-";
                                        OT2 = Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]).ToString() : "-";
                                        OT3 = Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]).ToString() : "-";
                                        Working = true;

                                        //-------------------- Get OT Working Summary Each Position ---------------------
                                        #region
                                        if (_rowMP["Position"].ToString() == "OP" || _rowMP["Position"].ToString() == "OP.S")
                                        {
                                            accuOP1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                            accuOP15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                            accuOP2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                            accuOP3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                            CountMPOP += 1;

                                        }
                                        else if (_rowMP["Position"].ToString() == "LE" || _rowMP["Position"].ToString() == "LE.S")
                                        {
                                            accuLE1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                            accuLE15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                            accuLE2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                            accuLE3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                            CountMPLE += 1;
                                        }
                                        else if (_rowMP["Position"].ToString() == "FO" || _rowMP["Position"].ToString() == "FO.S")
                                        {
                                            accuFO1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                            accuFO15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                            accuFO2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                            accuFO3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                            CountMPFO += 1;
                                        }
                                        else if (_rowMP["Position"].ToString() == "SU" || _rowMP["Position"].ToString() == "SU.S")
                                        {
                                            accuSU1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                            accuSU15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                            accuSU2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                            accuSU3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                            CountMPSU += 1;
                                        }
                                        #endregion
                                        //-------------------- Get OT Working Summary Each Position ---------------------
                                    }


                                }

                            }


                        }


                    }



                    SqlCommand UpdateMNOT = new SqlCommand();

                    UpdateMNOT.CommandText = "Update  BC_MANOT set OPOT1 ='" + accuOP1 + "',OPOT15 ='" + accuOP15 + "' , " +
                                        "OPOT2 ='" + accuOP2 + "',OPOT3 ='" + accuOP3 + "',LEOT1='" + accuLE1 + "' , " +
                                        "LEOT15 ='" + accuLE15 + "',LEOT2='" + accuLE2 + "',LEOT3='" + accuLE3 + "' ," +
                                        "FOOT1='" + accuFO1 + "',FOOT15='" + accuFO15 + "' ,FOOT2='" + accuFO2 + "'," +
                                        "FOOT3='" + accuFO3 + "', " +
                                        " SUOT1='" + accuSU1 + "' ,SUOT15='" + accuSU15 + "' ,SUOT2='" + accuSU2 + "' ,SUOT3='" + accuSU3 + "'" +
                                        "where  Fiscal_year ='" + setDate.ToString("yyyy") + "' and Monthly ='" + ii + "' and ProductType ='" + _Type + "'";

                    oConn.SqlExecute(UpdateMNOT, "DBBCS");
                }
            }
            else
            {

                //if (_Type == "ALL" || _Type == "FAC1" || _Type == "FAC2" || _Type == "FAC3" || _Type == "ODM")
                //{

                if (dtEmp.Rows.Count > 0)
                {

                    foreach (DataRow _rowMP in dtEmp.Rows)
                    {


                        int idxMP = 0;
                        //--------------- Get Employee working Time ---------------------
                        DataTable dtempWorkingTime = new DataTable();
                        dtempWorkingTime = oMP.GetEmployeeWorkTimeOfMonthNew(_rowMP["Code"].ToString(), _rowMP["WTYPE"].ToString(), setDate.Month);
                        //--------------- Get Employee working Time ---------------------

                        for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                        {
                            setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);
                            //----------------- Fillter Working Time -------------
                            bool Working = false;
                            string OT1 = "-", OT15 = "-", OT2 = "-", OT3 = "-";
                            if (dtempWorkingTime.Rows.Count > 0)
                            {
                                DataRow[] fillWork = dtempWorkingTime.Select("WorkDate = '" + setDate.ToString("yyyy-MM-dd") + "'");
                                if (fillWork.Length > 0)
                                {
                                    OT1 = Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]).ToString() : "-";
                                    OT15 = Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]).ToString() : "-";
                                    OT2 = Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]).ToString() : "-";
                                    OT3 = Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]).ToString() : "-";
                                    Working = true;

                                    //-------------------- Get OT Working Summary Each Position ---------------------
                                    #region
                                    if (_rowMP["Position"].ToString() == "OP" || _rowMP["Position"].ToString() == "OP.S")
                                    {
                                        accuOP1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                        accuOP15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                        accuOP2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                        accuOP3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                        CountMPOP += 1;

                                    }
                                    else if (_rowMP["Position"].ToString() == "LE" || _rowMP["Position"].ToString() == "LE.S")
                                    {
                                        accuLE1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                        accuLE15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                        accuLE2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                        accuLE3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                        CountMPLE += 1;
                                    }
                                    else if (_rowMP["Position"].ToString() == "FO" || _rowMP["Position"].ToString() == "FO.S")
                                    {
                                        accuFO1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                        accuFO15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                        accuFO2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                        accuFO3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                        CountMPFO += 1;
                                    }
                                    else if (_rowMP["Position"].ToString() == "SU" || _rowMP["Position"].ToString() == "SU.S")
                                    {
                                        accuSU1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                        accuSU15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                        accuSU2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                        accuSU3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                        CountMPSU += 1;
                                    }
                                    #endregion
                                    //-------------------- Get OT Working Summary Each Position ---------------------
                                }


                            }

                        }


                    }


                    //}


                    SqlCommand InsertMNOT = new SqlCommand();

                    InsertMNOT.CommandText = "Insert into BC_MANOT(Fiscal_year,ProductType,Monthly,OPOT1,OPOT15," +
                                        " OPOT2,OPOT3,LEOT1,LEOT15,LEOT2,LEOT3,FOOT1,FOOT15,FOOT2,FOOT3," +
                                        " SUOT1,SUOT15,SUOT2,SUOT3) " +
                                        "  values ('" + setDate.ToString("yyyy") + "','" + _Type + "' ,'" + ii + "','" + accuOP1 + "'" +
                                        ",'" + accuOP15 + "','" + accuOP2 + "','" + accuOP3 + "'" +
                                        ",'" + accuLE1 + "','" + accuLE15 + "','" + accuLE2 + "','" + accuLE3 + "'" +
                                        ",'" + accuFO1 + "','" + accuFO15 + "','" + accuFO2 + "','" + accuFO3 + "'" +
                                        ",'" + accuSU1 + "','" + accuSU15 + "','" + accuSU2 + "','" + accuSU3 + "')";
                    oConn.SqlExecute(InsertMNOT, "DBBCS");

                }
            }



            //  #region

            if (dtMNOT.Rows.Count > 0)
            {
                foreach (DataRow _rowMN in dtMNOT.Rows)
                {
                    if (_Type == _rowMN["ProductType"].ToString())
                    {

                        // Operator OT1,15,2,3
                        totalOPOT1 = Convert.ToDouble(_rowMN["OPOT1"]) / 60;
                        totalOPOT15 = Convert.ToDouble(_rowMN["OPOT15"]) / 60;
                        totalOPOT2 = Convert.ToDouble(_rowMN["OPOT2"]) / 60;
                        totalOPOT3 = Convert.ToDouble(_rowMN["OPOT3"]) / 60;



                        oItemMPP.OPOT1 = totalOPOT1;
                        oItemMPP.OPOT15 = totalOPOT15;
                        oItemMPP.OPOT2 = totalOPOT2;
                        oItemMPP.OPOT3 = totalOPOT3;

                        // Cost OT of Operator Ot1,15,2,3
                        totalOP += (totalOPOT1 * MPLE);
                        totalOP += (totalOPOT15 * (MPLE * 1.5));
                        totalOP += (totalOPOT2 * (MPLE * 2));
                        totalOP += (totalOPOT3 * (MPLE * 3));
                        TotalOT1 = totalOP;
                        //totalLE = totalLEOT1;



                        // Leader OT1,15,2,3
                        totalLEOT1 = Convert.ToDouble(_rowMN["LEOT1"]) / 60;
                        totalLEOT15 = Convert.ToDouble(_rowMN["LEOT15"]) / 60;
                        totalLEOT2 = Convert.ToDouble(_rowMN["LEOT2"]) / 60;
                        totalLEOT3 = Convert.ToDouble(_rowMN["LEOT3"]) / 60;

                        oItemMPP.LEOT1 = totalLEOT1;
                        oItemMPP.LEOT15 = totalLEOT15;
                        oItemMPP.LEOT2 = totalLEOT2;
                        oItemMPP.LEOT3 = totalLEOT3;
                        // Cost OT of Leader Ot1,15,2,3
                        totalLE += (totalLEOT1 * MPLE);
                        totalLE += (totalLEOT15 * (MPLE * 1.5));
                        totalLE += (totalLEOT2 * (MPLE * 2));
                        totalLE += (totalLEOT3 * (MPLE * 3));
                        TotalOT15 = totalLE;
                        //totalLE = totalLEOT1;



                        //** Foreman OT1,15,2,3
                        totalFOOT1 = Convert.ToDouble(_rowMN["FOOT1"]) / 60;
                        totalFOOT15 = Convert.ToDouble(_rowMN["FOOT15"]) / 60;
                        totalFOOT2 = Convert.ToDouble(_rowMN["FOOT2"]) / 60;
                        totalFOOT3 = Convert.ToDouble(_rowMN["FOOT3"]) / 60;

                        oItemMPP.FOOT1 = totalFOOT1;
                        oItemMPP.FOOT15 = totalFOOT15;
                        oItemMPP.FOOT2 = totalFOOT2;
                        oItemMPP.FOOT3 = totalFOOT3;
                        // ** Cost OT of Foreman Ot1,15,2,3
                        totalFO += (totalFOOT1 * MPFO);
                        totalFO += (totalFOOT15 * (MPFO * 1.5));
                        totalFO += (totalFOOT2 * (MPFO * 2));
                        totalFO += (totalFOOT3 * (MPFO * 3));
                        TotalOT2 = totalFO;
                        //totalFO = totalFOOT1;


                        totalSUOT1 = Convert.ToDouble(_rowMN["SUOT1"]) / 60;
                        totalSUOT15 = Convert.ToDouble(_rowMN["SUOT15"]) / 60;
                        totalSUOT2 = Convert.ToDouble(_rowMN["SUOT2"]) / 60;
                        totalSUOT3 = Convert.ToDouble(_rowMN["SUOT3"]) / 60;

                        totalSU += (totalSUOT1 * MPSU);
                        totalSU += (totalSUOT15 * (MPSU * 1.5));
                        totalSU += (totalSUOT2 * (MPSU * 2));
                        totalSU += (totalSUOT3 * (MPSU * 3));
                        TotalOT3 = totalSU;
                        //totalSU = totalSUOT1;


                        oItemMPP.SUPosition = "SU";

                        oItemMPP.SUOT1 = totalSUOT1;
                        oItemMPP.SUOT15 = totalSUOT15;
                        oItemMPP.SUOT2 = totalSUOT2;
                        oItemMPP.SUOT3 = totalSUOT3;






                    }
                }
            }


            //Calculate Cost/Unit and Accum Cost/Unit

            double CostUnitch = 0, AccumCostUnitch = 0;


            CostOverall = totalOP + totalLE + totalFO + totalSU;

            CostOverAllSum += CostOverall;


            if ((Prd != 0) && (SumPrd != 0))
            {
                string CostUnit, AccumCostUnit;
                if (CostOverall != CostOverAllSum)
                {
                    if (_Type == "ODM")
                    {
                        CostUnit = String.Format("{0:F2}", ((CostOverall / Prd) * 20));
                        AccumCostUnit = String.Format("{0:F2}", ((CostOverAllSum / SumPrd) * 20));
                    }
                    else
                    {
                        CostUnit = String.Format("{0:F2}", (CostOverall / Prd));
                        AccumCostUnit = String.Format("{0:F2}", (CostOverAllSum / SumPrd));
                    }
                }
                else
                {
                    if (_Type == "ODM")
                    {
                        CostUnit = String.Format("{0:F2}", ((CostOverall / Prd) * 20));
                        AccumCostUnit = String.Format("{0:F2}", ((CostOverAllSum / Prd) * 20));
                    }
                    else
                    {
                        CostUnit = String.Format("{0:F2}", (CostOverall / Prd));
                        AccumCostUnit = String.Format("{0:F2}", (CostOverAllSum / Prd));
                    }
                }

                if (_Type == "ODM")
                {
                    CostUnitch = Convert.ToDouble(CostUnit.ToString());
                    AccumCostUnitch = Convert.ToDouble(AccumCostUnit.ToString());

                }
                else
                {
                    CostUnitch = Convert.ToDouble(CostUnit.ToString());
                    AccumCostUnitch = Convert.ToDouble(AccumCostUnit.ToString());
                }

            }

            //    //CostUnit = Convert.ToInt32(CostOverall / Prd);
            //    //AccumCostUnit = Convert.ToInt32(CostOverAllSum / SumPrd);

            //}

            int ix = 0;
            //foreach (string __Month in ArryPeriod)
            //{
            // add data 
            MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();



            if ((__Month == 4) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;

                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 5) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 6) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 7) && (Prd != 0) && (SumPrd != 0))
            {

                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if ((__Month == 8) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if ((__Month == 9) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if ((__Month == 10) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 11) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if ((__Month == 12) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 1) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 2) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if ((__Month == 3) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }

            if (AccumCostUnitch != 0)
            {
                mManPower.dataCostCenter = ArryPeriod1[__Month - 1];
                mManPower.dataYearMonth = ArryPeriod1[__Month - 1];
                oListMP.Add(mManPower);
            }
            //oListMP.Add(mManPower);

            //  Prd = 0;
            //   SumPrd = 0;
            PrdMonth = 0;
            SumPrdMonth = 0;
            //   SumPrdOverAll = 0;
            CostOverall = 0;
            totalOP = 0;
            totalLE = 0;
            totalFO = 0;
            totalSU = 0;

            totalOP = 0;
            totalLE = 0;
            totalFO = 0;
            totalSU = 0;

            accuOP1 = 0;
            accuOP15 = 0;
            accuOP2 = 0;
            accuOP3 = 0;

            accuLE1 = 0;
            accuLE15 = 0;
            accuLE2 = 0;
            accuLE3 = 0;

            accuFO1 = 0;
            accuFO15 = 0;
            accuFO2 = 0;
            accuFO3 = 0;

            accuSU1 = 0;
            accuSU15 = 0;
            accuSU2 = 0;
            accuSU3 = 0;

            totalOPOT1 = 0;
            totalOPOT15 = 0;
            totalOPOT2 = 0;
            totalOPOT3 = 0;
            totalOP = 0;

            totalLEOT1 = 0;
            totalLEOT15 = 0;
            totalLEOT2 = 0;
            totalLEOT3 = 0;
            totalLE = 0;

            totalFOOT1 = 0;
            totalFOOT15 = 0;
            totalFOOT2 = 0;
            totalFOOT3 = 0;
            totalFO = 0;

            totalSUOT1 = 0;
            totalSUOT15 = 0;
            totalSUOT2 = 0;
            totalSUOT3 = 0;
            totalSU = 0;

        }
        return oListMP;
    }
    public List<MMPInfo.MPAllChartInfo> GetChartMANPOWER(int _Month, DateTime _DataDate, string _Type)
    {

        List<MMPInfo.MPAllChartInfo> oListMP = new List<MMPInfo.MPAllChartInfo>();


        string[] ArryPrd = { "1YC", "2YC", "SCR", "1YC/3", "ODM" };
        //string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702", "4310", "4320", "4510", "4720", "8120" };
        string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702" };
        string[] ArryPrdFac1 = { "1101", "1102" };
        string[] ArryPrdFac1M = { "1101" };
        string[] ArryPrdFac1A = { "1102" };
        string[] ArryPrdFac2 = { "1201", "1202", "1301", "1302", "1401", "1402" };
        string[] ArryPrdFac2M = { "1201" };
        string[] ArryPrdFac2A = { "1202" };
        string[] ArryPrdFac2Mo = { "1401" };
        string[] ArryPrdFac2MoA = { "1402" };
        string[] ArryPrdSCA = { "1301", "1302" };
        string[] ArryPrdSCRM = { "1301" };
        string[] ArryPrdSCRA = { "1302" };
        string[] ArryPrdFac3 = { "1701", "1702" };
        string[] ArryPrdFac3M = { "1701" };
        string[] ArryPrdMachine = { "305","306", "307", "308", "304", "310", "302", "301", "303" };
        string[] ArryPrdFac3CY = { "305" }; 
        string[] ArryPrdFac3CS = { "306" };
        string[] ArryPrdFac3A = { "1702" };
        string[] ArryPrdODM = { "1501" };

        string[] ArryPeriod = { "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod1 = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod2 = { "PRD_JAN", "PRD_FEB", "PRD_MAR", "PRD_APR", "PRD_MAY", "PRD_JUN", "PRD_JUL", "PRD_AUG", "PRD_SEP", "PRD_OCT", "PRD_NOV", "PRD_DEC" };
        int[] ArryMonth = { 4, 5, 6, 7, 8, 9, 10, 11, 12 };
        int[] ArryMonth1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };


        string pAccGroup = "EXP";
        string pBudgetType = "DI";
        string pYear = _DataDate.ToString("yyyy");
        string pMonth = _DataDate.ToString("MM");
        DateTime _LastYear = new DateTime();
        DateTime _Last2Year = new DateTime();
        DateTime _Last3Year = new DateTime();
        _LastYear = _DataDate.AddYears(-1);
        _Last2Year = _DataDate.AddYears(-2);
        _Last3Year = _DataDate.AddYears(-3);
        string pLastYear = _LastYear.ToString("yyyy");
        string pLast2Year = _Last2Year.ToString("yyyy");
        string pLast3Year = _Last3Year.ToString("yyyy");
        string TxtModel = " ";

        #region init



        int[] _PrdActual = new int[12];

        string[] ArrySeires5 = new string[5];
        Decimal[] ArrySeiresValue5 = new Decimal[5];



        #endregion

        string[] ArryLoop = new string[0];
        string ProductType = "";
        string TargetType = "";
        if (_Type == "ALL")
        {
            ArryLoop = ArryPrdALL;
            TargetType = "DCI";
        }
        else if (_Type == "MPFAC1")
        {
            ArryLoop = ArryPrdFac1;
            ProductType = "1YC";
            TargetType = "1YC";
            TxtModel = "1YC%";

        }
        else if (_Type == "MPFAC1M")
        {
            ArryLoop = ArryPrdFac1M;
            ProductType = "1YC";
            TargetType = "1YC";
        }
        else if (_Type == "MPFAC1A")
        {
            ArryLoop = ArryPrdFac1A;
            ProductType = "1YC";
            TargetType = "1YC";
        }
        else if (_Type == "MPFAC2")
        {
            ArryLoop = ArryPrdFac2;
            ProductType = "2YC";
            TargetType = "2YC";
            TxtModel = "2YC%";
        }
        else if (_Type == "MPFAC2M")
        {
            ArryLoop = ArryPrdFac2M;
            ProductType = "2YC";
            TargetType = "2YC";
        }
        else if (_Type == "MPFAC2A")
        {
            ArryLoop = ArryPrdFac2A;
            ProductType = "2YC";
            TargetType = "2YC";
        }
        else if (_Type == "MPFAC2MOM")
        {
            ArryLoop = ArryPrdFac2M;
            ProductType = "2YC";
            TargetType = "2YC";
        }
        else if (_Type == "MPFAC2MOA")
        {
            ArryLoop = ArryPrdFac2A;
            ProductType = "2YC";
            TargetType = "2YC";
        }
        else if (_Type == "MPFAC3")
        {
            ArryLoop = ArryPrdFac3;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            TxtModel = "1YC%";
        }
        else if (_Type == "MPFAC3M")
        {
            ArryLoop = ArryPrdFac3M;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
        }
        else if (_Type == "MPFAC3CY")
        {
            ArryLoop = ArryPrdMachine;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
        }
        else if (_Type == "MPFAC3CS")
        {
            ArryLoop = ArryPrdMachine;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
        }
        else if (_Type == "MPFAC3A")
        {
            ArryLoop = ArryPrdFac3A;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
        }
        else if (_Type == "MPODM")
        {
            ArryLoop = ArryPrdODM;
            ProductType = "ODM";
            TargetType = "ODM";
        }
        else if (_Type == "MPSCR")
        {
            ArryLoop = ArryPrdSCA;
            ProductType = "SCR";
            TargetType = "SCR";
        }
        else if (_Type == "MPSCRM")
        {
            ArryLoop = ArryPrdSCRM;
            ProductType = "SCR";
            TargetType = "SCR";
        }
        else if (_Type == "MPSCRA")
        {
            ArryLoop = ArryPrdSCRA;
            ProductType = "SCR";
            TargetType = "SCR";
        }



        DateTime strDate = new DateTime(DateTime.Now.Year, _Month, 1, 0, 0, 0);
        DateTime endDate = strDate.AddMonths(1).Date + new TimeSpan(0, 0, 0);

        DateTime strHr = DateTime.Today + new TimeSpan(08, 00, 00);
        DateTime dateEnd = DateTime.Today + new TimeSpan(20, 00, 00);
        DateTime Endtoday = DateTime.Now;


        int MonthSelect = _Month;
        int PrevMonth = _Month - 1;
        int NextMonth = _Month + 1;



        //DataTable dtWorkingHour = new DataTable();
        //dtWorkingHour.Columns.Add("Position", typeof(string));
        //dtWorkingHour.Columns.Add("OT1", typeof(string));
        //dtWorkingHour.Columns.Add("OT15", typeof(string));
        //dtWorkingHour.Columns.Add("OT2", typeof(string));
        //dtWorkingHour.Columns.Add("OT3", typeof(string));
        //string[] arrPotition = { "OP", "LE", "FO", "SU" };
        //foreach (string item in arrPotition)
        //{
        //    dtWorkingHour.Rows.Add(item, "", "", "", "");
        //}


        //------------- Create column header OT  -----------------


        DataTable dtBCPD = new DataTable();
        dtBCPD.Columns.Add("Fiscal_year", typeof(string));
        dtBCPD.Columns.Add("ProductType", typeof(string));
        dtBCPD.Columns.Add("PRD_JAN", typeof(string));
        dtBCPD.Columns.Add("PRD_FEB", typeof(string));
        dtBCPD.Columns.Add("PRD_MAR", typeof(string));
        dtBCPD.Columns.Add("PRD_APR", typeof(string));
        dtBCPD.Columns.Add("PRD_MAY", typeof(string));
        dtBCPD.Columns.Add("PRD_JUN", typeof(string));
        dtBCPD.Columns.Add("PRD_JUL", typeof(string));
        dtBCPD.Columns.Add("PRD_AUG", typeof(string));
        dtBCPD.Columns.Add("PRD_SEP", typeof(string));
        dtBCPD.Columns.Add("PRD_OCT", typeof(string));
        dtBCPD.Columns.Add("PRD_NOV", typeof(string));
        dtBCPD.Columns.Add("PRD_DEC", typeof(string));
        DateTime setDate1 = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sqlBCPD = new SqlCommand();
        sqlBCPD.CommandText = "SELECT Fiscal_year " +
            " ,ProductType,PRD_APR,PRD_MAY,PRD_JUN,PRD_JUL,PRD_AUG " +
            " ,PRD_SEP,PRD_OCT,PRD_NOV,PRD_DEC,PRD_JAN,PRD_FEB,PRD_MAR,Total_PRD " +
           " from BC_PRODUCTION " +
           " where [Fiscal_year] = " + setDate1.Year;


        // int LBCSPD = 0;
        double Prd = 0, Prd1 = 0, Prd2 = 0, Prd3 = 0, Prd4 = 0, Prd5 = 0, Prd6 = 0, Prd7 = 0;
        double Prd8 = 0, Prd9 = 0, Prd10 = 0, Prd11 = 0, Prd12 = 0, SumPrd = 0, SumPrdOverAll = 0, PrdMonth = 0, SumPrdMonth = 0;
        DataTable dt1 = oConn.SqlGet(sqlBCPD, "DBBCS");
        foreach (DataRow item in dt1.Rows)
        {
            DataRow _rowBCSPD = dtBCPD.NewRow();
            _rowBCSPD["Fiscal_year"] = item["Fiscal_year"].ToString();
            _rowBCSPD["ProductType"] = item["ProductType"].ToString();
            _rowBCSPD["PRD_JAN"] = item["PRD_JAN"];
            _rowBCSPD["PRD_FEB"] = item["PRD_FEB"];
            _rowBCSPD["PRD_MAR"] = item["PRD_MAR"];
            _rowBCSPD["PRD_APR"] = item["PRD_APR"];
            _rowBCSPD["PRD_MAY"] = item["PRD_MAY"];
            _rowBCSPD["PRD_JUN"] = item["PRD_JUN"];
            _rowBCSPD["PRD_JUL"] = item["PRD_JUL"];
            _rowBCSPD["PRD_AUG"] = item["PRD_AUG"];
            _rowBCSPD["PRD_SEP"] = item["PRD_SEP"];
            _rowBCSPD["PRD_OCT"] = item["PRD_OCT"];
            _rowBCSPD["PRD_NOV"] = item["PRD_NOV"];
            _rowBCSPD["PRD_DEC"] = item["PRD_DEC"];
            dtBCPD.Rows.Add(_rowBCSPD);
        }


        //---------------- Get Employeee of Line --------------
        DataTable dtEmp = new DataTable();
        dtEmp.Columns.Add("Code", typeof(string));
        dtEmp.Columns.Add("Position", typeof(string));
        dtEmp.Columns.Add("CostCenter", typeof(string));
        dtEmp.Columns.Add("WType", typeof(string));
        DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sql = new SqlCommand();

        if (_Type == "ALL")
        {

            txtCostCenter = " = " + ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1] +
              " or [COSTCENTER] = " + ArryLoop[2] + " or [COSTCENTER] = " + ArryLoop[3] +
               " or [COSTCENTER] = " + ArryLoop[4] + " or [COSTCENTER] = " + ArryLoop[5] +
               " or [COSTCENTER] = " + ArryLoop[6] + " or [COSTCENTER] = " + ArryLoop[7] +
            " or [COSTCENTER] = " + ArryLoop[8] + " or [COSTCENTER] = " + ArryLoop[9] +
            " or [COSTCENTER] = " + ArryLoop[10];



        }
        else if (_Type == "MPFAC3")
        {
            txtCostCenter = " = " + ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1];

        }
        else if (_Type == "MPFAC3M")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "MPFAC3A")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "MPFAC2")
        {
            txtCostCenter = " = " + ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1] +
                         " or [COSTCENTER] = " + ArryLoop[2] + " or [COSTCENTER] = " + ArryLoop[3] +
                          " or [COSTCENTER] = " + ArryLoop[4] + " or [COSTCENTER] = " + ArryLoop[5];
        }
        else if (_Type == "MPFAC2M")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "MPFAC2A")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "MPFAC2MOM")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "MPFAC2MOA")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "MPSCRA")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "MPSCRM")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }


        else if (_Type == "MPFAC1")
        {
            txtCostCenter = " = " + ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1];
        }
        else if (_Type == "MPFAC1M")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "MPFAC1A")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "MPODM")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }

        sql.CommandText = "SELECT e.CODE, POSIT,COSTCENTER,WTYPE FROM [Employee] e " +
        " where [COSTCENTER] " + txtCostCenter + " ORDER BY COSTCENTER,e.POSIT";


        int ii = 0;
        DataTable dt = oConn.SqlGet(sql, "DBDCI");
        foreach (DataRow item in dt.Rows)
        {
            DataRow _rowEmp = dtEmp.NewRow();
            _rowEmp["Code"] = item["CODE"].ToString();
            _rowEmp["Position"] = item["POSIT"].ToString();
            _rowEmp["CostCenter"] = item["COSTCENTER"].ToString();
            _rowEmp["WType"] = item["WTYPE"].ToString();
            dtEmp.Rows.Add(_rowEmp);
        }
        //  lbMP.Text = dtEmp.Rows.Count.ToString();
        //---------------- Get Employeee of Line --------------        

        //----------------- Create row content Manpower ------------------

        MMPInfo.MPAllChartInfo oItemMPP = new MMPInfo.MPAllChartInfo();

        int accuOP1 = 0, accuOP15 = 0, accuOP2 = 0, accuOP3 = 0, CountMPOP = 1, CountMPD = 1, CountMPN = 1, CountMPH = 1, SumMP = 1;
        int accuLE1 = 0, accuLE15 = 0, accuLE2 = 0, accuLE3 = 0, CountMPLE = 1;
        int accuFO1 = 0, accuFO15 = 0, accuFO2 = 0, accuFO3 = 0, CountMPFO = 1;
        int accuSU1 = 0, accuSU15 = 0, accuSU2 = 0, accuSU3 = 0, CountMPSU = 1;
        double CostOverAllSum = 0;
        // double CostOverAll = 0;




        for (ii = 1; ii <= MonthSelect; ii++)
        {
            Prd = 0;
            if (dtBCPD.Rows.Count > 0)
            {

                foreach (DataRow _rowbcpd in dtBCPD.Rows)
                {

                    if (_Type == "FAC2")
                    {
                        if (Convert.ToString(_rowbcpd["ProductType"].ToString()) == "2YC" || Convert.ToString(_rowbcpd["ProductType"].ToString()) == "SCR")
                        {
                            PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                            Prd += PrdMonth;
                            //    SumPrd += Prd;
                        }
                    }
                    else if (_Type == "ALL")
                    {
                        int k = 0;
                        for (k = 1; k <= ArryPrd.Count(); k++)
                        {


                            if (ArryPrd[k - 1] == Convert.ToString(_rowbcpd["ProductType"].ToString()))
                            {
                                if (ArryPrd[k - 1] == "ODM")
                                {
                                    PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                                    PrdMonth = PrdMonth / 20;
                                }
                                else
                                {
                                    PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                                }
                                Prd += PrdMonth;


                            }
                            PrdMonth = 0;
                        }
                    }
                    else

                        if (ProductType == Convert.ToString(_rowbcpd["ProductType"].ToString()))
                        {
                            Prd = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                            // SumPrd += Prd;
                        }


                    // SumPrd += Prd;
                }
                SumPrd += Prd;

            }


            if (ii < MonthSelect)
            {
                setDate = new DateTime(DateTime.Now.Year, ii, 1);

            }
            else if (ii == MonthSelect)
            {
                setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);

            }
            else if (ii > MonthSelect)
            {

                setDate = new DateTime(DateTime.Now.Year, NextMonth, 1);

            }
            int __Month = setDate.Month;


            // Start Check Working Time OT in DB

            //---------------- Get Employeee of Line --------------
            DataTable dtMNOT = new DataTable();
            dtMNOT.Columns.Add("Fiscal_year", typeof(string));
            dtMNOT.Columns.Add("Monthly", typeof(string));
            dtMNOT.Columns.Add("ProductType", typeof(string));
            dtMNOT.Columns.Add("SumMPD", typeof(string));
            dtMNOT.Columns.Add("SumMPN", typeof(string));
            dtMNOT.Columns.Add("SumMPH", typeof(string));
            dtMNOT.Columns.Add("SumMP", typeof(string));
            dtMNOT.Columns.Add("OPOT1", typeof(string));
            dtMNOT.Columns.Add("OPOT15", typeof(string));
            dtMNOT.Columns.Add("OPOT2", typeof(string));
            dtMNOT.Columns.Add("OPOT3", typeof(string));
            dtMNOT.Columns.Add("LEOT1", typeof(string));
            dtMNOT.Columns.Add("LEOT15", typeof(string));
            dtMNOT.Columns.Add("LEOT2", typeof(string));
            dtMNOT.Columns.Add("LEOT3", typeof(string));
            dtMNOT.Columns.Add("FOOT1", typeof(string));
            dtMNOT.Columns.Add("FOOT15", typeof(string));
            dtMNOT.Columns.Add("FOOT2", typeof(string));
            dtMNOT.Columns.Add("FOOT3", typeof(string));
            dtMNOT.Columns.Add("SUOT1", typeof(string));
            dtMNOT.Columns.Add("SUOT15", typeof(string));
            dtMNOT.Columns.Add("SUOT2", typeof(string));
            dtMNOT.Columns.Add("SUOT3", typeof(string));




            // DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


            SqlCommand sqlMNOT = new SqlCommand();


            sqlMNOT.CommandText = "SELECT Fiscal_year,ProductType,Monthly,SumMPD,SumMPN,SumMPH,SumMP,OPOT1,OPOT15,OPOT2,OPOT3, " +
                    "LEOT1,LEOT15,LEOT2,LEOT3,FOOT1,FOOT15,FOOT2,FOOT3,SUOT1,SUOT15,SUOT2,SUOT3 FROM [BC_MANOT] " +
                     " where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' and ProductType ='" + _Type + "'";



            DataTable dtMOT = oConn.SqlGet(sqlMNOT, "DBBCS");

            if (dtMOT.Rows.Count > 0)
            {
                foreach (DataRow item in dtMOT.Rows)
                {
                    DataRow _rowMNOT = dtMNOT.NewRow();
                    _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                    _rowMNOT["Monthly"] = item["Monthly"].ToString();
                    _rowMNOT["ProductType"] = item["ProductType"].ToString();
                    _rowMNOT["SumMPD"] = item["SumMPD"].ToString();
                    _rowMNOT["SumMPN"] = item["SumMPN"].ToString();
                    _rowMNOT["SumMPH"] = item["SumMPH"].ToString();
                    _rowMNOT["SumMP"] = item["SumMP"].ToString();
                    _rowMNOT["OPOT1"] = item["OPOT1"].ToString();
                    _rowMNOT["OPOT15"] = item["OPOT15"].ToString();
                    _rowMNOT["OPOT2"] = item["OPOT2"].ToString();
                    _rowMNOT["OPOT3"] = item["OPOT3"].ToString();
                    _rowMNOT["LEOT1"] = item["LEOT1"].ToString();
                    _rowMNOT["LEOT15"] = item["LEOT15"].ToString();
                    _rowMNOT["LEOT2"] = item["LEOT2"].ToString();
                    _rowMNOT["LEOT3"] = item["LEOT3"].ToString();
                    _rowMNOT["FOOT1"] = item["FOOT1"].ToString();
                    _rowMNOT["FOOT15"] = item["FOOT15"].ToString();
                    _rowMNOT["FOOT2"] = item["FOOT2"].ToString();
                    _rowMNOT["FOOT3"] = item["FOOT3"].ToString();
                    _rowMNOT["SUOT1"] = item["SUOT1"].ToString();
                    _rowMNOT["SUOT15"] = item["SUOT15"].ToString();
                    _rowMNOT["SUOT2"] = item["SUOT2"].ToString();
                    _rowMNOT["SUOT3"] = item["SUOT3"].ToString();

                    dtMNOT.Rows.Add(_rowMNOT);
                }

            }





            //   string InsertDD;

            double MPOP = 4, MPLE = 50, MPFO = 90, MPSU = 100;
            double totalOP = 0, totalOPOT1 = 0, totalOPOT15 = 0, totalOPOT2 = 0, totalOPOT3 = 0;
            double totalLE = 0, totalLEOT1 = 0, totalLEOT15 = 0, totalLEOT2 = 0, totalLEOT3 = 0;
            double totalFO = 0, totalFOOT1 = 0, totalFOOT15 = 0, totalFOOT2 = 0, totalFOOT3 = 0;
            double totalSU = 0, totalSUOT1 = 0, totalSUOT15 = 0, totalSUOT2 = 0, totalSUOT3 = 0;
            double TotalOT1 = 0, TotalOT15 = 0, TotalOT2 = 0, TotalOT3 = 0, TotalSum = 0;
            double TotalMPD = 0, TotalMPN = 0, TotalMPH = 0;
            double CostOverall = 0;
            int SumTimeOP = 0, SumTimeLE = 0, SumTimeFO = 0, SumTimeSU = 0;

            if (dtMNOT.Rows.Count > 0)
            {
                if ((ii == MonthSelect))
                //if ((_Type == "ALL" || _Type == "FAC1" || _Type == "FAC2" || _Type == "FAC3" || _Type == "ODM") && (ii == MonthSelect))
                {

                    if (dtEmp.Rows.Count > 0)
                    {

                        foreach (DataRow _rowMP in dtEmp.Rows)
                        {


                            int idxMP = 0;
                            //--------------- Get Employee working Time ---------------------
                            DataTable dtempWorkingTime = new DataTable();
                            dtempWorkingTime = oMP.GetEmployeeWorkTimeOfMonthNew(_rowMP["Code"].ToString(), _rowMP["WTYPE"].ToString(), setDate.Month);
                            //--------------- Get Employee working Time ---------------------

                            for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                            {
                                setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);
                                //----------------- Fillter Working Time -------------
                                bool Working = false;
                                string OT1 = "-", OT15 = "-", OT2 = "-", OT3 = "-", MPD = "-", MPN = "-", MPH = "-";
                                if (dtempWorkingTime.Rows.Count > 0)
                                {
                                    DataRow[] fillWork = dtempWorkingTime.Select("WorkDate = '" + setDate.ToString("yyyy-MM-dd") + "'");
                                    if (fillWork.Length > 0)
                                    {
                                        OT1 = Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]).ToString() : "-";
                                        OT15 = Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]).ToString() : "-";
                                        OT2 = Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]).ToString() : "-";
                                        OT3 = Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]).ToString() : "-";
                                        MPD = Convert.ToInt16(fillWork[0]["SUMMPD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPD"]).ToString() : "-";
                                        MPN = Convert.ToInt16(fillWork[0]["SUMMPN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPN"]).ToString() : "-";
                                        MPH = Convert.ToInt16(fillWork[0]["SUMMPH"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPH"]).ToString() : "-";
                                        Working = true;

                                        //-------------------- Get OT Working Summary Each Position ---------------------
                                        #region
                                        if (_rowMP["Position"].ToString() == "OP" || _rowMP["Position"].ToString() == "OP.S")
                                        {
                                            accuOP1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                            accuOP15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                            accuOP2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                            accuOP3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                            CountMPD += Convert.ToInt16(fillWork[0]["SUMMPD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPD"]) : 0;
                                            CountMPN += Convert.ToInt16(fillWork[0]["SUMMPN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPN"]) : 0;
                                            CountMPH += Convert.ToInt16(fillWork[0]["SUMMPH"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPH"]) : 0;
                                            CountMPOP += 1;

                                        }
                                        else if (_rowMP["Position"].ToString() == "LE" || _rowMP["Position"].ToString() == "LE.S")
                                        {
                                            accuLE1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                            accuLE15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                            accuLE2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                            accuLE3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                            CountMPD += Convert.ToInt16(fillWork[0]["SUMMPD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPD"]) : 0;
                                            CountMPN += Convert.ToInt16(fillWork[0]["SUMMPN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPN"]) : 0;
                                            CountMPH += Convert.ToInt16(fillWork[0]["SUMMPH"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPH"]) : 0;
                                            CountMPLE += 1;
                                        }
                                        else if (_rowMP["Position"].ToString() == "FO" || _rowMP["Position"].ToString() == "FO.S")
                                        {
                                            accuFO1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                            accuFO15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                            accuFO2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                            accuFO3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                            CountMPD += Convert.ToInt16(fillWork[0]["SUMMPD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPD"]) : 0;
                                            CountMPN += Convert.ToInt16(fillWork[0]["SUMMPN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPN"]) : 0;
                                            CountMPH += Convert.ToInt16(fillWork[0]["SUMMPH"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPH"]) : 0;
                                            CountMPFO += 1;
                                        }
                                        else if (_rowMP["Position"].ToString() == "SU" || _rowMP["Position"].ToString() == "SU.S")
                                        {
                                            accuSU1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                            accuSU15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                            accuSU2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                            accuSU3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                            CountMPD += Convert.ToInt16(fillWork[0]["SUMMPD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPD"]) : 0;
                                            CountMPN += Convert.ToInt16(fillWork[0]["SUMMPN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPN"]) : 0;
                                            CountMPH += Convert.ToInt16(fillWork[0]["SUMMPH"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPH"]) : 0;
                                            CountMPSU += 1;
                                        }
                                        #endregion
                                        //-------------------- Get OT Working Summary Each Position ---------------------
                                    }


                                }

                            }


                        }
                        SumMP = CountMPD + CountMPN + CountMPH;

                    }



                    SqlCommand UpdateMNOT = new SqlCommand();

                    UpdateMNOT.CommandText = "Update  BC_MANOT set SumMPD ='" + CountMPD + "', SumMPN ='" + CountMPN + "' ," +
                                        " SumMPH ='" + CountMPH + "', SumMP ='" + SumMP + "',   OPOT1 ='" + accuOP1 + "',OPOT15 ='" + accuOP15 + "' , " +
                                        "OPOT2 ='" + accuOP2 + "',OPOT3 ='" + accuOP3 + "',LEOT1='" + accuLE1 + "' , " +
                                        "LEOT15 ='" + accuLE15 + "',LEOT2='" + accuLE2 + "',LEOT3='" + accuLE3 + "' ," +
                                        "FOOT1='" + accuFO1 + "',FOOT15='" + accuFO15 + "' ,FOOT2='" + accuFO2 + "'," +
                                        "FOOT3='" + accuFO3 + "', " +
                                        " SUOT1='" + accuSU1 + "' ,SUOT15='" + accuSU15 + "' ,SUOT2='" + accuSU2 + "' ,SUOT3='" + accuSU3 + "'" +
                                        "where  Fiscal_year ='" + setDate.ToString("yyyy") + "' and Monthly ='" + ii + "' and ProductType ='" + _Type + "'";

                    oConn.SqlExecute(UpdateMNOT, "DBBCS");
                }
            }
            else
            {

                //if (_Type == "ALL" || _Type == "FAC1" || _Type == "FAC2" || _Type == "FAC3" || _Type == "ODM")
                //{

                if (dtEmp.Rows.Count > 0)
                {

                    foreach (DataRow _rowMP in dtEmp.Rows)
                    {


                        int idxMP = 0;
                        //--------------- Get Employee working Time ---------------------
                        DataTable dtempWorkingTime = new DataTable();
                        dtempWorkingTime = oMP.GetEmployeeWorkTimeOfMonthNew(_rowMP["Code"].ToString(), _rowMP["WTYPE"].ToString(), setDate.Month);
                        //--------------- Get Employee working Time ---------------------

                        for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                        {
                            setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);
                            //----------------- Fillter Working Time -------------
                            bool Working = false;
                            string OT1 = "-", OT15 = "-", OT2 = "-", OT3 = "-", MPD = "-", MPN = "-", MPH = "-";
                            if (dtempWorkingTime.Rows.Count > 0)
                            {
                                DataRow[] fillWork = dtempWorkingTime.Select("WorkDate = '" + setDate.ToString("yyyy-MM-dd") + "'");
                                if (fillWork.Length > 0)
                                {
                                    OT1 = Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]).ToString() : "-";
                                    OT15 = Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]).ToString() : "-";
                                    OT2 = Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]).ToString() : "-";
                                    OT3 = Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]).ToString() : "-";
                                    MPD = Convert.ToInt16(fillWork[0]["SUMMPD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPD"]).ToString() : "-";
                                    MPN = Convert.ToInt16(fillWork[0]["SUMMPN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPN"]).ToString() : "-";
                                    MPH = Convert.ToInt16(fillWork[0]["SUMMPH"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPH"]).ToString() : "-";

                                    Working = true;

                                    //-------------------- Get OT Working Summary Each Position ---------------------
                                    #region
                                    if (_rowMP["Position"].ToString() == "OP" || _rowMP["Position"].ToString() == "OP.S")
                                    {
                                        accuOP1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                        accuOP15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                        accuOP2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                        accuOP3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                        CountMPD += Convert.ToInt16(fillWork[0]["SUMMPD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPD"]) : 0;
                                        CountMPN += Convert.ToInt16(fillWork[0]["SUMMPN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPN"]) : 0;
                                        CountMPH += Convert.ToInt16(fillWork[0]["SUMMPH"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPH"]) : 0;
                                        CountMPOP += 1;

                                    }
                                    else if (_rowMP["Position"].ToString() == "LE" || _rowMP["Position"].ToString() == "LE.S")
                                    {
                                        accuLE1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                        accuLE15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                        accuLE2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                        accuLE3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                        CountMPD += Convert.ToInt16(fillWork[0]["SUMMPD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPD"]) : 0;
                                        CountMPN += Convert.ToInt16(fillWork[0]["SUMMPN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPN"]) : 0;
                                        CountMPH += Convert.ToInt16(fillWork[0]["SUMMPH"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPH"]) : 0;
                                        CountMPLE += 1;
                                    }
                                    else if (_rowMP["Position"].ToString() == "FO" || _rowMP["Position"].ToString() == "FO.S")
                                    {
                                        accuFO1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                        accuFO15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                        accuFO2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                        accuFO3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                        CountMPD += Convert.ToInt16(fillWork[0]["SUMMPD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPD"]) : 0;
                                        CountMPN += Convert.ToInt16(fillWork[0]["SUMMPN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPN"]) : 0;
                                        CountMPH += Convert.ToInt16(fillWork[0]["SUMMPH"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPH"]) : 0;
                                        CountMPFO += 1;
                                    }
                                    else if (_rowMP["Position"].ToString() == "SU" || _rowMP["Position"].ToString() == "SU.S")
                                    {
                                        accuSU1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                        accuSU15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                        accuSU2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                        accuSU3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                        CountMPD += Convert.ToInt16(fillWork[0]["SUMMPD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPD"]) : 0;
                                        CountMPN += Convert.ToInt16(fillWork[0]["SUMMPN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPN"]) : 0;
                                        CountMPH += Convert.ToInt16(fillWork[0]["SUMMPH"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPH"]) : 0;
                                        CountMPSU += 1;
                                    }
                                    #endregion
                                    //-------------------- Get OT Working Summary Each Position ---------------------
                                }


                            }

                        }

                        SumMP = CountMPD + CountMPN + CountMPH;
                    }


                    //}


                    SqlCommand InsertMNOT = new SqlCommand();

                    InsertMNOT.CommandText = "Insert into BC_MANOT(Fiscal_year,ProductType,Monthly,SumMPD,SumMPN,SumMPH,SumMP,OPOT1,OPOT15," +
                                        " OPOT2,OPOT3,LEOT1,LEOT15,LEOT2,LEOT3,FOOT1,FOOT15,FOOT2,FOOT3," +
                                        " SUOT1,SUOT15,SUOT2,SUOT3) " +
                                        "  values ('" + setDate.ToString("yyyy") + "','" + _Type + "' ,'" + ii + "','" + CountMPD + "'" +
                                        ",'" + CountMPN + "','" + CountMPH + "','" + SumMP + "'" +
                                         ",'" + accuOP1 + "','" + accuOP15 + "','" + accuOP2 + "','" + accuOP3 + "'" +
                                        ",'" + accuLE1 + "','" + accuLE15 + "','" + accuLE2 + "','" + accuLE3 + "'" +
                                        ",'" + accuFO1 + "','" + accuFO15 + "','" + accuFO2 + "','" + accuFO3 + "'" +
                                        ",'" + accuSU1 + "','" + accuSU15 + "','" + accuSU2 + "','" + accuSU3 + "')";
                    oConn.SqlExecute(InsertMNOT, "DBBCS");

                }
            }



            //  #region

            if (dtMNOT.Rows.Count > 0)
            {
                foreach (DataRow _rowMN in dtMNOT.Rows)
                {
                    if (_Type == _rowMN["ProductType"].ToString())
                    {

                        oItemMPP.SumMPD = Convert.ToDouble(_rowMN["SumMPD"]);
                        oItemMPP.SumMPN = Convert.ToDouble(_rowMN["SumMPN"]);
                        oItemMPP.SumMPH = Convert.ToDouble(_rowMN["SumMPH"]);
                        oItemMPP.SumMP = Convert.ToDouble(_rowMN["SumMPD"]) + Convert.ToDouble(_rowMN["SumMPN"]) + Convert.ToDouble(_rowMN["SumMPH"]);



                        // Operator OT1,15,2,3
                        totalOPOT1 = Convert.ToDouble(_rowMN["OPOT1"]) / 60;
                        totalOPOT15 = Convert.ToDouble(_rowMN["OPOT15"]) / 60;
                        totalOPOT2 = Convert.ToDouble(_rowMN["OPOT2"]) / 60;
                        totalOPOT3 = Convert.ToDouble(_rowMN["OPOT3"]) / 60;



                        oItemMPP.OPOT1 = totalOPOT1;
                        oItemMPP.OPOT15 = totalOPOT15;
                        oItemMPP.OPOT2 = totalOPOT2;
                        oItemMPP.OPOT3 = totalOPOT3;

                        // Cost OT of Operator Ot1,15,2,3
                        totalOP += (totalOPOT1 * MPLE);
                        totalOP += (totalOPOT15 * (MPLE * 1.5));
                        totalOP += (totalOPOT2 * (MPLE * 2));
                        totalOP += (totalOPOT3 * (MPLE * 3));
                        TotalOT1 = totalOP;
                        //totalLE = totalLEOT1;



                        //// Leader OT1,15,2,3
                        totalLEOT1 = Convert.ToDouble(_rowMN["LEOT1"]) / 60;
                        totalLEOT15 = Convert.ToDouble(_rowMN["LEOT15"]) / 60;
                        totalLEOT2 = Convert.ToDouble(_rowMN["LEOT2"]) / 60;
                        totalLEOT3 = Convert.ToDouble(_rowMN["LEOT3"]) / 60;

                        oItemMPP.LEOT1 = totalLEOT1;
                        oItemMPP.LEOT15 = totalLEOT15;
                        oItemMPP.LEOT2 = totalLEOT2;
                        oItemMPP.LEOT3 = totalLEOT3;
                        //// Cost OT of Leader Ot1,15,2,3
                        totalLE += (totalLEOT1 * MPLE);
                        totalLE += (totalLEOT15 * (MPLE * 1.5));
                        totalLE += (totalLEOT2 * (MPLE * 2));
                        totalLE += (totalLEOT3 * (MPLE * 3));
                        TotalOT15 = totalLE;
                        //totalLE = totalLEOT1;



                        ////** Foreman OT1,15,2,3
                        totalFOOT1 = Convert.ToDouble(_rowMN["FOOT1"]) / 60;
                        totalFOOT15 = Convert.ToDouble(_rowMN["FOOT15"]) / 60;
                        totalFOOT2 = Convert.ToDouble(_rowMN["FOOT2"]) / 60;
                        totalFOOT3 = Convert.ToDouble(_rowMN["FOOT3"]) / 60;

                        oItemMPP.FOOT1 = totalFOOT1;
                        oItemMPP.FOOT15 = totalFOOT15;
                        oItemMPP.FOOT2 = totalFOOT2;
                        oItemMPP.FOOT3 = totalFOOT3;
                        //// ** Cost OT of Foreman Ot1,15,2,3
                        totalFO += (totalFOOT1 * MPFO);
                        totalFO += (totalFOOT15 * (MPFO * 1.5));
                        totalFO += (totalFOOT2 * (MPFO * 2));
                        totalFO += (totalFOOT3 * (MPFO * 3));
                        TotalOT2 = totalFO;
                        totalFO = totalFOOT1;


                        totalSUOT1 = Convert.ToDouble(_rowMN["SUOT1"]) / 60;
                        totalSUOT15 = Convert.ToDouble(_rowMN["SUOT15"]) / 60;
                        totalSUOT2 = Convert.ToDouble(_rowMN["SUOT2"]) / 60;
                        totalSUOT3 = Convert.ToDouble(_rowMN["SUOT3"]) / 60;

                        totalSU += (totalSUOT1 * MPSU);
                        totalSU += (totalSUOT15 * (MPSU * 1.5));
                        totalSU += (totalSUOT2 * (MPSU * 2));
                        totalSU += (totalSUOT3 * (MPSU * 3));
                        TotalOT3 = totalSU;
                        totalSU = totalSUOT1;


                        oItemMPP.SUPosition = "SU";

                        oItemMPP.SUOT1 = totalSUOT1;
                        oItemMPP.SUOT15 = totalSUOT15;
                        oItemMPP.SUOT2 = totalSUOT2;
                        oItemMPP.SUOT3 = totalSUOT3;






                    }
                }
            }


            //Calculate Cost/Unit and Accum Cost/Unit

            double CostUnitch = 0, AccumCostUnitch = 0;


            CostOverall = totalOP + totalLE + totalFO + totalSU;

            CostOverAllSum += CostOverall;


            if ((Prd != 0) && (SumPrd != 0))
            {
                string CostUnit, AccumCostUnit;
                if (CostOverall != CostOverAllSum)
                {
                    if (_Type == "ODM")
                    {
                        CostUnit = String.Format("{0:F2}", ((CostOverall / Prd) * 20));
                        AccumCostUnit = String.Format("{0:F2}", ((CostOverAllSum / SumPrd) * 20));
                    }
                    else
                    {
                        CostUnit = String.Format("{0:F2}", (CostOverall / Prd));
                        AccumCostUnit = String.Format("{0:F2}", (CostOverAllSum / SumPrd));
                    }
                }
                else
                {
                    if (_Type == "ODM")
                    {
                        CostUnit = String.Format("{0:F2}", ((CostOverall / Prd) * 20));
                        AccumCostUnit = String.Format("{0:F2}", ((CostOverAllSum / Prd) * 20));
                    }
                    else
                    {
                        CostUnit = String.Format("{0:F2}", (CostOverall / Prd));
                        AccumCostUnit = String.Format("{0:F2}", (CostOverAllSum / Prd));
                    }
                }

                if (_Type == "ODM")
                {
                    CostUnitch = Convert.ToDouble(CostUnit.ToString());
                    AccumCostUnitch = Convert.ToDouble(AccumCostUnit.ToString());

                }
                else
                {
                    CostUnitch = Convert.ToDouble(CostUnit.ToString());
                    AccumCostUnitch = Convert.ToDouble(AccumCostUnit.ToString());
                }

            }

            //    //CostUnit = Convert.ToInt32(CostOverall / Prd);
            //    //AccumCostUnit = Convert.ToInt32(CostOverAllSum / SumPrd);

            //}

            int ix = 0;
            //foreach (string __Month in ArryPeriod)
            //{
            // add data 
            MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();



            if ((__Month == 4) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;

                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;

                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 5) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;
                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 6) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;
                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 7) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;
                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if ((__Month == 8) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;
                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if ((__Month == 9) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;
                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if ((__Month == 10) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;

                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 11) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;

                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if ((__Month == 12) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;

                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 1) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;

                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 2) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;


                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if ((__Month == 3) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;

                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;
            }

            if (AccumCostUnitch != 0)
            {
                mManPower.dataCostCenter = ArryPeriod1[__Month - 1];
                mManPower.dataYearMonth = ArryPeriod1[__Month - 1];
                oListMP.Add(mManPower);
            }
            //oListMP.Add(mManPower);

            //  Prd = 0;
            //   SumPrd = 0;
            PrdMonth = 0;
            SumPrdMonth = 0;
            //   SumPrdOverAll = 0;
            CostOverall = 0;
            totalOP = 0;
            totalLE = 0;
            totalFO = 0;
            totalSU = 0;

            totalOP = 0;
            totalLE = 0;
            totalFO = 0;
            totalSU = 0;

            accuOP1 = 0;
            accuOP15 = 0;
            accuOP2 = 0;
            accuOP3 = 0;

            accuLE1 = 0;
            accuLE15 = 0;
            accuLE2 = 0;
            accuLE3 = 0;

            accuFO1 = 0;
            accuFO15 = 0;
            accuFO2 = 0;
            accuFO3 = 0;

            accuSU1 = 0;
            accuSU15 = 0;
            accuSU2 = 0;
            accuSU3 = 0;

            totalOPOT1 = 0;
            totalOPOT15 = 0;
            totalOPOT2 = 0;
            totalOPOT3 = 0;
            totalOP = 0;

            totalLEOT1 = 0;
            totalLEOT15 = 0;
            totalLEOT2 = 0;
            totalLEOT3 = 0;
            totalLE = 0;

            totalFOOT1 = 0;
            totalFOOT15 = 0;
            totalFOOT2 = 0;
            totalFOOT3 = 0;
            totalFO = 0;

            totalSUOT1 = 0;
            totalSUOT15 = 0;
            totalSUOT2 = 0;
            totalSUOT3 = 0;
            totalSU = 0;

            CountMPD = 0;
            CountMPN = 0;
            CountMPH = 0;
            SumMP = 0;

        }
        return oListMP;
    }

    public List<MMPInfo.MPAllChartInfo> GetChartMANPOWERDayNight(int _Month, DateTime _DataDate, string _Type)
    {

        List<MMPInfo.MPAllChartInfo> oListMP = new List<MMPInfo.MPAllChartInfo>();

        //* Maintenance 
        string[] ArryMT = { "4310", "4320" };
        string[] ArryMTM = { "4310" };
        string[] ArryMTA = { "4320" };

        string[] ArryPrd = { "1YC", "2YC", "SCR", "1YC/3", "ODM" };
        //string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702", "4310", "4320", "4510", "4720", "8120" };
        string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702" };
        string[] ArryPrdFac1 = { "1101", "1102" };
        //string[] ArryPrdAndonFac1 = { "001", "049", "052", "054", "056", "057", "058", "062", "063", "065", "066", "069", "072", "074", "076", "077", "080", "083", "084", "089","090","093","095","098","103","106","107" };
        //string[] ArryPrdAndonFac2 = { "004", "005", "006", "007", "008", "009", "010", "011", "012", "013", "014", "015", "017", "018", "019", "020", "021", "022", "023", "026", "027", "028", "030", "031", "033", "034", "036", "037", "041", "043", "044", "045", "046", "051", "053", "059", "061", "068", "070", "071", "073" };
        string[] ArryPrdFac1M = { "1101" };
        string[] ArryPrdFac1A = { "1102" };
        string[] ArryPrdFac2 = { "1201", "1202", "1301", "1302", "1401", "1402" };
        string[] ArryPrdFac2M = { "1201" };
        string[] ArryPrdFac2A = { "1202" };
        string[] ArryPrdFac2Mo = { "1401" };
        string[] ArryPrdFac2MoA = { "1402" };
        string[] ArryPrdSCA = { "1301", "1302" };
        string[] ArryPrdSCRM = { "1301" };
        string[] ArryPrdSCRA = { "1302" };
        string[] ArryPrdFac3 = { "1701", "1702" };
        string[] ArryPrdFac3M = { "1701" };
        string[] ArryPrdFac3A = { "1702" };
        string[] ArryPrdODM = { "1501" };

        string[] ArryPeriod = { "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod1 = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod2 = { "PRD_JAN", "PRD_FEB", "PRD_MAR", "PRD_APR", "PRD_MAY", "PRD_JUN", "PRD_JUL", "PRD_AUG", "PRD_SEP", "PRD_OCT", "PRD_NOV", "PRD_DEC" };
        int[] ArryMonth = { 4, 5, 6, 7, 8, 9, 10, 11, 12 };
        int[] ArryMonth1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };


        string pAccGroup = "EXP";
        string pBudgetType = "DI";
        string pYear = _DataDate.ToString("yyyy");
        string pMonth = _DataDate.ToString("MM");
        DateTime _LastYear = new DateTime();
        DateTime _Last2Year = new DateTime();
        DateTime _Last3Year = new DateTime();
        _LastYear = _DataDate.AddYears(-1);
        _Last2Year = _DataDate.AddYears(-2);
        _Last3Year = _DataDate.AddYears(-3);
        string pLastYear = _LastYear.ToString("yyyy");
        string pLast2Year = _Last2Year.ToString("yyyy");
        string pLast3Year = _Last3Year.ToString("yyyy");
        string TxtModel = " ";

        #region init



        int[] _PrdActual = new int[12];

        string[] ArrySeires5 = new string[5];
        Decimal[] ArrySeiresValue5 = new Decimal[5];



        #endregion

        string[] ArryLoop = new string[0];
        string ProductType = "";
        string TargetType = "";
        if (_Type == "ALL")
        {
            ArryLoop = ArryPrdALL;
            TargetType = "DCI";
        }
        else if ((_Type == "MPFAC1") || (_Type == "OTFAC1"))
        {
            ArryLoop = ArryPrdFac1;
            ProductType = "1YC";
            TargetType = "1YC";
            TxtModel = "1YC%";

        }
        else if (_Type == "MPFAC1M")
        {
            ArryLoop = ArryPrdFac1M;
            ProductType = "1YC";
            TargetType = "1YC";
        }
        else if (_Type == "MPFAC1A")
        {
            ArryLoop = ArryPrdFac1A;
            ProductType = "1YC";
            TargetType = "1YC";
        }
        else if (_Type == "MPFAC2")
        {
            ArryLoop = ArryPrdFac2;
            ProductType = "2YC";
            TargetType = "2YC";
            TxtModel = "2YC%";
        }
        else if (_Type == "MPFAC2M")
        {
            ArryLoop = ArryPrdFac2M;
            ProductType = "2YC";
            TargetType = "2YC";
        }
        else if (_Type == "MPFAC2A")
        {
            ArryLoop = ArryPrdFac2A;
            ProductType = "2YC";
            TargetType = "2YC";
        }
        else if (_Type == "MPFAC2MOM")
        {
            ArryLoop = ArryPrdFac2M;
            ProductType = "2YC";
            TargetType = "2YC";
        }
        else if (_Type == "MPFAC2MOA")
        {
            ArryLoop = ArryPrdFac2A;
            ProductType = "2YC";
            TargetType = "2YC";
        }
        else if (_Type == "MPFAC3")
        {
            ArryLoop = ArryPrdFac3;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            TxtModel = "1YC%";
        }
        else if (_Type == "MPFAC3M")
        {
            ArryLoop = ArryPrdFac3M;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
        }
        else if (_Type == "MPFAC3A")
        {
            ArryLoop = ArryPrdFac3A;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
        }
        else if (_Type == "MPODM")
        {
            ArryLoop = ArryPrdODM;
            ProductType = "ODM";
            TargetType = "ODM";
        }
        else if (_Type == "MPSCR")
        {
            ArryLoop = ArryPrdSCA;
            ProductType = "SCR";
            TargetType = "SCR";
        }
        else if (_Type == "MPSCRM")
        {
            ArryLoop = ArryPrdSCRM;
            ProductType = "SCR";
            TargetType = "SCR";
        }
        else if (_Type == "MPSCRA")
        {
            ArryLoop = ArryPrdSCRA;
            ProductType = "SCR";
            TargetType = "SCR";
        }



        DateTime strDate = new DateTime(DateTime.Now.Year, _Month, 1, 0, 0, 0);
        DateTime endDate = strDate.AddMonths(1).Date + new TimeSpan(0, 0, 0);

        DateTime strHr = DateTime.Today + new TimeSpan(08, 00, 00);
        DateTime dateEnd = DateTime.Today + new TimeSpan(20, 00, 00);
        DateTime Endtoday = DateTime.Now;


        int MonthSelect = _Month;
        int PrevMonth = _Month - 1;
        int NextMonth = _Month + 1;



        //DataTable dtWorkingHour = new DataTable();
        //dtWorkingHour.Columns.Add("Position", typeof(string));
        //dtWorkingHour.Columns.Add("OT1", typeof(string));
        //dtWorkingHour.Columns.Add("OT15", typeof(string));
        //dtWorkingHour.Columns.Add("OT2", typeof(string));
        //dtWorkingHour.Columns.Add("OT3", typeof(string));
        //string[] arrPotition = { "OP", "LE", "FO", "SU" };
        //foreach (string item in arrPotition)
        //{
        //    dtWorkingHour.Rows.Add(item, "", "", "", "");
        //}


        //------------- Create column header OT  -----------------


        DataTable dtBCPD = new DataTable();
        dtBCPD.Columns.Add("Fiscal_year", typeof(string));
        dtBCPD.Columns.Add("ProductType", typeof(string));
        dtBCPD.Columns.Add("PRD_JAN", typeof(string));
        dtBCPD.Columns.Add("PRD_FEB", typeof(string));
        dtBCPD.Columns.Add("PRD_MAR", typeof(string));
        dtBCPD.Columns.Add("PRD_APR", typeof(string));
        dtBCPD.Columns.Add("PRD_MAY", typeof(string));
        dtBCPD.Columns.Add("PRD_JUN", typeof(string));
        dtBCPD.Columns.Add("PRD_JUL", typeof(string));
        dtBCPD.Columns.Add("PRD_AUG", typeof(string));
        dtBCPD.Columns.Add("PRD_SEP", typeof(string));
        dtBCPD.Columns.Add("PRD_OCT", typeof(string));
        dtBCPD.Columns.Add("PRD_NOV", typeof(string));
        dtBCPD.Columns.Add("PRD_DEC", typeof(string));
        DateTime setDate1 = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sqlBCPD = new SqlCommand();
        sqlBCPD.CommandText = "SELECT Fiscal_year " +
            " ,ProductType,PRD_APR,PRD_MAY,PRD_JUN,PRD_JUL,PRD_AUG " +
            " ,PRD_SEP,PRD_OCT,PRD_NOV,PRD_DEC,PRD_JAN,PRD_FEB,PRD_MAR,Total_PRD " +
           " from BC_PRODUCTION " +
           " where [Fiscal_year] = " + setDate1.Year;


        // int LBCSPD = 0;
        double Prd = 0, Prd1 = 0, Prd2 = 0, Prd3 = 0, Prd4 = 0, Prd5 = 0, Prd6 = 0, Prd7 = 0;
        double Prd8 = 0, Prd9 = 0, Prd10 = 0, Prd11 = 0, Prd12 = 0, SumPrd = 0, SumPrdOverAll = 0, PrdMonth = 0, SumPrdMonth = 0;
        DataTable dt1 = oConn.SqlGet(sqlBCPD, "DBBCS");
        foreach (DataRow item in dt1.Rows)
        {
            DataRow _rowBCSPD = dtBCPD.NewRow();
            _rowBCSPD["Fiscal_year"] = item["Fiscal_year"].ToString();
            _rowBCSPD["ProductType"] = item["ProductType"].ToString();
            _rowBCSPD["PRD_JAN"] = item["PRD_JAN"];
            _rowBCSPD["PRD_FEB"] = item["PRD_FEB"];
            _rowBCSPD["PRD_MAR"] = item["PRD_MAR"];
            _rowBCSPD["PRD_APR"] = item["PRD_APR"];
            _rowBCSPD["PRD_MAY"] = item["PRD_MAY"];
            _rowBCSPD["PRD_JUN"] = item["PRD_JUN"];
            _rowBCSPD["PRD_JUL"] = item["PRD_JUL"];
            _rowBCSPD["PRD_AUG"] = item["PRD_AUG"];
            _rowBCSPD["PRD_SEP"] = item["PRD_SEP"];
            _rowBCSPD["PRD_OCT"] = item["PRD_OCT"];
            _rowBCSPD["PRD_NOV"] = item["PRD_NOV"];
            _rowBCSPD["PRD_DEC"] = item["PRD_DEC"];
            dtBCPD.Rows.Add(_rowBCSPD);
        }


        //---------------- Get Employeee of Line --------------
        DataTable dtEmp = new DataTable();
        dtEmp.Columns.Add("Code", typeof(string));
        dtEmp.Columns.Add("Position", typeof(string));
        dtEmp.Columns.Add("CostCenter", typeof(string));
        dtEmp.Columns.Add("WType", typeof(string));
        DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sql = new SqlCommand();

        if (_Type == "ALL")
        {

            txtCostCenter = " = " + ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1] +
              " or [COSTCENTER] = " + ArryLoop[2] + " or [COSTCENTER] = " + ArryLoop[3] +
               " or [COSTCENTER] = " + ArryLoop[4] + " or [COSTCENTER] = " + ArryLoop[5] +
               " or [COSTCENTER] = " + ArryLoop[6] + " or [COSTCENTER] = " + ArryLoop[7] +
            " or [COSTCENTER] = " + ArryLoop[8] + " or [COSTCENTER] = " + ArryLoop[9] +
            " or [COSTCENTER] = " + ArryLoop[10];



        }
        else if (_Type == "MPFAC3")
        {
            txtCostCenter = " = " + ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1];

        }
        else if (_Type == "MPFAC3M")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "MPFAC3A")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "MPFAC2")
        {
            txtCostCenter = " = " + ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1] +
                         " or [COSTCENTER] = " + ArryLoop[2] + " or [COSTCENTER] = " + ArryLoop[3] +
                          " or [COSTCENTER] = " + ArryLoop[4] + " or [COSTCENTER] = " + ArryLoop[5];
        }
        else if (_Type == "MPFAC2M")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "MPFAC2A")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "MPFAC2MOM")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "MPFAC2MOA")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "MPSCRA")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "MPSCRM")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }


        else if (_Type == "MPFAC1")
        {
            txtCostCenter = " = " + ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1];
        }
        else if (_Type == "MPFAC1M")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "MPFAC1A")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }
        else if (_Type == "MPODM")
        {
            txtCostCenter = " = " + ArryLoop[0];
        }

        sql.CommandText = "SELECT e.CODE, POSIT,COSTCENTER,WTYPE FROM [Employee] e " +
        " where [COSTCENTER] " + txtCostCenter + " ORDER BY COSTCENTER,e.POSIT";


        int ii = 0;
        DataTable dt = oConn.SqlGet(sql, "DBDCI");
        foreach (DataRow item in dt.Rows)
        {
            DataRow _rowEmp = dtEmp.NewRow();
            _rowEmp["Code"] = item["CODE"].ToString();
            _rowEmp["Position"] = item["POSIT"].ToString();
            _rowEmp["CostCenter"] = item["COSTCENTER"].ToString();
            _rowEmp["WType"] = item["WTYPE"].ToString();
            dtEmp.Rows.Add(_rowEmp);
        }
        //  lbMP.Text = dtEmp.Rows.Count.ToString();
        //---------------- Get Employeee of Line --------------        

        //----------------- Create row content Manpower ------------------

        MMPInfo.MPAllChartInfo oItemMPP = new MMPInfo.MPAllChartInfo();

        int accuOP1 = 0, accuOP15 = 0, accuOP2 = 0, accuOP3 = 0, CountMPOP = 1, CountMPD = 1, CountMPN = 1, CountMPH = 1, SumMP = 1;
        int accuLE1 = 0, accuLE15 = 0, accuLE2 = 0, accuLE3 = 0, CountMPLE = 1;
        int accuFO1 = 0, accuFO15 = 0, accuFO2 = 0, accuFO3 = 0, CountMPFO = 1;
        int accuSU1 = 0, accuSU15 = 0, accuSU2 = 0, accuSU3 = 0, CountMPSU = 1;
        int CountMPOTREQD = 1, CountMPOTREQN = 1, SumMPReqD = 1, SumMPReqN = 1;
        double CostOverAllSum = 0;
        // double CostOverAll = 0;




        for (ii = 1; ii <= MonthSelect; ii++)
        {
            Prd = 0;
            if (dtBCPD.Rows.Count > 0)
            {

                foreach (DataRow _rowbcpd in dtBCPD.Rows)
                {

                    if (_Type == "FAC2")
                    {
                        if (Convert.ToString(_rowbcpd["ProductType"].ToString()) == "2YC" || Convert.ToString(_rowbcpd["ProductType"].ToString()) == "SCR")
                        {
                            PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                            Prd += PrdMonth;
                            //    SumPrd += Prd;
                        }
                    }
                    else if (_Type == "ALL")
                    {
                        int k = 0;
                        for (k = 1; k <= ArryPrd.Count(); k++)
                        {


                            if (ArryPrd[k - 1] == Convert.ToString(_rowbcpd["ProductType"].ToString()))
                            {
                                if (ArryPrd[k - 1] == "ODM")
                                {
                                    PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                                    PrdMonth = PrdMonth / 20;
                                }
                                else
                                {
                                    PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                                }
                                Prd += PrdMonth;


                            }
                            PrdMonth = 0;
                        }
                    }
                    else

                        if (ProductType == Convert.ToString(_rowbcpd["ProductType"].ToString()))
                        {
                            Prd = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                            // SumPrd += Prd;
                        }


                    // SumPrd += Prd;
                }
                SumPrd += Prd;

            }


            if (ii < MonthSelect)
            {
                setDate = new DateTime(DateTime.Now.Year, ii, 1);

            }
            else if (ii == MonthSelect)
            {
                setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);

            }
            else if (ii > MonthSelect)
            {

                setDate = new DateTime(DateTime.Now.Year, NextMonth, 1);

            }
            int __Month = setDate.Month;


            // Start Check Working Time OT in DB

            //---------------- Get Employeee of Line --------------
            DataTable dtMNOT = new DataTable();
            dtMNOT.Columns.Add("Fiscal_year", typeof(string));
            dtMNOT.Columns.Add("Monthly", typeof(string));
            dtMNOT.Columns.Add("ProductType", typeof(string));
            dtMNOT.Columns.Add("SumMPReqD", typeof(string));
            dtMNOT.Columns.Add("SumMPReqN", typeof(string));
            dtMNOT.Columns.Add("SumMPD", typeof(string));
            dtMNOT.Columns.Add("SumMPN", typeof(string));
            dtMNOT.Columns.Add("SumMPH", typeof(string));
            dtMNOT.Columns.Add("SumMP", typeof(string));
            dtMNOT.Columns.Add("OPOT1", typeof(string));
            dtMNOT.Columns.Add("OPOT15", typeof(string));
            dtMNOT.Columns.Add("OPOT2", typeof(string));
            dtMNOT.Columns.Add("OPOT3", typeof(string));
            dtMNOT.Columns.Add("LEOT1", typeof(string));
            dtMNOT.Columns.Add("LEOT15", typeof(string));
            dtMNOT.Columns.Add("LEOT2", typeof(string));
            dtMNOT.Columns.Add("LEOT3", typeof(string));
            dtMNOT.Columns.Add("FOOT1", typeof(string));
            dtMNOT.Columns.Add("FOOT15", typeof(string));
            dtMNOT.Columns.Add("FOOT2", typeof(string));
            dtMNOT.Columns.Add("FOOT3", typeof(string));
            dtMNOT.Columns.Add("SUOT1", typeof(string));
            dtMNOT.Columns.Add("SUOT15", typeof(string));
            dtMNOT.Columns.Add("SUOT2", typeof(string));
            dtMNOT.Columns.Add("SUOT3", typeof(string));




            // DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


            SqlCommand sqlMNOT = new SqlCommand();


            sqlMNOT.CommandText = "SELECT Fiscal_year,ProductType,Monthly,SumMPReqD,SumMPReqN,SumMPD,SumMPN,SumMPH,SumMP,OPOT1,OPOT15,OPOT2,OPOT3, " +
                    "LEOT1,LEOT15,LEOT2,LEOT3,FOOT1,FOOT15,FOOT2,FOOT3,SUOT1,SUOT15,SUOT2,SUOT3 FROM [BC_MANOT] " +
                     " where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' and ProductType ='" + _Type + "'";



            DataTable dtMOT = oConn.SqlGet(sqlMNOT, "DBBCS");

            if (dtMOT.Rows.Count > 0)
            {
                foreach (DataRow item in dtMOT.Rows)
                {
                    DataRow _rowMNOT = dtMNOT.NewRow();
                    _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                    _rowMNOT["Monthly"] = item["Monthly"].ToString();
                    _rowMNOT["ProductType"] = item["ProductType"].ToString();
                    _rowMNOT["SumMPReqD"] = item["SumMPReqD"].ToString();
                    _rowMNOT["SumMPReqN"] = item["SumMPReqN"].ToString();
                    _rowMNOT["SumMPD"] = item["SumMPD"].ToString();
                    _rowMNOT["SumMPN"] = item["SumMPN"].ToString();
                    _rowMNOT["SumMPH"] = item["SumMPH"].ToString();
                    _rowMNOT["SumMP"] = item["SumMP"].ToString();
                    _rowMNOT["OPOT1"] = item["OPOT1"].ToString();
                    _rowMNOT["OPOT15"] = item["OPOT15"].ToString();
                    _rowMNOT["OPOT2"] = item["OPOT2"].ToString();
                    _rowMNOT["OPOT3"] = item["OPOT3"].ToString();
                    _rowMNOT["LEOT1"] = item["LEOT1"].ToString();
                    _rowMNOT["LEOT15"] = item["LEOT15"].ToString();
                    _rowMNOT["LEOT2"] = item["LEOT2"].ToString();
                    _rowMNOT["LEOT3"] = item["LEOT3"].ToString();
                    _rowMNOT["FOOT1"] = item["FOOT1"].ToString();
                    _rowMNOT["FOOT15"] = item["FOOT15"].ToString();
                    _rowMNOT["FOOT2"] = item["FOOT2"].ToString();
                    _rowMNOT["FOOT3"] = item["FOOT3"].ToString();
                    _rowMNOT["SUOT1"] = item["SUOT1"].ToString();
                    _rowMNOT["SUOT15"] = item["SUOT15"].ToString();
                    _rowMNOT["SUOT2"] = item["SUOT2"].ToString();
                    _rowMNOT["SUOT3"] = item["SUOT3"].ToString();

                    dtMNOT.Rows.Add(_rowMNOT);
                }

            }





            //   string InsertDD;

            double MPOP = 4, MPLE = 50, MPFO = 90, MPSU = 100;
            double totalOP = 0, totalOPOT1 = 0, totalOPOT15 = 0, totalOPOT2 = 0, totalOPOT3 = 0;
            double totalLE = 0, totalLEOT1 = 0, totalLEOT15 = 0, totalLEOT2 = 0, totalLEOT3 = 0;
            double totalFO = 0, totalFOOT1 = 0, totalFOOT15 = 0, totalFOOT2 = 0, totalFOOT3 = 0;
            double totalSU = 0, totalSUOT1 = 0, totalSUOT15 = 0, totalSUOT2 = 0, totalSUOT3 = 0;
            double TotalOT1 = 0, TotalOT15 = 0, TotalOT2 = 0, TotalOT3 = 0, TotalSum = 0;
            double TotalMPD = 0, TotalMPN = 0, TotalMPH = 0;
            double CostOverall = 0;
            int SumTimeOP = 0, SumTimeLE = 0, SumTimeFO = 0, SumTimeSU = 0;

            if (dtMNOT.Rows.Count > 0)
            {
                if ((ii == MonthSelect))
                //if ((_Type == "ALL" || _Type == "FAC1" || _Type == "FAC2" || _Type == "FAC3" || _Type == "ODM") && (ii == MonthSelect))
                {

                    if (dtEmp.Rows.Count > 0)
                    {

                        foreach (DataRow _rowMP in dtEmp.Rows)
                        {


                            int idxMP = 0;
                            //--------------- Get Employee working Time ---------------------
                            DataTable dtempWorkingTime = new DataTable();
                            dtempWorkingTime = oMP.GetEmployeeWorkTimeOfMonth(_rowMP["Code"].ToString(),_rowMP["WTYPE"].ToString(),setDate.Month);
                                //.GetEmployeeWorkTimeOfMonthDayNight(_rowMP["Code"].ToString(), _rowMP["WTYPE"].ToString(), setDate.Month);
                            //--------------- Get Employee working Time ---------------------

                            for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                            {
                                setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);
                                //----------------- Fillter Working Time -------------
                                bool Working = false;
                                string OT1 = "-", OT15 = "-", OT2 = "-", OT3 = "-", MPD = "-", MPN = "-", MPH = "-", OTReqD = "-", OTActualD = "-", OTReqN = "-", OTActualN = "-";
                                if (dtempWorkingTime.Rows.Count > 0)
                                {
                                    DataRow[] fillWork = dtempWorkingTime.Select("WorkDate = '" + setDate.ToString("yyyy-MM-dd") + "'");
                                    if (fillWork.Length > 0)
                                    {
                                        OT1 = Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]).ToString() : "-";
                                        OT15 = Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]).ToString() : "-";
                                        OT2 = Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]).ToString() : "-";
                                        OT3 = Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]).ToString() : "-";
                                        OTReqD = Convert.ToInt16(fillWork[0]["SumMPReqD"]) > 0 ? Convert.ToInt16(fillWork[0]["SumMPReqD"]).ToString() : "-";
                                        OTReqN = Convert.ToInt16(fillWork[0]["SumMPReqN"]) > 0 ? Convert.ToInt16(fillWork[0]["SumMPReqN"]).ToString() : "-";
                                        MPD = Convert.ToInt16(fillWork[0]["SUMMPD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPD"]).ToString() : "-";
                                        MPN = Convert.ToInt16(fillWork[0]["SUMMPN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPN"]).ToString() : "-";
                                        MPH = Convert.ToInt16(fillWork[0]["SUMMPH"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPH"]).ToString() : "-";
                                        Working = true;

                                        //-------------------- Get OT Working Summary Each Position ---------------------
                                        #region
                                        if (_rowMP["Position"].ToString() == "OP" || _rowMP["Position"].ToString() == "OP.S")
                                        {
                                            accuOP1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                            accuOP15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                            accuOP2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                            accuOP3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                            CountMPOTREQD += Convert.ToInt16(fillWork[0]["SumMPReqD"]) > 0 ? Convert.ToInt16(fillWork[0]["SumMPReqD"]) : 0;
                                            CountMPOTREQN += Convert.ToInt16(fillWork[0]["SumMPReqN"]) > 0 ? Convert.ToInt16(fillWork[0]["SumMPReqN"]) : 0;
                                            CountMPD += Convert.ToInt16(fillWork[0]["SUMMPD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPD"]) : 0;
                                            CountMPN += Convert.ToInt16(fillWork[0]["SUMMPN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPN"]) : 0;
                                            CountMPH += Convert.ToInt16(fillWork[0]["SUMMPH"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPH"]) : 0;
                                            CountMPOP += 1;

                                        }
                                        else if (_rowMP["Position"].ToString() == "LE" || _rowMP["Position"].ToString() == "LE.S")
                                        {
                                            accuLE1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                            accuLE15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                            accuLE2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                            accuLE3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                            CountMPOTREQD += Convert.ToInt16(fillWork[0]["SUMMPReqD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPReqD"]) : 0;
                                            CountMPOTREQN += Convert.ToInt16(fillWork[0]["SUMMPReqN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPReqN"]) : 0;
                                            CountMPD += Convert.ToInt16(fillWork[0]["SUMMPD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPD"]) : 0;
                                            CountMPN += Convert.ToInt16(fillWork[0]["SUMMPN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPN"]) : 0;
                                            CountMPH += Convert.ToInt16(fillWork[0]["SUMMPH"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPH"]) : 0;
                                            CountMPLE += 1;
                                        }
                                        else if (_rowMP["Position"].ToString() == "FO" || _rowMP["Position"].ToString() == "FO.S")
                                        {
                                            accuFO1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                            accuFO15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                            accuFO2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                            accuFO3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                            CountMPOTREQD += Convert.ToInt16(fillWork[0]["SumMPReqD"]) > 0 ? Convert.ToInt16(fillWork[0]["SumMPReqD"]) : 0;
                                            CountMPOTREQN += Convert.ToInt16(fillWork[0]["SumMPReqN"]) > 0 ? Convert.ToInt16(fillWork[0]["SumMPReqN"]) : 0;
                                            CountMPD += Convert.ToInt16(fillWork[0]["SUMMPD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPD"]) : 0;
                                            CountMPN += Convert.ToInt16(fillWork[0]["SUMMPN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPN"]) : 0;
                                            CountMPH += Convert.ToInt16(fillWork[0]["SUMMPH"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPH"]) : 0;
                                            CountMPFO += 1;
                                        }
                                        else if (_rowMP["Position"].ToString() == "SU" || _rowMP["Position"].ToString() == "SU.S")
                                        {
                                            accuSU1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                            accuSU15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                            accuSU2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                            accuSU3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                            CountMPOTREQD += Convert.ToInt16(fillWork[0]["SumMPReqD"]) > 0 ? Convert.ToInt16(fillWork[0]["SumMPReqD"]) : 0;
                                            CountMPOTREQN += Convert.ToInt16(fillWork[0]["SumMPReqN"]) > 0 ? Convert.ToInt16(fillWork[0]["SumMPReqN"]) : 0;
                                            CountMPD += Convert.ToInt16(fillWork[0]["SUMMPD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPD"]) : 0;
                                            CountMPN += Convert.ToInt16(fillWork[0]["SUMMPN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPN"]) : 0;
                                            CountMPH += Convert.ToInt16(fillWork[0]["SUMMPH"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPH"]) : 0;
                                            CountMPSU += 1;
                                        }
                                        #endregion
                                        //-------------------- Get OT Working Summary Each Position ---------------------
                                    }


                                }

                            }


                        }
                        SumMP = CountMPD + CountMPN + CountMPH;

                    }



                    SqlCommand UpdateMNOT = new SqlCommand();

                    UpdateMNOT.CommandText = "Update  BC_MANOT set  SumMPReqD = '" + CountMPOTREQD + "',SumMPReqN = '" + CountMPOTREQN + "', SumMPD ='" + CountMPD + "', SumMPN ='" + CountMPN + "' ," +
                                        " SumMPH ='" + CountMPH + "', SumMP ='" + SumMP + "',   OPOT1 ='" + accuOP1 + "',OPOT15 ='" + accuOP15 + "' , " +
                                        "OPOT2 ='" + accuOP2 + "',OPOT3 ='" + accuOP3 + "',LEOT1='" + accuLE1 + "' , " +
                                        "LEOT15 ='" + accuLE15 + "',LEOT2='" + accuLE2 + "',LEOT3='" + accuLE3 + "' ," +
                                        "FOOT1='" + accuFO1 + "',FOOT15='" + accuFO15 + "' ,FOOT2='" + accuFO2 + "'," +
                                        "FOOT3='" + accuFO3 + "', " +
                                        " SUOT1='" + accuSU1 + "' ,SUOT15='" + accuSU15 + "' ,SUOT2='" + accuSU2 + "' ,SUOT3='" + accuSU3 + "'" +
                                        "where  Fiscal_year ='" + setDate.ToString("yyyy") + "' and Monthly ='" + ii + "' and ProductType ='" + _Type + "'";

                    oConn.SqlExecute(UpdateMNOT, "DBBCS");
                }
            }
            else
            {

                //if (_Type == "ALL" || _Type == "FAC1" || _Type == "FAC2" || _Type == "FAC3" || _Type == "ODM")
                //{

                if (dtEmp.Rows.Count > 0)
                {

                    foreach (DataRow _rowMP in dtEmp.Rows)
                    {


                        int idxMP = 0;
                        //--------------- Get Employee working Time ---------------------
                        DataTable dtempWorkingTime = new DataTable();
                        dtempWorkingTime = oMP.GetEmployeeWorkTimeOfMonthDayNight(_rowMP["Code"].ToString(), _rowMP["WTYPE"].ToString(), setDate.Month);
                        //--------------- Get Employee working Time ---------------------

                        for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                        {
                            setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);
                            //----------------- Fillter Working Time -------------
                            bool Working = false;
                            string OT1 = "-", OT15 = "-", OT2 = "-", OT3 = "-", MPD = "-", MPN = "-", MPH = "-", OTReqD = "-", OTReqN = "-";
                            if (dtempWorkingTime.Rows.Count > 0)
                            {
                                DataRow[] fillWork = dtempWorkingTime.Select("WorkDate = '" + setDate.ToString("yyyy-MM-dd") + "'");
                                if (fillWork.Length > 0)
                                {
                                    OT1 = Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]).ToString() : "-";
                                    OT15 = Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]).ToString() : "-";
                                    OT2 = Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]).ToString() : "-";
                                    OT3 = Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]).ToString() : "-";
                                    OTReqD = Convert.ToInt16(fillWork[0]["SumMPReqD"]) > 0 ? Convert.ToInt16(fillWork[0]["SumMPReqD"]).ToString() : "-";
                                    OTReqN = Convert.ToInt16(fillWork[0]["SumMPReqN"]) > 0 ? Convert.ToInt16(fillWork[0]["SumMPReqN"]).ToString() : "-";
                                    MPD = Convert.ToInt16(fillWork[0]["SUMMPD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPD"]).ToString() : "-";
                                    MPN = Convert.ToInt16(fillWork[0]["SUMMPN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPN"]).ToString() : "-";
                                    MPH = Convert.ToInt16(fillWork[0]["SUMMPH"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPH"]).ToString() : "-";
                                    Working = true;

                                    //-------------------- Get OT Working Summary Each Position ---------------------
                                    #region
                                    if (_rowMP["Position"].ToString() == "OP" || _rowMP["Position"].ToString() == "OP.S")
                                    {
                                        accuOP1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                        accuOP15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                        accuOP2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                        accuOP3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                        CountMPOTREQD += Convert.ToInt16(fillWork[0]["SumMPReqD"]) > 0 ? Convert.ToInt16(fillWork[0]["SumMPReqD"]) : 0;
                                        CountMPOTREQN += Convert.ToInt16(fillWork[0]["SumMPReqN"]) > 0 ? Convert.ToInt16(fillWork[0]["SumMPReqN"]) : 0;
                                        CountMPD += Convert.ToInt16(fillWork[0]["SUMMPD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPD"]) : 0;
                                        CountMPN += Convert.ToInt16(fillWork[0]["SUMMPN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPN"]) : 0;
                                        CountMPH += Convert.ToInt16(fillWork[0]["SUMMPH"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPH"]) : 0;
                                        CountMPOP += 1;

                                    }
                                    else if (_rowMP["Position"].ToString() == "LE" || _rowMP["Position"].ToString() == "LE.S")
                                    {
                                        accuLE1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                        accuLE15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                        accuLE2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                        accuLE3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                        CountMPOTREQD += Convert.ToInt16(fillWork[0]["SumMPReqD"]) > 0 ? Convert.ToInt16(fillWork[0]["SumMPReqD"]) : 0;
                                        CountMPOTREQN += Convert.ToInt16(fillWork[0]["SumMPReqN"]) > 0 ? Convert.ToInt16(fillWork[0]["SumMPReqN"]) : 0;
                                        CountMPD += Convert.ToInt16(fillWork[0]["SUMMPD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPD"]) : 0;
                                        CountMPN += Convert.ToInt16(fillWork[0]["SUMMPN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPN"]) : 0;
                                        CountMPH += Convert.ToInt16(fillWork[0]["SUMMPH"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPH"]) : 0;
                                        CountMPLE += 1;
                                    }
                                    else if (_rowMP["Position"].ToString() == "FO" || _rowMP["Position"].ToString() == "FO.S")
                                    {
                                        accuFO1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                        accuFO15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                        accuFO2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                        accuFO3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                        CountMPOTREQD += Convert.ToInt16(fillWork[0]["SumMPReqD"]) > 0 ? Convert.ToInt16(fillWork[0]["SumMPReqD"]) : 0;
                                        CountMPOTREQN += Convert.ToInt16(fillWork[0]["SumMPReqN"]) > 0 ? Convert.ToInt16(fillWork[0]["SumMPReqN"]) : 0;
                                        CountMPD += Convert.ToInt16(fillWork[0]["SUMMPD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPD"]) : 0;
                                        CountMPN += Convert.ToInt16(fillWork[0]["SUMMPN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPN"]) : 0;
                                        CountMPH += Convert.ToInt16(fillWork[0]["SUMMPH"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPH"]) : 0;
                                        CountMPFO += 1;
                                    }
                                    else if (_rowMP["Position"].ToString() == "SU" || _rowMP["Position"].ToString() == "SU.S")
                                    {
                                        accuSU1 += Convert.ToInt16(fillWork[0]["OT1"]) > 0 ? Convert.ToInt16(fillWork[0]["OT1"]) : 0;
                                        accuSU15 += Convert.ToInt16(fillWork[0]["OT15"]) > 0 ? Convert.ToInt16(fillWork[0]["OT15"]) : 0;
                                        accuSU2 += Convert.ToInt16(fillWork[0]["OT2"]) > 0 ? Convert.ToInt16(fillWork[0]["OT2"]) : 0;
                                        accuSU3 += Convert.ToInt16(fillWork[0]["OT3"]) > 0 ? Convert.ToInt16(fillWork[0]["OT3"]) : 0;
                                        CountMPOTREQD += Convert.ToInt16(fillWork[0]["SumMPReqD"]) > 0 ? Convert.ToInt16(fillWork[0]["SumMPReqD"]) : 0;
                                        CountMPOTREQN += Convert.ToInt16(fillWork[0]["SumMPReqN"]) > 0 ? Convert.ToInt16(fillWork[0]["SumMPReqN"]) : 0;
                                        CountMPD += Convert.ToInt16(fillWork[0]["SUMMPD"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPD"]) : 0;
                                        CountMPN += Convert.ToInt16(fillWork[0]["SUMMPN"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPN"]) : 0;
                                        CountMPH += Convert.ToInt16(fillWork[0]["SUMMPH"]) > 0 ? Convert.ToInt16(fillWork[0]["SUMMPH"]) : 0;
                                        CountMPSU += 1;
                                    }
                                    #endregion
                                    //-------------------- Get OT Working Summary Each Position ---------------------
                                }


                            }

                        }

                        SumMP = CountMPD + CountMPN + CountMPH;
                    }


                    //}


                    SqlCommand InsertMNOT = new SqlCommand();

                    InsertMNOT.CommandText = "Insert into BC_MANOT(Fiscal_year,ProductType,Monthly,SumMPReqD,SumMPReqN,SumMPD,SumMPN,SumMPH,SumMP,OPOT1,OPOT15," +
                                        " OPOT2,OPOT3,LEOT1,LEOT15,LEOT2,LEOT3,FOOT1,FOOT15,FOOT2,FOOT3," +
                                        " SUOT1,SUOT15,SUOT2,SUOT3) " +
                                        "  values ('" + setDate.ToString("yyyy") + "','" + _Type + "' ,'" + ii + "','" + CountMPOTREQD + "','" + CountMPOTREQN + "','" + CountMPD + "'" +
                                        ",'" + CountMPN + "','" + CountMPH + "','" + SumMP + "'" +
                                         ",'" + CountMPOTREQD + "','" + CountMPOTREQN + "','" + accuOP2 + "','" + accuOP3 + "'" +
                                        ",'" + accuLE1 + "','" + accuLE15 + "','" + accuLE2 + "','" + accuLE3 + "'" +
                                        ",'" + accuFO1 + "','" + accuFO15 + "','" + accuFO2 + "','" + accuFO3 + "'" +
                                        ",'" + accuSU1 + "','" + accuSU15 + "','" + accuSU2 + "','" + accuSU3 + "')";
                    oConn.SqlExecute(InsertMNOT, "DBBCS");

                }
            }



            //  #region

            if (dtMNOT.Rows.Count > 0)
            {
                foreach (DataRow _rowMN in dtMNOT.Rows)
                {
                    if (_Type == _rowMN["ProductType"].ToString())
                    {
                        oItemMPP.SumOT_ReqD = Convert.ToDouble(_rowMN["SumMPReqD"]);
                        oItemMPP.SumOT_ReqN = Convert.ToDouble(_rowMN["SumMPReqN"]);
                        oItemMPP.SumMPD = Convert.ToDouble(_rowMN["SumMPD"]);
                        oItemMPP.SumMPN = Convert.ToDouble(_rowMN["SumMPN"]);
                        oItemMPP.SumMPH = Convert.ToDouble(_rowMN["SumMPH"]);
                        oItemMPP.SumMP = Convert.ToDouble(_rowMN["SumMPD"]) + Convert.ToDouble(_rowMN["SumMPN"]) + Convert.ToDouble(_rowMN["SumMPH"]);



                        // Operator OT1,15,2,3
                        totalOPOT1 = Convert.ToDouble(_rowMN["OPOT1"]) / 60;
                        totalOPOT15 = Convert.ToDouble(_rowMN["OPOT15"]) / 60;
                        totalOPOT2 = Convert.ToDouble(_rowMN["OPOT2"]) / 60;
                        totalOPOT3 = Convert.ToDouble(_rowMN["OPOT3"]) / 60;



                        oItemMPP.OPOT1 = totalOPOT1;
                        oItemMPP.OPOT15 = totalOPOT15;
                        oItemMPP.OPOT2 = totalOPOT2;
                        oItemMPP.OPOT3 = totalOPOT3;

                        // Cost OT of Operator Ot1,15,2,3
                        totalOP += (totalOPOT1 * MPLE);
                        totalOP += (totalOPOT15 * (MPLE * 1.5));
                        totalOP += (totalOPOT2 * (MPLE * 2));
                        totalOP += (totalOPOT3 * (MPLE * 3));
                        TotalOT1 = totalOP;
                        //totalLE = totalLEOT1;



                        //// Leader OT1,15,2,3
                        totalLEOT1 = Convert.ToDouble(_rowMN["LEOT1"]) / 60;
                        totalLEOT15 = Convert.ToDouble(_rowMN["LEOT15"]) / 60;
                        totalLEOT2 = Convert.ToDouble(_rowMN["LEOT2"]) / 60;
                        totalLEOT3 = Convert.ToDouble(_rowMN["LEOT3"]) / 60;

                        oItemMPP.LEOT1 = totalLEOT1;
                        oItemMPP.LEOT15 = totalLEOT15;
                        oItemMPP.LEOT2 = totalLEOT2;
                        oItemMPP.LEOT3 = totalLEOT3;
                        //// Cost OT of Leader Ot1,15,2,3
                        totalLE += (totalLEOT1 * MPLE);
                        totalLE += (totalLEOT15 * (MPLE * 1.5));
                        totalLE += (totalLEOT2 * (MPLE * 2));
                        totalLE += (totalLEOT3 * (MPLE * 3));
                        TotalOT15 = totalLE;
                        //totalLE = totalLEOT1;



                        ////** Foreman OT1,15,2,3
                        totalFOOT1 = Convert.ToDouble(_rowMN["FOOT1"]) / 60;
                        totalFOOT15 = Convert.ToDouble(_rowMN["FOOT15"]) / 60;
                        totalFOOT2 = Convert.ToDouble(_rowMN["FOOT2"]) / 60;
                        totalFOOT3 = Convert.ToDouble(_rowMN["FOOT3"]) / 60;

                        oItemMPP.FOOT1 = totalFOOT1;
                        oItemMPP.FOOT15 = totalFOOT15;
                        oItemMPP.FOOT2 = totalFOOT2;
                        oItemMPP.FOOT3 = totalFOOT3;
                        //// ** Cost OT of Foreman Ot1,15,2,3
                        totalFO += (totalFOOT1 * MPFO);
                        totalFO += (totalFOOT15 * (MPFO * 1.5));
                        totalFO += (totalFOOT2 * (MPFO * 2));
                        totalFO += (totalFOOT3 * (MPFO * 3));
                        TotalOT2 = totalFO;
                        totalFO = totalFOOT1;


                        totalSUOT1 = Convert.ToDouble(_rowMN["SUOT1"]) / 60;
                        totalSUOT15 = Convert.ToDouble(_rowMN["SUOT15"]) / 60;
                        totalSUOT2 = Convert.ToDouble(_rowMN["SUOT2"]) / 60;
                        totalSUOT3 = Convert.ToDouble(_rowMN["SUOT3"]) / 60;

                        totalSU += (totalSUOT1 * MPSU);
                        totalSU += (totalSUOT15 * (MPSU * 1.5));
                        totalSU += (totalSUOT2 * (MPSU * 2));
                        totalSU += (totalSUOT3 * (MPSU * 3));
                        TotalOT3 = totalSU;
                        totalSU = totalSUOT1;


                        oItemMPP.SUPosition = "SU";

                        oItemMPP.SUOT1 = totalSUOT1;
                        oItemMPP.SUOT15 = totalSUOT15;
                        oItemMPP.SUOT2 = totalSUOT2;
                        oItemMPP.SUOT3 = totalSUOT3;






                    }
                }
            }


            //Calculate Cost/Unit and Accum Cost/Unit

            double CostUnitch = 0, AccumCostUnitch = 0;


            CostOverall = totalOP + totalLE + totalFO + totalSU;

            CostOverAllSum += CostOverall;


            if ((Prd != 0) && (SumPrd != 0))
            {
                string CostUnit, AccumCostUnit;
                if (CostOverall != CostOverAllSum)
                {
                    if (_Type == "ODM")
                    {
                        CostUnit = String.Format("{0:F2}", ((CostOverall / Prd) * 20));
                        AccumCostUnit = String.Format("{0:F2}", ((CostOverAllSum / SumPrd) * 20));
                    }
                    else
                    {
                        CostUnit = String.Format("{0:F2}", (CostOverall / Prd));
                        AccumCostUnit = String.Format("{0:F2}", (CostOverAllSum / SumPrd));
                    }
                }
                else
                {
                    if (_Type == "ODM")
                    {
                        CostUnit = String.Format("{0:F2}", ((CostOverall / Prd) * 20));
                        AccumCostUnit = String.Format("{0:F2}", ((CostOverAllSum / Prd) * 20));
                    }
                    else
                    {
                        CostUnit = String.Format("{0:F2}", (CostOverall / Prd));
                        AccumCostUnit = String.Format("{0:F2}", (CostOverAllSum / Prd));
                    }
                }

                if (_Type == "ODM")
                {
                    CostUnitch = Convert.ToDouble(CostUnit.ToString());
                    AccumCostUnitch = Convert.ToDouble(AccumCostUnit.ToString());

                }
                else
                {
                    CostUnitch = Convert.ToDouble(CostUnit.ToString());
                    AccumCostUnitch = Convert.ToDouble(AccumCostUnit.ToString());
                }

            }

            //    //CostUnit = Convert.ToInt32(CostOverall / Prd);
            //    //AccumCostUnit = Convert.ToInt32(CostOverAllSum / SumPrd);

            //}

            int ix = 0;
            //foreach (string __Month in ArryPeriod)
            //{
            // add data 
            MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();



            if ((__Month == 4) && (Prd != 0) && (SumPrd != 0))
            {

                mManPower.SumOT_ReqN = oItemMPP.SumOT_ReqN;
                mManPower.SumOT_ReqD = oItemMPP.SumOT_ReqD;

                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;

                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;

                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 5) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumOT_ReqN = oItemMPP.SumOT_ReqN;
                mManPower.SumOT_ReqD = oItemMPP.SumOT_ReqD;

                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;
                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 6) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumOT_ReqN = oItemMPP.SumOT_ReqN;
                mManPower.SumOT_ReqD = oItemMPP.SumOT_ReqD;

                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;
                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 7) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumOT_ReqN = oItemMPP.SumOT_ReqN;
                mManPower.SumOT_ReqD = oItemMPP.SumOT_ReqD;

                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;
                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if ((__Month == 8) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumOT_ReqN = oItemMPP.SumOT_ReqN;
                mManPower.SumOT_ReqD = oItemMPP.SumOT_ReqD;

                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;
                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if ((__Month == 9) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumOT_ReqN = oItemMPP.SumOT_ReqN;
                mManPower.SumOT_ReqD = oItemMPP.SumOT_ReqD;

                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;
                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if ((__Month == 10) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumOT_ReqN = oItemMPP.SumOT_ReqN;
                mManPower.SumOT_ReqD = oItemMPP.SumOT_ReqD;

                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;

                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 11) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumOT_ReqN = oItemMPP.SumOT_ReqN;
                mManPower.SumOT_ReqD = oItemMPP.SumOT_ReqD;

                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;

                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if ((__Month == 12) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumOT_ReqN = oItemMPP.SumOT_ReqN;
                mManPower.SumOT_ReqD = oItemMPP.SumOT_ReqD;

                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;

                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 1) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumOT_ReqN = oItemMPP.SumOT_ReqN;
                mManPower.SumOT_ReqD = oItemMPP.SumOT_ReqD;

                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;

                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 2) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumOT_ReqN = oItemMPP.SumOT_ReqN;
                mManPower.SumOT_ReqD = oItemMPP.SumOT_ReqD;

                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;


                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if ((__Month == 3) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.SumOT_ReqN = oItemMPP.SumOT_ReqN;
                mManPower.SumOT_ReqD = oItemMPP.SumOT_ReqD;

                mManPower.SumMPD = oItemMPP.SumMPD;
                mManPower.SumMPN = oItemMPP.SumMPN;
                mManPower.SumMPH = oItemMPP.SumMPH;
                mManPower.SumMP = oItemMPP.SumMP;

                //mManPower.OPOT1 = oItemMPP.OPOT1;
                //mManPower.OPOT15 = oItemMPP.OPOT15;
                //mManPower.OPOT2 = oItemMPP.OPOT2;
                //mManPower.OPOT3 = oItemMPP.OPOT3;

                //mManPower.LEOT1 = oItemMPP.LEOT1;
                //mManPower.LEOT15 = oItemMPP.LEOT15;
                //mManPower.LEOT2 = oItemMPP.LEOT2;
                //mManPower.LEOT3 = oItemMPP.LEOT3;

                //mManPower.FOOT1 = oItemMPP.FOOT1;
                //mManPower.FOOT15 = oItemMPP.FOOT15;
                //mManPower.FOOT2 = oItemMPP.FOOT2;
                //mManPower.FOOT3 = oItemMPP.FOOT3;

                //mManPower.SUOT1 = oItemMPP.SUOT1;
                //mManPower.SUOT15 = oItemMPP.SUOT15;
                //mManPower.SUOT2 = oItemMPP.SUOT2;
                //mManPower.SUOT3 = oItemMPP.SUOT3;
                //mManPower.BudgetCost = CostOverall;
                //mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                //mManPower.Prd = Prd;
                //mManPower.SumPrd = SumPrd;
                //}
                //mManPower.CostUnit = CostUnitch;
                //mManPower.AccumCostUnit = AccumCostUnitch;
            }

            if (__Month >= 3)
            {
                mManPower.dataCostCenter = ArryPeriod1[__Month - 1];
                mManPower.dataYearMonth = ArryPeriod1[__Month - 1];
                oListMP.Add(mManPower);
            }
            //oListMP.Add(mManPower);

            //  Prd = 0;
            //   SumPrd = 0;
            PrdMonth = 0;
            SumPrdMonth = 0;
            //   SumPrdOverAll = 0;
            CostOverall = 0;
            totalOP = 0;
            totalLE = 0;
            totalFO = 0;
            totalSU = 0;

            totalOP = 0;
            totalLE = 0;
            totalFO = 0;
            totalSU = 0;

            accuOP1 = 0;
            accuOP15 = 0;
            accuOP2 = 0;
            accuOP3 = 0;

            accuLE1 = 0;
            accuLE15 = 0;
            accuLE2 = 0;
            accuLE3 = 0;

            accuFO1 = 0;
            accuFO15 = 0;
            accuFO2 = 0;
            accuFO3 = 0;

            accuSU1 = 0;
            accuSU15 = 0;
            accuSU2 = 0;
            accuSU3 = 0;

            totalOPOT1 = 0;
            totalOPOT15 = 0;
            totalOPOT2 = 0;
            totalOPOT3 = 0;
            totalOP = 0;

            totalLEOT1 = 0;
            totalLEOT15 = 0;
            totalLEOT2 = 0;
            totalLEOT3 = 0;
            totalLE = 0;

            totalFOOT1 = 0;
            totalFOOT15 = 0;
            totalFOOT2 = 0;
            totalFOOT3 = 0;
            totalFO = 0;

            totalSUOT1 = 0;
            totalSUOT15 = 0;
            totalSUOT2 = 0;
            totalSUOT3 = 0;
            totalSU = 0;


            CountMPOTREQD = 0;
            CountMPOTREQN = 0;
            CountMPD = 0;
            CountMPN = 0;
            CountMPH = 0;
            SumMP = 0;

        }
        return oListMP;
    }

    public List<MMPInfo.MPAllChartInfo> GetChartMPFAC3Machine(int _Year, int _Month, DateTime _DataDate, string _Type)
    {
        List<MMPInfo.MPAllChartInfo> oListMP = new List<MMPInfo.MPAllChartInfo>();

    
        DateTime strDate = new DateTime(DateTime.Now.Year, _Month, 1, 0, 0, 0);
        DateTime endDate = strDate.AddMonths(1).Date + new TimeSpan(0, 0, 0);

        DateTime strHr = DateTime.Today + new TimeSpan(08, 00, 00);
        DateTime dateEnd = DateTime.Today + new TimeSpan(20, 00, 00);
        DateTime Endtoday = DateTime.Now;
        DateTime EndYesterday = DateTime.Today - new TimeSpan(24, 00, 00);
      


        int YearSelect = _Year;
        int MonthSelect = _Month;
        int MonthPresent = Endtoday.Month;
        int PrevMonth = _Month - 1;
        int NextMonth = _Month + 1;


      
        string[] ArryPrdMachineFac3 = { "MPFAC3CY", "MPFAC3CS", "MPFAC3FH", "MPFAC3RH", "MPFAC3PI", "MPFAC3MOT", "MPFAC3MA", "MPFAC3AS", "MPFAC3FIN" };

        // if ((_Type == "MPFAC3MM") )
        //{
        //    ArryLoop = ArryPrdMachineFac3;
        //    ProductType = "1YC/3";
        //    TargetType = "1YC/3";
        //    Factory = "3";
        //    Txt_Type = "FAC3MM";

        //}



        int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;
        int LECount_D = 0, LECount_N = 0, FOCount_D = 0, FOCount_N = 0; ;
        int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;

        string DatetoDay = "";
        string MC_Name = "";
        int Xdate = 0;
        int Yester = 0;
        int SUMOT_REQDD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
        int SUMOT_REQNN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
        int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
        int SUMMP_SHIFT = 0, SUMACT_MP = 0, Sum_ACTD = 0, Sum_ACTN=0;

        DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);
        DateTime setyesterday = new DateTime(DateTime.Now.Year, MonthSelect, 1);

        int _Day = DateTime.Now.Day;
            
            //= DateTime.Now.Date;
        //int Month = DateTime.Now.Month;

           int FlagInsert = 1;
           SqlCommand Sql = new SqlCommand();

           for (int i = _Day; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
           {
               //------------------ Monthly Present Update --------------------//
               if (i >= 2)
               {
                   Yester = i - 1;
                   setyesterday = new DateTime(DateTime.Now.Year, setDate.Month, Yester);

               }
               setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);



               if ((setDate >= EndYesterday) && (setDate <= dateEnd))
               {
                  // FlagUdate = 1;

                   //----------------- Fillter Working Time -------------
                  // bool Working = false;

                   Sql.CommandText = "select Monthly,Daily,ProductType,STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight FROM [dbBCS].[dbo].[BC_MANPOWER] " +
  " WHERE  (Fiscal_year = '" + _Year + "' and  Monthly = '" + MonthSelect + "' and Daily = '" + _Day + "') and  (ProductType = 'FAC3CS' or ProductType = 'FAC3RH' or ProductType = 'FAC3FH' or ProductType = 'FAC3PI' or " +
  " ProductType = 'FAC3MOT' or ProductType = 'FAC3MA' or ProductType = 'FAC3AS' or ProductType = 'FAC3FIN' ) ";

       //            sqlMNOT.CommandText = "SELECT Fiscal_year,Monthly,Daily,ProductType,STD_MPDay,ACT_MPDay" +
       // " ,STD_MPNight,ACT_MPNight,STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight" +
       //" FROM BC_MANPOWER where Fiscal_year = '" + _Year + "' and  Monthly = '" + MonthSelect + "' and ProductType ='" + Txt_Type + "' " +
       //" order by daily ";

     //              sql.CommandText = "SELECT e.Posit,WorkShift,WorkType,otr.OTFROM ,[WCode],[WDate],[WTime],[WDoor],es.[WType],LTRIM(DATEDIFF(MINUTE, 0, otr.OT1)) as OT1,LTRIM(DATEDIFF(MINUTE, 0, otr.OT15)) as OT15 " +
     //",LTRIM(DATEDIFF(MINUTE, 0, otr.OT2)) as OT2,LTRIM(DATEDIFF(MINUTE, 0, otr.OT3)) as OT3 " +
     //" FROM [dbDCI].[dbo].[EmployeeTimeStamp] es " +
     //" LEFT JOIN [dbDCI].[dbo].[Employee] e ON es.WCode = e.CODE " +
     //" LEFT JOIN [dbDCI].[dbo].[EmployeeWorkingTime] wt ON es.WCode = wt.Code " +
     //" LEFT JOIN [dbDCI].[dbo].[EMP_OTRQ] otr ON es.WCode = otr.CODE AND es.WDate = otr.ODATE " +
     //" WHERE WDate >= '" + setDate.ToString("yyyy-MM-dd") + "' AND WDate <= '" + setDate.ToString("yyyy-MM-dd") + "' AND es.WType = 'O' " +
     //" And OTFROM != ''" +
     //"	AND CONVERT(DATE, wt.SystemOUT) = WDate " +
     //" And  ( " + txtAndon + "' or andon ='' )" +
     //" order by WDate  desc";

                   DataTable dtt = oConn.SqlGet(Sql, "DBDCI");
                   if (dtt.Rows.Count > 0)
                   {

                       foreach (DataRow item in dtt.Rows)
                       {


                           // *** Get ManPower OP
                           MC_Name = item["ProductType"].ToString();
                           //DataTable MPDataDirect = GetManPowerByLine(txtCostCenter);
                           //DataTable MPDataOP = GetManPowerByLineOP(txtAndon, "OP");
                           MPCount_D = Convert.ToInt16(item["STD_MPDay"].ToString());
                           MPCount_N = Convert.ToInt16(item["STD_MPNight"].ToString());
                           Sum_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                           Sum_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());

                           //-------OT Req, Actual Day,Night

                           //SumOT_ReqD += GetOTReqByLineDay(txtCostCenter, setDate);
                           //SumOT_ReqN += GetOTReqByLineNight(txtCostCenter, setDate);
                           //SumOT_ActD += GetOTActByLineDay(txtCostCenter, setDate);
                           //SumOT_ActN += GetOTActByLineNight(txtCostCenter, setDate);



                           //*****  Data for MP, OT Req and Actual                  
                           MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                           //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                           DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);


                           // ** Man Power Attandance
                           mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                           mManPower.Xdate = i;

                           //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                           //  mManPower.SumMP_STD = SUMACT_MP;
                           //MPCount_D += LECount_D + FOCount_D;
                           //MPCount_N += LECount_N + FOCount_N;
                           mManPower.MC_Name = MC_Name;

                           mManPower.SumMPD = MPCount_D;
                           mManPower.SumMPN = MPCount_N;

                           //SumMP_ACTD += SumFOLE_ACTD;
                           //SumMP_ACTN += SumFOLE_ACTN;

                           mManPower.SumMP_ACTD = Sum_ACTD;
                           mManPower.SumMP_ACTN = Sum_ACTN;

                           oListMP.Add(mManPower);
                       }
                       //mManPower.SumOT_ReqD = SumOT_ReqD;
                       //mManPower.SumOT_ReqN = SumOT_ReqN;
                       //mManPower.SumOT_ActD = SumOT_ActD;
                       //mManPower.SumOT_ActN = SumOT_ActN;
                   }
               }
           }



         return oListMP;
    }

    public List<MMPInfo.MPAllChartInfo> GetChartMPDailybyOTHER(int _Year, int _Month, DateTime _DataDate, string _Type)
    {

        List<MMPInfo.MPAllChartInfo> oListMP = new List<MMPInfo.MPAllChartInfo>();

        //* Maintenance 
        string[] ArryMT = { "4310", "4320" };
        string[] ArryMTM = { "4310" };
        string[] ArryMTA = { "4320" };


        string[] ArryPrd = { "1YC", "2YC", "SCR", "1YC/3", "ODM" };
        //string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702", "4310", "4320", "4510", "4720", "8120" };
        string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702" };
        string[] ArryPrdFac1 = { "1101", "1102" };
        //string[] ArryPrdAndonFac1 = { "001", "049", "052", "054", "056", "057", "058", "062", "063", "065", "066", "069", "072", "074", "076", "077", "080", "083", "084", "089","090","093","095","098","103","106","107" };
        //string[] ArryPrdAndonFac2 = { "004", "005", "006", "007", "008", "009", "010", "011", "012", "013", "014", "015", "017", "018", "019", "020", "021", "022", "023", "026", "027", "028", "030", "031", "033", "034", "036", "037", "041", "043", "044", "045", "046", "051", "053", "059", "061", "068", "070", "071", "073" };
        string[] ArryPrdFac1M = { "1101" };
        string[] ArryPrdFac1A = { "1102" };
        string[] ArryPrdFac2 = { "1201", "1202", "1301", "1302", "1401", "1402" };
        string[] ArryPrdFac2M = { "1201" };
        string[] ArryPrdFac2A = { "1202" };
        string[] ArryPrdFac2Mo = { "1401" };
        string[] ArryPrdFac2MoA = { "1402" };
        string[] ArryPrdSCA = { "1301", "1302" };
        string[] ArryPrdSCRM = { "1301" };
        string[] ArryPrdSCRA = { "1302" };
        string[] ArryPrdFac3 = { "1701", "1702" };
        string[] ArryPrdFac3M = { "1701" };
        string[] ArryPrdMachine = {"306","307","308","304","310","302","301","303"};
        string[] ArryPrdMachineFac3 = { "MPFAC3CY", "MPFAC3CS", "MPFAC3FH", "MPFAC3RH", "MPFAC3PI", "MPFAC3MOT", "MPFAC3MA", "MPFAC3AS", "MPFAC3FIN" };
        string[] ArryPrdFac3CY = { "305" };
        string[] ArryPrdFac3CS = { "306" };
        string[] ArryPrdFac3CP = { "312" };
        string[] ArryPrdFac3FH = { "307" };
        string[] ArryPrdFac3RH = { "304" };
        string[] ArryPrdFac3PI = { "308" };
        string[] ArryPrdFac3MOT = { "310" };
        string[] ArryPrdFac3MA = { "302" };
        string[] ArryPrdFac3AS = { "301" };
        string[] ArryPrdFac3FIN = { "303" };
        string[] ArryPrdFac3OTHER = { "RE%","PRE%","RW%"};
        //,"%RW%","%RE%","%PRE%" };

       
        string[] ArryPrdFac3A = { "1702" };
        string[] ArryPrdODM = { "1501" };

        string[] ArryPeriod = { "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod1 = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod2 = { "PRD_JAN", "PRD_FEB", "PRD_MAR", "PRD_APR", "PRD_MAY", "PRD_JUN", "PRD_JUL", "PRD_AUG", "PRD_SEP", "PRD_OCT", "PRD_NOV", "PRD_DEC" };

        int[] ArryDay = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 };
        int[] ArryMonth = { 4, 5, 6, 7, 8, 9, 10, 11, 12 };

        int[] ArryMonth1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };


        string pAccGroup = "EXP";
        string pBudgetType = "DI";
        string pYear = _DataDate.ToString("yyyy");
        string pMonth = _DataDate.ToString("MM");
      //  DateTime _ThisYear = new DateTime();
        DateTime _LastYear = new DateTime();
        DateTime _Last2Year = new DateTime();
        DateTime _Last3Year = new DateTime();
       // _ThisYear = _DataDate.Year;
        _LastYear = _DataDate.AddYears(-1);
        _Last2Year = _DataDate.AddYears(-2);
        _Last3Year = _DataDate.AddYears(-3);
        string pLastYear = _LastYear.ToString("yyyy");
        string pLast2Year = _Last2Year.ToString("yyyy");
        string pLast3Year = _Last3Year.ToString("yyyy");
       // string ThisYear = _ThisYear.tostring("yyyy");
        string TxtModel = " ";


        int PresentYear = Convert.ToInt16(_DataDate.Year);

        string Factory = "";
        string Txt_Type = "";


        #region init



        int[] _PrdActual = new int[12];

        string[] ArrySeires5 = new string[5];
        Decimal[] ArrySeiresValue5 = new Decimal[5];



        #endregion

        string[] ArryLoop = new string[0];
        string ProductType = "";
        string TargetType = "";
       
               if ((_Type == "MPFAC3OTH" || _Type == "MPFAC3OTHPrev" || _Type == "MPFAC3OTHPrev2" || _Type == "MPFAC3OTHPrev3")) 
        {
            ArryLoop = ArryPrdFac3OTHER;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            Factory = "3";
            Txt_Type = "FAC3OTH";
        }
      



        DateTime strDate = new DateTime(DateTime.Now.Year, _Month, 1, 0, 0, 0);
        DateTime endDate = strDate.AddMonths(1).Date + new TimeSpan(0, 0, 0);

        DateTime strHr = DateTime.Today + new TimeSpan(08, 00, 00);
        DateTime dateEnd = DateTime.Today + new TimeSpan(20, 00, 00);
        DateTime Endtoday = DateTime.Now;
        DateTime EndYesterday = DateTime.Today - new TimeSpan(24, 00, 00);

        int YearSelect = _Year;
        int MonthSelect = _Month;
        int MonthPresent = Endtoday.Month;
        int PrevMonth = _Month - 1;
        int NextMonth = _Month + 1;



        //DataTable dtWorkingHour = new DataTable();
        //dtWorkingHour.Columns.Add("Position", typeof(string));
        //dtWorkingHour.Columns.Add("OT1", typeof(string));
        //dtWorkingHour.Columns.Add("OT15", typeof(string));
        //dtWorkingHour.Columns.Add("OT2", typeof(string));
        //dtWorkingHour.Columns.Add("OT3", typeof(string));
        //string[] arrPotition = { "OP", "LE", "FO", "SU" };
        //foreach (string item in arrPotition)
        //{
        //    dtWorkingHour.Rows.Add(item, "", "", "", "");
        //}


        //------------- Create column header OT  -----------------


        DataTable dtBCPD = new DataTable();
        dtBCPD.Columns.Add("Fiscal_year", typeof(string));
        dtBCPD.Columns.Add("ProductType", typeof(string));
        dtBCPD.Columns.Add("PRD_JAN", typeof(string));
        dtBCPD.Columns.Add("PRD_FEB", typeof(string));
        dtBCPD.Columns.Add("PRD_MAR", typeof(string));
        dtBCPD.Columns.Add("PRD_APR", typeof(string));
        dtBCPD.Columns.Add("PRD_MAY", typeof(string));
        dtBCPD.Columns.Add("PRD_JUN", typeof(string));
        dtBCPD.Columns.Add("PRD_JUL", typeof(string));
        dtBCPD.Columns.Add("PRD_AUG", typeof(string));
        dtBCPD.Columns.Add("PRD_SEP", typeof(string));
        dtBCPD.Columns.Add("PRD_OCT", typeof(string));
        dtBCPD.Columns.Add("PRD_NOV", typeof(string));
        dtBCPD.Columns.Add("PRD_DEC", typeof(string));
        DateTime setDate1 = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sqlBCPD = new SqlCommand();
        sqlBCPD.CommandText = "SELECT Fiscal_year " +
            " ,ProductType,PRD_APR,PRD_MAY,PRD_JUN,PRD_JUL,PRD_AUG " +
            " ,PRD_SEP,PRD_OCT,PRD_NOV,PRD_DEC,PRD_JAN,PRD_FEB,PRD_MAR,Total_PRD " +
           " from BC_PRODUCTION " +
           " where [Fiscal_year] = " + setDate1.Year;


        // int LBCSPD = 0;
        double Prd = 0, Prd1 = 0, Prd2 = 0, Prd3 = 0, Prd4 = 0, Prd5 = 0, Prd6 = 0, Prd7 = 0;
        double Prd8 = 0, Prd9 = 0, Prd10 = 0, Prd11 = 0, Prd12 = 0, SumPrd = 0, SumPrdOverAll = 0, PrdMonth = 0, SumPrdMonth = 0;
        DataTable dt1 = oConn.SqlGet(sqlBCPD, "DBBCS");
        foreach (DataRow item in dt1.Rows)
        {
            DataRow _rowBCSPD = dtBCPD.NewRow();
            _rowBCSPD["Fiscal_year"] = item["Fiscal_year"].ToString();
            _rowBCSPD["ProductType"] = item["ProductType"].ToString();
            _rowBCSPD["PRD_JAN"] = item["PRD_JAN"];
            _rowBCSPD["PRD_FEB"] = item["PRD_FEB"];
            _rowBCSPD["PRD_MAR"] = item["PRD_MAR"];
            _rowBCSPD["PRD_APR"] = item["PRD_APR"];
            _rowBCSPD["PRD_MAY"] = item["PRD_MAY"];
            _rowBCSPD["PRD_JUN"] = item["PRD_JUN"];
            _rowBCSPD["PRD_JUL"] = item["PRD_JUL"];
            _rowBCSPD["PRD_AUG"] = item["PRD_AUG"];
            _rowBCSPD["PRD_SEP"] = item["PRD_SEP"];
            _rowBCSPD["PRD_OCT"] = item["PRD_OCT"];
            _rowBCSPD["PRD_NOV"] = item["PRD_NOV"];
            _rowBCSPD["PRD_DEC"] = item["PRD_DEC"];
            dtBCPD.Rows.Add(_rowBCSPD);
        }


        //---------------- Get Employeee of Line --------------


        DataTable dtAndon = new DataTable();
        dtAndon.Columns.Add("LineCode", typeof(string));
        dtAndon.Columns.Add("LineName", typeof(string));
        dtAndon.Columns.Add("BoardId", typeof(string));
        dtAndon.Columns.Add("LineGroup", typeof(string));
        DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);
        DateTime setyesterday = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sql = new SqlCommand();

        if (_Type == "ALL")
        {

            txtCostCenter = ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1] +
              " or [COSTCENTER] = " + ArryLoop[2] + " or [COSTCENTER] = " + ArryLoop[3] +
               " or [COSTCENTER] = " + ArryLoop[4] + " or [COSTCENTER] = " + ArryLoop[5] +
               " or [COSTCENTER] = " + ArryLoop[6] + " or [COSTCENTER] = " + ArryLoop[7] +
            " or [COSTCENTER] = " + ArryLoop[8] + " or [COSTCENTER] = " + ArryLoop[9] +
            " or [COSTCENTER] = " + ArryLoop[10];



        }
        if (_Type == "MPFAC3OTH" || _Type == "MPFAC3OTHPrev" || _Type == "MPFAC3OTHPrev2" || _Type == "MPFAC3OTHPrev3")
        {

                    txtCostCenter = "'" + ArryLoop[0] + "' or  Andon like " + "'" + ArryLoop[1] + "' or Andon like " + "'" + ArryLoop[2] + "'";
        }
        

        sql.CommandText = " Select LineCode,LineName,BoardId,LineGroup, " +
                       " PdModel,Factory " +
                       "  FROM PD_LineMstr where factory = '" + Factory + "' " +
                       " order by boardid  ";


        int ii = 0;
        DataTable dt = oConn.SqlGet(sql, "DBPDB");
        foreach (DataRow item in dt.Rows)
        {
            DataRow _rowAndon = dtAndon.NewRow();
            if ((item["LineCode"].ToString() != "") && (item["BoardId"].ToString() != "" && item["BoardId"].ToString() != "-"))
            {
                _rowAndon["LineCode"] = item["LineCode"].ToString();
                _rowAndon["LineName"] = item["LineName"].ToString();
                _rowAndon["BoardId"] = item["BoardId"].ToString();
                _rowAndon["LineGroup"] = item["LineGroup"].ToString();
                dtAndon.Rows.Add(_rowAndon);
            }
        }
        string txtAndon = "";
        int Loopj = 0;
        string sqlandon = " andon like ";
        if (dtAndon.Rows.Count > 0)
        {

            foreach (DataRow _rowMP in dtAndon.Rows)
            {

                if (Loopj == dtAndon.Rows.Count - 1)
                {
                    txtAndon += sqlandon + "'%" + _rowMP["BoardId"].ToString();
                }
                else
                {
                    txtAndon += sqlandon + "'%" + _rowMP["BoardId"].ToString() + "%' or ";

                }
                Loopj += 1;
            }
        }

        //  lbMP.Text = dtEmp.Rows.Count.ToString();
        //---------------- Get Employeee of Line --------------        

        //----------------- Create row content Manpower ------------------

        MMPInfo.MPAllChartInfo oItemMPP = new MMPInfo.MPAllChartInfo();

        int accuOP1 = 0, accuOP15 = 0, accuOP2 = 0, accuOP3 = 0, CountMPOP = 1, CountMPOP_D = 0, CountMPOP_N = 0, REQ_MPOP_D = 0, REQ_MPOP_N = 0;
        int accuLE1 = 0, accuLE15 = 0, accuLE2 = 0, accuLE3 = 0, CountMPLE = 1, CountMPLE_D = 0, CountMPLE_N = 0, REQ_MPLE_D = 0, REQ_MPLE_N = 0; ;
        int accuFO1 = 0, accuFO15 = 0, accuFO2 = 0, accuFO3 = 0, CountMPFO = 1, CountMPFO_D = 0, CountMPFO_N = 0, REQ_MPFO_D = 0, REQ_MPFO_N = 0;
        int accuSU1 = 0, accuSU15 = 0, accuSU2 = 0, accuSU3 = 0, CountMPSU = 1, CountMPSU_D = 0, CountMPSU_N = 0, REQ_MPSU_D = 0, REQ_MPSU_N = 0;
        int CountMPOTREQD = 1, CountMPOTREQN = 1, SumMPReqD = 1, SumMPReqN = 1, CountMPN = 1, CountMPH = 1, SumMP = 1;
        int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
        int SumFOLE_ACTD = 0, SumFOLE_ACTN = 0, SumLEOT_ReqD = 0, SumLEOT_ReqN = 0, SumLEOT_ActD = 0, SumLEOT_ActN = 0;

        double CostOverAllSum = 0;

        //---------------- Get Employeee of Line --------------
        DataTable dtMNOT = new DataTable();

        dtMNOT.Columns.Add("Fiscal_year", typeof(string));
        dtMNOT.Columns.Add("Monthly", typeof(string));
        dtMNOT.Columns.Add("Daily", typeof(string));
        dtMNOT.Columns.Add("ProductType", typeof(string));

        dtMNOT.Columns.Add("STD_MPDay", typeof(string));
        dtMNOT.Columns.Add("ACT_MPDay", typeof(string));
        dtMNOT.Columns.Add("STD_MPNight", typeof(string));
        dtMNOT.Columns.Add("ACT_MPNight", typeof(string));

        dtMNOT.Columns.Add("STD_OTDay", typeof(string));
        dtMNOT.Columns.Add("REQ_OTDay", typeof(string));
        dtMNOT.Columns.Add("ACT_OTDay", typeof(string));

        dtMNOT.Columns.Add("STD_OTNight", typeof(string));
        dtMNOT.Columns.Add("REQ_OTNight", typeof(string));
        dtMNOT.Columns.Add("ACT_OTNight", typeof(string));



        SqlCommand sqlMNOT = new SqlCommand();


        sqlMNOT.CommandText = "SELECT Fiscal_year,Monthly,Daily,ProductType,STD_MPDay,ACT_MPDay" +
            " ,STD_MPNight,ACT_MPNight,STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight" +
           " FROM BC_MANPOWER where Fiscal_year = '" + _Year + "' and  Monthly = '" + MonthSelect + "' and ProductType ='" + Txt_Type + "' " +
           " order by daily ";



        DataTable dtMOT = oConn.SqlGet(sqlMNOT, "DBBCS");

        if (dtMOT.Rows.Count > 0)
        {
            foreach (DataRow item in dtMOT.Rows)
            {
                DataRow _rowMNOT = dtMNOT.NewRow();
                _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                _rowMNOT["Monthly"] = item["Monthly"].ToString();
                _rowMNOT["Daily"] = item["Daily"].ToString();
                _rowMNOT["ProductType"] = item["ProductType"].ToString();
                _rowMNOT["STD_MPDay"] = item["STD_MPDay"].ToString();
                _rowMNOT["ACT_MPDay"] = item["ACT_MPDay"].ToString();
                _rowMNOT["STD_MPNight"] = item["STD_MPNight"].ToString();
                _rowMNOT["ACT_MPNight"] = item["ACT_MPNight"].ToString();
                _rowMNOT["STD_OTDay"] = item["STD_OTDay"].ToString();
                _rowMNOT["REQ_OTDay"] = item["REQ_OTDay"].ToString();
                _rowMNOT["ACT_OTDay"] = item["ACT_OTDay"].ToString();
                _rowMNOT["STD_OTNight"] = item["STD_OTNight"].ToString();
                _rowMNOT["REQ_OTNight"] = item["REQ_OTNight"].ToString();
                _rowMNOT["ACT_OTNight"] = item["ACT_OTNight"].ToString();

                dtMNOT.Rows.Add(_rowMNOT);
            }

        }


        //** Productivity End


        int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;
        int LECount_D = 0, LECount_N = 0, FOCount_D = 0, FOCount_N = 0; ;
        int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;
        string DatetoDay = "";

        if (dtMNOT.Rows.Count > 0)
        {
            if ((MonthSelect == MonthPresent) && (_Type == "MPFAC3OTH" || _Type == "MPFAC3OTHPrev" || _Type == "MPFAC3OTHPrev2" || _Type == "MPFAC3OTHPrev3"))
            {

                int idxMP = 0;
                //--------------- Get Employee working Time ---------------------
                DataTable dtempWorkingTime = new DataTable();

                //int SumOT1 = 0, OT1 = 0, OT15 = 0, OT2 = 0, OT3 = 0;
                int SUMMPD = 0, DOT1 = 0, DOT15 = 0, DOT2 = 0, DOT3 = 0, SDOT1 = 0, SDOT15 = 0, SDOT2 = 0, SDOT3 = 0;
                int SUMMPN = 0, HOT1 = 0, HOT15 = 0, HOT2 = 0, HOT3 = 0, SHOT1 = 0, SHOT15 = 0, SHOT2 = 0, SHOT3 = 0;
                int SUMMPH = 0, NOT1 = 0, NOT15 = 0, NOT2 = 0, NOT3 = 0, SNOT1 = 0, SNOT15 = 0, SNOT2 = 0, SNOT3 = 0;



                DataTable dtWorkTime = new DataTable();
                dtWorkTime.Columns.Add("Code", typeof(string));
                dtWorkTime.Columns.Add("WorkDate", typeof(string));
                dtWorkTime.Columns.Add("POSIT", typeof(string));
                dtWorkTime.Columns.Add("OT1", typeof(int));
                dtWorkTime.Columns.Add("OT15", typeof(int));
                dtWorkTime.Columns.Add("OT2", typeof(int));
                dtWorkTime.Columns.Add("OT3", typeof(int));
                dtWorkTime.Columns.Add("SUMOT", typeof(int));
                dtWorkTime.Columns.Add("REQDOT1", typeof(int));
                dtWorkTime.Columns.Add("REQDOT15", typeof(int));
                dtWorkTime.Columns.Add("REQDOT2", typeof(int));
                dtWorkTime.Columns.Add("REQDOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMDOTREQ", typeof(int));
                dtWorkTime.Columns.Add("SUMMPReqD", typeof(int));
                dtWorkTime.Columns.Add("DOT1", typeof(int));
                dtWorkTime.Columns.Add("DOT15", typeof(int));
                dtWorkTime.Columns.Add("DOT2", typeof(int));
                dtWorkTime.Columns.Add("DOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMDOT", typeof(int));
                dtWorkTime.Columns.Add("SUMMPD", typeof(int));

                dtWorkTime.Columns.Add("REQNOT1", typeof(int));
                dtWorkTime.Columns.Add("REQNOT15", typeof(int));
                dtWorkTime.Columns.Add("REQNOT2", typeof(int));
                dtWorkTime.Columns.Add("REQNOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMNOTREQ", typeof(int));
                dtWorkTime.Columns.Add("SUMMPReqN", typeof(int));
                dtWorkTime.Columns.Add("NOT1", typeof(int));
                dtWorkTime.Columns.Add("NOT15", typeof(int));
                dtWorkTime.Columns.Add("NOT2", typeof(int));
                dtWorkTime.Columns.Add("NOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMNOT", typeof(int));
                dtWorkTime.Columns.Add("SUMMPN", typeof(int));

                dtWorkTime.Columns.Add("REQHOT1", typeof(int));
                dtWorkTime.Columns.Add("REQHOT15", typeof(int));
                dtWorkTime.Columns.Add("REQHOT2", typeof(int));
                dtWorkTime.Columns.Add("REQHOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMHOTREQ", typeof(int));
                dtWorkTime.Columns.Add("SUMMPReqH", typeof(int));
                dtWorkTime.Columns.Add("HOT1", typeof(int));
                dtWorkTime.Columns.Add("HOT15", typeof(int));
                dtWorkTime.Columns.Add("HOT2", typeof(int));
                dtWorkTime.Columns.Add("HOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMHOT", typeof(int));
                dtWorkTime.Columns.Add("SUMMPH", typeof(int));


                //--------------- Get Employee working Time ---------------------
                //int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
                int FlagUdate = 0;
                //int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;

                int Xdate = 0;
                int Yester = 0;
                int SUMOT_REQDD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
                int SUMOT_REQNN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
                int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
                int SUMMP_SHIFT = 0, SUMACT_MP = 0;
                //int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;
                int FlagInsert = 1;


                for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                {
                    //------------------ Monthly Present Update --------------------//
                    if (i >= 2)
                    {
                        Yester = i - 1;
                        setyesterday = new DateTime(DateTime.Now.Year, setDate.Month, Yester);

                    }
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);

                    if ((setDate >= EndYesterday) && (setDate <= dateEnd))
                    {
                        FlagUdate = 1;

                        //----------------- Fillter Working Time -------------
                        bool Working = false;

                        sql.CommandText = "SELECT e.Posit,WorkShift,WorkType,otr.OTFROM ,[WCode],[WDate],[WTime],[WDoor],es.[WType],LTRIM(DATEDIFF(MINUTE, 0, otr.OT1)) as OT1,LTRIM(DATEDIFF(MINUTE, 0, otr.OT15)) as OT15 " +
          ",LTRIM(DATEDIFF(MINUTE, 0, otr.OT2)) as OT2,LTRIM(DATEDIFF(MINUTE, 0, otr.OT3)) as OT3 " +
          " FROM [dbDCI].[dbo].[EmployeeTimeStamp] es " +
          " LEFT JOIN [dbDCI].[dbo].[Employee] e ON es.WCode = e.CODE " +
          " LEFT JOIN [dbDCI].[dbo].[EmployeeWorkingTime] wt ON es.WCode = wt.Code " +
          " LEFT JOIN [dbDCI].[dbo].[EMP_OTRQ] otr ON es.WCode = otr.CODE AND es.WDate = otr.ODATE " +
          " WHERE WDate >= '" + setDate.ToString("yyyy-MM-dd") + "' AND WDate <= '" + setDate.ToString("yyyy-MM-dd") + "' AND es.WType = 'O' " +
          " And OTFROM != ''" +
          "	AND CONVERT(DATE, wt.SystemOUT) = WDate " +
          //" and (CostCenter = " + txtCostCenter + " )" +
          " And  ( " + txtAndon + "' or andon ='' )" +
                            //" And  ( " + txtAndon + "')" +
          " order by WDate  desc";
                        //" And  ( " + txtAndon +  "' or andon ='' '"+ "')" +

                        DataTable dtt = oConn.SqlGet(sql, "DBDCI");
                        if (dtt.Rows.Count > 0)
                        {

                  

                            // *** Get ManPower OP
                            DataTable MPDataDirect = GetManPowerByOTHFac3(txtCostCenter);

                            //DataTable MPDataOP = GetManPowerByLineOP(txtAndon, "OP");
                            MPCount_D += Convert.ToInt16(MPDataDirect.Rows[0]["MP_D"]);
                            MPCount_N += Convert.ToInt16(MPDataDirect.Rows[0]["MP_N"]);



                            SumMP_ACTD += GetWorkActByOTHFac3Day(txtCostCenter, setDate);
                            SumMP_ACTN += GetWorkActByOTHFac3Night(txtCostCenter, setDate);

                            //-------OT Req, Actual Day,Night

                            SumOT_ReqD += GetOTReqByOTHFac3Day(txtCostCenter, setDate);
                            SumOT_ReqN += GetOTReqByOTHFac3Night(txtCostCenter, setDate);
                            SumOT_ActD += GetOTActByOTHFac3Day(txtCostCenter, setDate);
                            SumOT_ActN += GetOTActByOTHFac3Night(txtCostCenter, setDate);

                            SqlCommand sqlCheck = new SqlCommand();

                           
                            sqlCheck.CommandText = "SELECT * FROM BC_ManPower WHERE ProductType = " +
                           " '" + Txt_Type + "' and Fiscal_year = '" + _Year + "'" +
                               " and Monthly = '" + _Month + "' and Daily ='" + i + "'";
                            DataTable dtCheck = oConBCS.Query(sqlCheck);


                            if (dtCheck.Rows.Count > 0)
                            {

                                FlagInsert = 1;
                                SqlCommand UpdateMNOT = new SqlCommand();
                                UpdateMNOT.CommandText = "Update  BC_MANPOWER  " +
                                        " set STD_MPDay ='" + MPCount_D + "',ACT_MPDay ='" + SumMP_ACTD + "' " +
                                        ",STD_MPNight ='" + MPCount_N + "',ACT_MPNight ='" + SumMP_ACTN + "' " +
                                        ",STD_OTDay ='" + MPCount_D + "',REQ_OTDay ='" + SumOT_ReqD + "',ACT_OTDay = '" + SumOT_ActD + "'" +
                                        ",STD_OTNight ='" + MPCount_N + "',REQ_OTNight ='" + SumOT_ReqN + "',ACT_OTNight = '" + SumOT_ActN + "'" +
                                        "where  Fiscal_year ='" + _Year + "' and Monthly ='" + _Month + "' and Daily ='" + i + "' and ProductType ='" + Txt_Type + "'";

                                oConn.SqlExecute(UpdateMNOT, "DBBCS");

                            }
                            else
                            {
                                FlagInsert = 0;
                                SqlCommand InsertMNOT = new SqlCommand();

                                InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                              ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                              ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                              " VALUES ('" + _Year + "','" + _Month + "','" + i + "','" + Txt_Type + "' " +
                              ",'" + MPCount_D + "','" + SumMP_ACTD + "' " +
                              ",'" + MPCount_N + "','" + SumMP_ACTN + "' " +
                              ",'" + MPCount_D + "','" + SumOT_ReqD + "','" + SumOT_ActD + "' " +
                              ",'" + MPCount_N + "','" + SumOT_ReqN + "','" + SumOT_ActN + "')";
                                //}           



                                oConn.SqlExecute(InsertMNOT, "DBBCS");

                            }
                             

                        }
                        else
                        {


                          

                            SqlCommand sqlCheck = new SqlCommand();
                            sqlCheck.CommandText = "SELECT * FROM BC_ManPower WHERE ProductType = " +
                           " '" + Txt_Type + "' and Fiscal_year = '" + _Year + "'" +
                               " and Monthly = '" + _Month + "' and Daily ='" + i + "'";
                            DataTable dtCheck = oConBCS.Query(sqlCheck);
                            if (dtCheck.Rows.Count > 0)
                            {

                                FlagInsert = 1;
                                //for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                                //{

                                //if (dtAndon.Rows.Count > 0)
                                //{
                                
                                    DataTable dtMP = new DataTable();
                                      dtMP.Columns.Add("STD_MPDay", typeof(string));
                                      dtMP.Columns.Add("STD_MPNight", typeof(string));
                                      dtMP.Columns.Add("ACT_MPDay", typeof(string));
                                      dtMP.Columns.Add("ACT_MPNight", typeof(string));
                                      dtMP.Columns.Add("REQ_OTDay", typeof(string));
                                      dtMP.Columns.Add("REQ_OTNight", typeof(string));
                                      dtMP.Columns.Add("ACT_OTDay", typeof(string));
                                      dtMP.Columns.Add("ACT_OTNight", typeof(string));

                                        foreach (DataRow item in dtCheck.Rows)
                                        {

                                            if (i == Convert.ToInt16(item["Daily"].ToString()))
                                            {
                                            DataRow _rowMP = dtMP.NewRow();

                                            _rowMP["STD_MPDay"] = item["STD_MPDay"].ToString();
                                            _rowMP["STD_MPNight"] = item["STD_MPNight"].ToString();
                                            _rowMP["ACT_MPDay"] = item["ACT_MPDay"].ToString();
                                            _rowMP["ACT_MPNight"] = item["ACT_MPNight"].ToString();
                                            _rowMP["REQ_OTDay"] = item["REQ_OTDay"].ToString();
                                            _rowMP["REQ_OTNight"] = item["REQ_OTNight"].ToString();
                                            _rowMP["ACT_OTDay"] = item["ACT_OTDay"].ToString();
                                            _rowMP["ACT_OTNight"] = item["ACT_OTNight"].ToString();
                                            dtMP.Rows.Add(_rowMP);

                                            //if (i == Convert.ToInt16(item["Daily"].ToString()))
                                            //{
                                            // ** Man Power Attandance
                                            DatetoDay = i + ":" + setDate.DayOfWeek.ToString().Substring(0, 3);
                                            Xdate = i;

                                            //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                                            //  mManPower.SumMP_STD = SUMACT_MP;


                                            MPCount_D = Convert.ToInt16(item["STD_MPDay"].ToString());
                                            MPCount_N = Convert.ToInt16(item["STD_MPNight"].ToString());
                                            SumMP_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                                            SumMP_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());
                                            //SumMP_DIFFD = MPCount_D - SumMP_ACTD;
                                            //SumMP_DIFFN = MPCount_N - SumMP_ACTN;


                                            // ** OT Req,ACT
                                            SumOT_ReqD = Convert.ToInt16(item["REQ_OTDay"].ToString());
                                            SumOT_ReqN = Convert.ToInt16(item["REQ_OTNight"].ToString());
                                            SumOT_ActD = Convert.ToInt16(item["ACT_OTDay"].ToString());
                                            SumOT_ActN = Convert.ToInt16(item["ACT_OTNight"].ToString());
                                        }
                                    }
                               
                                //    }
                                //}
                            }
                            else
                            {
                                FlagInsert = 0;
                             

                                DataTable MPData1= GetManPowerByOTHFac3(txtCostCenter);
                                MPCount_D += Convert.ToInt16(MPData1.Rows[0]["MP_D"]);
                                MPCount_N += Convert.ToInt16(MPData1.Rows[0]["MP_N"]);


                                //------Actual Work by Line Day,Night
                                SumFOLE_ACTD += GetWorkActByOTHFac3Day(txtCostCenter, setDate);
                                SumFOLE_ACTN += GetWorkActByOTHFac3Night(txtCostCenter, setDate);

                                //-------OT Req, Actual Day,Night

                                SumOT_ReqD += GetOTReqByOTHFac3Day(txtCostCenter, setDate);
                                SumOT_ReqN += GetOTReqByOTHFac3Night(txtCostCenter, setDate);
                                SumOT_ActD += GetOTActByOTHFac3Day(txtCostCenter, setDate);
                                SumOT_ActN += GetOTActByOTHFac3Night(txtCostCenter, setDate);

                            }
                        }
                    }
                    else
                    {
                        SqlCommand sqlCheck = new SqlCommand();
                        sqlCheck.CommandText = "SELECT * FROM BC_ManPower WHERE ProductType = " +
                       " '" + Txt_Type + "' and Fiscal_year = '" + _Year + "'" +
                           " and Monthly = '" + _Month + "' and Daily ='" + i + "'";
                        DataTable dtCheck = oConBCS.Query(sqlCheck);
                        if (dtCheck.Rows.Count > 0)
                        {

                            FlagInsert = 1;
                            //for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                            //{
                            DataTable dtMP = new DataTable();
                            dtMP.Columns.Add("STD_MPDay", typeof(string));
                            dtMP.Columns.Add("STD_MPNight", typeof(string));
                            dtMP.Columns.Add("ACT_MPDay", typeof(string));
                            dtMP.Columns.Add("ACT_MPNight", typeof(string));
                            dtMP.Columns.Add("REQ_OTDay", typeof(string));
                            dtMP.Columns.Add("REQ_OTNight", typeof(string));
                            dtMP.Columns.Add("ACT_OTDay", typeof(string));
                            dtMP.Columns.Add("ACT_OTNight", typeof(string));

                            foreach (DataRow item in dtCheck.Rows)
                            {

                                if (i == Convert.ToInt16(item["Daily"].ToString()))
                                {
                                    DataRow _rowMP = dtMP.NewRow();

                                    _rowMP["STD_MPDay"] = item["STD_MPDay"].ToString();
                                    _rowMP["STD_MPNight"] = item["STD_MPNight"].ToString();
                                    _rowMP["ACT_MPDay"] = item["ACT_MPDay"].ToString();
                                    _rowMP["ACT_MPNight"] = item["ACT_MPNight"].ToString();
                                    _rowMP["REQ_OTDay"] = item["REQ_OTDay"].ToString();
                                    _rowMP["REQ_OTNight"] = item["REQ_OTNight"].ToString();
                                    _rowMP["ACT_OTDay"] = item["ACT_OTDay"].ToString();
                                    _rowMP["ACT_OTNight"] = item["ACT_OTNight"].ToString();
                                    dtMP.Rows.Add(_rowMP);

                                    //if (i == Convert.ToInt16(item["Daily"].ToString()))
                                    //{
                                    // ** Man Power Attandance
                                    DatetoDay = i + ":" + setDate.DayOfWeek.ToString().Substring(0, 3);
                                    Xdate = i;

                                    //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                                    //  mManPower.SumMP_STD = SUMACT_MP;


                                    MPCount_D = Convert.ToInt16(item["STD_MPDay"].ToString());
                                    MPCount_N = Convert.ToInt16(item["STD_MPNight"].ToString());
                                    SumMP_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                                    SumMP_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());
                                    //SumMP_DIFFD = MPCount_D - SumMP_ACTD;
                                    //SumMP_DIFFN = MPCount_N - SumMP_ACTN;


                                    // ** OT Req,ACT
                                    SumOT_ReqD = Convert.ToInt16(item["REQ_OTDay"].ToString());
                                    SumOT_ReqN = Convert.ToInt16(item["REQ_OTNight"].ToString());
                                    SumOT_ActD = Convert.ToInt16(item["ACT_OTDay"].ToString());
                                    SumOT_ActN = Convert.ToInt16(item["ACT_OTNight"].ToString());
                                }
                            }
                            SqlCommand UpdateMNOT = new SqlCommand();
                            UpdateMNOT.CommandText = "Update  BC_MANPOWER  " +
                                    " set STD_MPDay ='" + MPCount_D + "',ACT_MPDay ='" + SumMP_ACTD + "' " +
                                    ",STD_MPNight ='" + MPCount_N + "',ACT_MPNight ='" + SumMP_ACTN + "' " +
                                    ",STD_OTDay ='" + MPCount_D + "',REQ_OTDay ='" + SumOT_ReqD + "',ACT_OTDay = '" + SumOT_ActD + "'" +
                                    ",STD_OTNight ='" + MPCount_N + "',REQ_OTNight ='" + SumOT_ReqN + "',ACT_OTNight = '" + SumOT_ActN + "'" +
                                    "where  Fiscal_year ='" + _Year + "' and Monthly ='" + _Month + "' and Daily ='" + i + "' and ProductType ='" + Txt_Type + "'";

                            oConn.SqlExecute(UpdateMNOT, "DBBCS");

                           
                        }
                        else
                        {
                            FlagInsert = 0;
                        

                            DataTable MPData2 = GetManPowerByOTHFac3(txtCostCenter);
                            MPCount_D += Convert.ToInt16(MPData2.Rows[0]["MP_D"]);
                            MPCount_N += Convert.ToInt16(MPData2.Rows[0]["MP_N"]);


                            //------Actual Work by Line Day,Night
                            SumMP_ACTD += GetWorkActByOTHFac3Day(txtCostCenter, setDate);
                            SumMP_ACTN += GetWorkActByOTHFac3Night(txtCostCenter, setDate);

                            //-------OT Req, Actual Day,Night

                            SumOT_ReqD += GetOTReqByOTHFac3Day(txtCostCenter, setDate);
                            SumOT_ReqN += GetOTReqByOTHFac3Night(txtCostCenter, setDate);
                            SumOT_ActD += GetOTActByOTHFac3Day(txtCostCenter, setDate);
                            SumOT_ActN += GetOTActByOTHFac3Night(txtCostCenter, setDate);

                            SqlCommand InsertMNOT = new SqlCommand();

                            InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                          ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                          ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                          " VALUES ('" + _Year + "','" + _Month + "','" + i + "','" + Txt_Type + "' " +
                          ",'" + MPCount_D + "','" + SumMP_ACTD + "' " +
                          ",'" + MPCount_N + "','" + SumMP_ACTN + "' " +
                          ",'" + MPCount_D + "','" + SumOT_ReqD + "','" + SumOT_ActD + "' " +
                          ",'" + MPCount_N + "','" + SumOT_ReqN + "','" + SumOT_ActN + "')";
                            //}           



                            oConn.SqlExecute(InsertMNOT, "DBBCS");

                        }
                    }//exit Check EndYesterday

                    if ((setDate <= dateEnd) &&  (_Type == "MPFAC3OTH" || _Type == "MPFAC3OTHPrev" || _Type == "MPFAC3OTHPrev2" || _Type == "MPFAC3OTHPrev3"))
                    {
                        //*****  Data for MP, OT Req and Actual                  
                        MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                        //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                        DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);

                        // ** Man Power Attandance
                        mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                        mManPower.Xdate = i;


                        mManPower.SumMPD = MPCount_D;
                        mManPower.SumMPN = MPCount_N;

                        SumMP_ACTD += SumFOLE_ACTD;
                        SumMP_ACTN += SumFOLE_ACTN;

                        mManPower.SumMP_ACTD = SumMP_ACTD;
                        mManPower.SumMP_ACTN = SumMP_ACTN;

                        if (SumMP_ACTD != 0)
                        {
                            mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                        }
                        else
                        {
                            mManPower.SumMP_DIFFD = 0;

                        }

                        if (SumMP_ACTN != 0)
                        {

                            mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                        }
                        else
                        {

                            mManPower.SumMP_DIFFN = 0;
                        }

                        // ** OT Req,ACT


                        mManPower.SumOT_ReqD = SumOT_ReqD;
                        mManPower.SumOT_ReqN = SumOT_ReqN;
                        mManPower.SumOT_ActD = SumOT_ActD;
                        mManPower.SumOT_ActN = SumOT_ActN;

                        oListMP.Add(mManPower);
                    }

                    //    if (((FlagInsert == 1) && (setDate >= EndYesterday) && (setDate <= dateEnd) ) && ((_Type == "MPFAC3CY") || (_Type == "MPFAC3CP") || (_Type == "MPFAC3CS") || (_Type == "MPFAC3FH") || (_Type == "MPFAC3RH") ||
                    //(_Type == "MPFAC3PI") || (_Type == "MPFAC3MOT") || (_Type == "MPFAC3MA") ||
                    //(_Type == "MPFAC3AS") || (_Type == "MPFAC3FIN")))
                    //    {

                    //        SqlCommand UpdateMNOT = new SqlCommand();
                    //        UpdateMNOT.CommandText = "Update  BC_MANPOWER  " +
                    //                " set STD_MPDay ='" + MPCount_D + "',ACT_MPDay ='" + SumMP_ACTD + "' " +
                    //                ",STD_MPNight ='" + MPCount_N + "',ACT_MPNight ='" + SumMP_ACTN + "' " +
                    //                ",STD_OTDay ='" + MPCount_D + "',REQ_OTDay ='" + SumOT_ReqD + "',ACT_OTDay = '" + SumOT_ActD + "'" +
                    //                ",STD_OTNight ='" + MPCount_N + "',REQ_OTNight ='" + SumOT_ReqN + "',ACT_OTNight = '" + SumOT_ActN + "'" +
                    //                "where  Fiscal_year ='" + _Year + "' and Monthly ='" + _Month + "' and Daily ='" + i + "' and ProductType ='" + Txt_Type + "'";

                    //        oConn.SqlExecute(UpdateMNOT, "DBBCS");
                    //    }
                    //    else if ((FlagInsert == 0) && (_Type == "MPFAC3CY") || (_Type == "MPFAC3CP") || (_Type == "MPFAC3CS") || (_Type == "MPFAC3FH") || (_Type == "MPFAC3RH") ||
                    //(_Type == "MPFAC3PI") || (_Type == "MPFAC3MOT") || (_Type == "MPFAC3MA") ||
                    //(_Type == "MPFAC3AS") || (_Type == "MPFAC3FIN"))
                    //    {

                    //        SqlCommand InsertMNOT = new SqlCommand();

                    //        InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                    //            ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                    //            ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                    //            " VALUES ('" + _Year + "','" + _Month + "','" + i + "','" + Txt_Type + "' " +
                    //            ",'" + MPCount_D + "','" + SumMP_ACTD + "' " +
                    //            ",'" + MPCount_N + "','" + SumMP_ACTN + "' " +
                    //            ",'" + MPCount_D + "','" + SumOT_ReqD + "','" + SumOT_ActD + "' " +
                    //            ",'" + MPCount_N + "','" + SumOT_ReqN + "','" + SumOT_ActN + "')";
                    //        //}           



                    //        oConn.SqlExecute(InsertMNOT, "DBBCS");


                    //   // }
                    //}
                    //else
                    if ((setDate > dateEnd) && (_Type == "MPFAC3OTH" || _Type == "MPFAC3OTHPrev" || _Type == "MPFAC3OTHPrev2" || _Type == "MPFAC3OTHPrev3"))
                    {
                        //*****  Data for MP, OT Req and Actual                  
                        MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                        //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                        DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);
                        // ** Man Power Attandance
                        mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                        mManPower.Xdate = i;

                        mManPower.SumMPD = 0;
                        mManPower.SumMPN = 0;

                        SumMP_ACTD += 0;
                        SumMP_ACTN += 0;

                        mManPower.SumMP_ACTD = 0;
                        mManPower.SumMP_ACTN = 0;
                        mManPower.SumMP_DIFFD = 0;
                        mManPower.SumMP_DIFFN = 0;

                        // ** OT Req,ACT

                     

                        mManPower.SumOT_ReqD = 0;
                        mManPower.SumOT_ReqN = 0;
                        mManPower.SumOT_ActD = 0;
                        mManPower.SumOT_ActN = 0;

                        oListMP.Add(mManPower);

                    }

                    MPCount_D = 0;
                    MPCount_N = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;

                    SumMP_ACTN = 0;
                    SumOT_ReqD = 0;
                    SumOT_ReqN = 0;
                    SumOT_ActD = 0;
                    SumOT_ActN = 0;
                    MPFOLE_ALL = 0;

                    SumMP_ACTN = 0;
                    SumOT_ActD = 0;
                    SumOT_ActN = 0;
                    SUMMPD = 0;
                    SUMMPN = 0;
                    SUMOT_REQNN = 0;
                    SUMOT_REQDD = 0;
                    SUMOT_ACTD = 0;
                    SUMOT_ACTN = 0;
                    MPFOLE_D = 0;
                    MPFOLE_N = 0;
                    LECount_D = 0;
                    LECount_N = 0;
                    FOCount_D = 0;
                    FOCount_N = 0;
                    SumFOLE_ACTD = 0;
                    SumFOLE_ACTN = 0;
                    FlagInsert = 1;


                    //} //exit Check EndYesterday
                }// exit loop
            }
            else
            {

                //------------------Not have data for  OT Req --------------------//

                int Xdate = 0;
                int Yester = 0;
                int SUMOT_REQD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
                int SUMOT_REQN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
                int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
                int SUMMP_SHIFT = 0, SUMACT_MP = 0;
                //int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;

                for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                {


                    foreach (DataRow item in dtMNOT.Rows)
                    {

                        if (i == Convert.ToInt16(item["Daily"].ToString()))
                        {
                            // ** Man Power Attandance
                            DatetoDay = i + ":" + setDate.DayOfWeek.ToString().Substring(0, 3);
                            Xdate = i;

                            MPCount_D = Convert.ToInt16(item["STD_MPDay"].ToString());
                            MPCount_N = Convert.ToInt16(item["STD_MPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());


                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["REQ_OTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["REQ_OTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["ACT_OTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["ACT_OTNight"].ToString());
                        }
                    }





                    //*****  Data for MP, OT Req and Actual                  
                    MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();




                    // ** Man Power Attandance
                    mManPower.DatetoDay = DatetoDay;
                    mManPower.Xdate = Xdate;

                  


                    mManPower.SumMPD = MPCount_D;
                    mManPower.SumMPN = MPCount_N;

                  

                    mManPower.SumMP_ACTD = SumMP_ACTD;
                    mManPower.SumMP_ACTN = SumMP_ACTN;

                    if (SumMP_ACTD != 0)
                    {
                        mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                    }
                    else
                    {
                        mManPower.SumMP_DIFFD = 0;

                    }

                    if (SumMP_ACTN != 0)
                    {

                        mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                    }
                    else
                    {

                        mManPower.SumMP_DIFFN = 0;
                    }



                    // ** OT Req,ACT

                 

                    mManPower.SumOT_ReqD = SumOT_ReqD;
                    mManPower.SumOT_ReqN = SumOT_ReqN;
                    mManPower.SumOT_ActD = SumOT_ActD;
                    mManPower.SumOT_ActN = SumOT_ActN;


                    oListMP.Add(mManPower);

                }

            }

        }
        else
        {

            //------------------ Man-Power Daily for New Record or Erase Record to Insert---------------//

            int idxMP = 0;
            //--------------- Get Employee working Time ---------------------
            DataTable dtempWorkingTime = new DataTable();

          
            //int SumOT1 = 0, OT1 = 0, OT15 = 0, OT2 = 0, OT3 = 0;
            int SUMMPD = 0, DOT1 = 0, DOT15 = 0, DOT2 = 0, DOT3 = 0, SDOT1 = 0, SDOT15 = 0, SDOT2 = 0, SDOT3 = 0;
            int SUMMPN = 0, HOT1 = 0, HOT15 = 0, HOT2 = 0, HOT3 = 0, SHOT1 = 0, SHOT15 = 0, SHOT2 = 0, SHOT3 = 0;
            int SUMMPH = 0, NOT1 = 0, NOT15 = 0, NOT2 = 0, NOT3 = 0, SNOT1 = 0, SNOT15 = 0, SNOT2 = 0, SNOT3 = 0;



            DataTable dtWorkTime = new DataTable();
            dtWorkTime.Columns.Add("Code", typeof(string));
            dtWorkTime.Columns.Add("WorkDate", typeof(string));
            dtWorkTime.Columns.Add("POSIT", typeof(string));
            dtWorkTime.Columns.Add("OT1", typeof(int));
            dtWorkTime.Columns.Add("OT15", typeof(int));
            dtWorkTime.Columns.Add("OT2", typeof(int));
            dtWorkTime.Columns.Add("OT3", typeof(int));
            dtWorkTime.Columns.Add("SUMOT", typeof(int));
            dtWorkTime.Columns.Add("REQDOT1", typeof(int));
            dtWorkTime.Columns.Add("REQDOT15", typeof(int));
            dtWorkTime.Columns.Add("REQDOT2", typeof(int));
            dtWorkTime.Columns.Add("REQDOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMDOTREQ", typeof(int));
            dtWorkTime.Columns.Add("SUMMPReqD", typeof(int));
            dtWorkTime.Columns.Add("DOT1", typeof(int));
            dtWorkTime.Columns.Add("DOT15", typeof(int));
            dtWorkTime.Columns.Add("DOT2", typeof(int));
            dtWorkTime.Columns.Add("DOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMDOT", typeof(int));
            dtWorkTime.Columns.Add("SUMMPD", typeof(int));

            dtWorkTime.Columns.Add("REQNOT1", typeof(int));
            dtWorkTime.Columns.Add("REQNOT15", typeof(int));
            dtWorkTime.Columns.Add("REQNOT2", typeof(int));
            dtWorkTime.Columns.Add("REQNOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMNOTREQ", typeof(int));
            dtWorkTime.Columns.Add("SUMMPReqN", typeof(int));
            dtWorkTime.Columns.Add("NOT1", typeof(int));
            dtWorkTime.Columns.Add("NOT15", typeof(int));
            dtWorkTime.Columns.Add("NOT2", typeof(int));
            dtWorkTime.Columns.Add("NOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMNOT", typeof(int));
            dtWorkTime.Columns.Add("SUMMPN", typeof(int));

            dtWorkTime.Columns.Add("REQHOT1", typeof(int));
            dtWorkTime.Columns.Add("REQHOT15", typeof(int));
            dtWorkTime.Columns.Add("REQHOT2", typeof(int));
            dtWorkTime.Columns.Add("REQHOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMHOTREQ", typeof(int));
            dtWorkTime.Columns.Add("SUMMPReqH", typeof(int));
            dtWorkTime.Columns.Add("HOT1", typeof(int));
            dtWorkTime.Columns.Add("HOT15", typeof(int));
            dtWorkTime.Columns.Add("HOT2", typeof(int));
            dtWorkTime.Columns.Add("HOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMHOT", typeof(int));
            dtWorkTime.Columns.Add("SUMMPH", typeof(int));


            //--------------- Get Employee working Time ---------------------
            //int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
            int FlagUdate = 0;
            //int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;
            //string DatetoDay = "";
            int Xdate = 0;
            int Yester = 0;
            int SUMOT_REQD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
            int SUMOT_REQN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
            int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
            int SUMMP_SHIFT = 0, SUMACT_MP = 0;
            //int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;

            for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
            {

                if (i >= 2)
                {
                    Yester = i - 1;
                    setyesterday = new DateTime(DateTime.Now.Year, setDate.Month, Yester);

                }
                setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);




                //if ((setDate.ToString("yyyy-MM-dd") == EndYesterday.ToString("yyyy-MM-dd"))
                //    || (setyesterday.ToString("yyyy-MM-dd") == Endtoday.ToString("yyyy-MM-dd")))
                //if (setDate.ToString("yyyy-MM-dd") <= Endtoday.ToString("yyyy-MM-dd"))
                //if ((setDate >= EndYesterday) && (setDate <= Endtoday))
                //if (setDate <= Endtoday)
                //{
                //    FlagUdate = 1;

                //----------------- Fillter Working Time -------------
                bool Working = false;
              


                sql.CommandText = "SELECT e.Posit,WorkShift,WorkType,otr.OTFROM ,[WCode],[WDate],[WTime],[WDoor],es.[WType],LTRIM(DATEDIFF(MINUTE, 0, otr.OT1)) as OT1,LTRIM(DATEDIFF(MINUTE, 0, otr.OT15)) as OT15 " +
  ",LTRIM(DATEDIFF(MINUTE, 0, otr.OT2)) as OT2,LTRIM(DATEDIFF(MINUTE, 0, otr.OT3)) as OT3 " +
  " FROM [dbDCI].[dbo].[EmployeeTimeStamp] es " +
  " LEFT JOIN [dbDCI].[dbo].[Employee] e ON es.WCode = e.CODE " +
  " LEFT JOIN [dbDCI].[dbo].[EmployeeWorkingTime] wt ON es.WCode = wt.Code " +
  " LEFT JOIN [dbDCI].[dbo].[EMP_OTRQ] otr ON es.WCode = otr.CODE AND es.WDate = otr.ODATE " +
  " WHERE WDate >= '" + setDate.ToString("yyyy-MM-dd") + "' AND WDate <= '" + setDate.ToString("yyyy-MM-dd") + "' AND es.WType = 'O' " +
  " And OTFROM != ''" +
  "	AND CONVERT(DATE, wt.SystemOUT) = WDate " +
  " And  ( " + txtAndon + "')" +
  " order by WDate  desc";


                DataTable dtt = oConn.SqlGet(sql, "DBDCI");
                if (dtt.Rows.Count > 0)
                {

                    


                    DataTable MPDataDirect = GetManPowerByOTHFac3(txtCostCenter);
                    //DataTable MPDataOP = GetManPowerByLineOP(txtAndon, "OP");
                    MPCount_D += Convert.ToInt16(MPDataDirect.Rows[0]["MP_D"]);
                    MPCount_N += Convert.ToInt16(MPDataDirect.Rows[0]["MP_N"]);

                 
                    SumFOLE_ACTD += GetWorkActByOTHFac3Day(txtCostCenter, setDate);
                    SumFOLE_ACTN += GetWorkActByOTHFac3Night(txtCostCenter, setDate);

                    //-------OT Req, Actual Day,Night

                    SumOT_ReqD += GetOTReqByOTHFac3Day(txtCostCenter, setDate);
                    SumOT_ReqN += GetOTReqByOTHFac3Night(txtCostCenter, setDate);
                    SumOT_ActD += GetOTActByOTHFac3Day(txtCostCenter, setDate);
                    SumOT_ActN += GetOTActByOTHFac3Night(txtCostCenter, setDate);

                }
                else
                {
                 

                    DataTable MPDataDirect = GetManPowerByOTHFac3(txtCostCenter);
                    //DataTable MPDataOP = GetManPowerByLineOP(txtAndon, "OP");
                    MPCount_D += Convert.ToInt16(MPDataDirect.Rows[0]["MP_D"]);
                    MPCount_N += Convert.ToInt16(MPDataDirect.Rows[0]["MP_N"]);


                    SumFOLE_ACTD += GetWorkActByOTHFac3Day(txtCostCenter, setDate);
                    SumFOLE_ACTN += GetWorkActByOTHFac3Night(txtCostCenter, setDate);

                    //SumFOLE_ACTD += GetWorkActByOTHFac3DayFOLE_Direct(txtCostCenter, setDate);
                    //SumFOLE_ACTN += GetWorkActByOTHFac3NightFOLE_Direct(txtCostCenter, setDate);

                    //-------OT Req, Actual Day,Night



                    SumOT_ReqD += GetOTReqByOTHFac3Day(txtCostCenter, setDate);
                    SumOT_ReqN += GetOTReqByOTHFac3Night(txtCostCenter, setDate);
                    SumOT_ActD += GetOTActByOTHFac3Day(txtCostCenter, setDate);
                    SumOT_ActN += GetOTActByOTHFac3Night(txtCostCenter, setDate);

                    //SumOT_ReqD += GetOTReqByOTHFac3DayFOLE_Direct(txtCostCenter, setDate);
                    //SumOT_ReqN += GetOTReqByOTHFac3NightFOLE_Direct(txtCostCenter, setDate);
                    //SumOT_ActD += GetOTActByOTHFac3DayFOLE_Direct(txtCostCenter, setDate);
                    //SumOT_ActN += GetOTActByOTHFac3NightFOLE_Direct(txtCostCenter, setDate);

                }




                //*****  Data for MP, OT Req and Actual                  
                MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);
                //SUMMP_SHIFT = MPCountALL;
                //SUMACT_MP = SUMOT_REQD + SUMOT_REQN;


                // ** Man Power Attandance
                mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                mManPower.Xdate = i;

                //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                //  mManPower.SumMP_STD = SUMACT_MP;
                MPCount_D += LECount_D + FOCount_D;
                MPCount_N += LECount_N + FOCount_N;


                mManPower.SumMPD = MPCount_D;
                mManPower.SumMPN = MPCount_N;

                SumMP_ACTD += SumFOLE_ACTD;
                SumMP_ACTN += SumFOLE_ACTN;

                mManPower.SumMP_ACTD = SumMP_ACTD;
                mManPower.SumMP_ACTN = SumMP_ACTN;

                if (SumMP_ACTD != 0)
                {
                    mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                }
                else
                {
                    mManPower.SumMP_DIFFD = 0;

                }

                if (SumMP_ACTN != 0)
                {

                    mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                }
                else
                {

                    mManPower.SumMP_DIFFN = 0;
                }


                // ** OT Req,ACT

             

                mManPower.SumOT_ReqD = SumOT_ReqD;
                mManPower.SumOT_ReqN = SumOT_ReqN;
                mManPower.SumOT_ActD = SumOT_ActD;
                mManPower.SumOT_ActN = SumOT_ActN;



                oListMP.Add(mManPower);






                //if (ii == MonthSelect)
                //{
                // *** OT Does not Insert  Man Power Daily
                if (_Type == "MPFAC3OTH" || _Type == "MPFAC3OTHPrev" || _Type == "MPFAC3OTHPrev2" || _Type == "MPFAC3OTHPrev3")
                {
                    SqlCommand InsertMNOT = new SqlCommand();

                    InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                        ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                        ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                        " VALUES ('" + _Year + "','" + _Month + "','" + i + "','" + Txt_Type + "' " +
                        ",'" + MPCount_D + "','" + SumMP_ACTD + "' " +
                        ",'" + MPCount_N + "','" + SumMP_ACTN + "' " +
                        ",'" + MPCount_D + "','" + SumOT_ReqD + "','" + SumOT_ActD + "' " +
                        ",'" + MPCount_N + "','" + SumOT_ReqN + "','" + SumOT_ActN + "')";
                    //}           



                    oConn.SqlExecute(InsertMNOT, "DBBCS");
                }


                MPCount_D = 0;
                MPCount_N = 0;
                SumMP_ACTD = 0;
                SumMP_ACTN = 0;

                SumMP_ACTN = 0;
                SumOT_ReqD = 0;
                SumOT_ReqN = 0;
                SumOT_ActD = 0;
                SumOT_ActN = 0;
                MPFOLE_ALL = 0;

                SumMP_ACTN = 0;
                SumOT_ActD = 0;
                SumOT_ActN = 0;
                SUMMPD = 0;
                SUMMPN = 0;
                SUMOT_REQN = 0;
                SUMOT_REQD = 0;
                SUMOT_ACTD = 0;
                SUMOT_ACTN = 0;
                MPFOLE_D = 0;
                MPFOLE_N = 0;
                LECount_D = 0;
                LECount_N = 0;
                FOCount_D = 0;
                FOCount_N = 0;
                SumFOLE_ACTD = 0;
                SumFOLE_ACTN = 0;
            }

        }


        //   }




        PrdMonth = 0;
        SumPrdMonth = 0;
     

        accuOP1 = 0;
        accuOP15 = 0;
        accuOP2 = 0;
        accuOP3 = 0;

        accuLE1 = 0;
        accuLE15 = 0;
        accuLE2 = 0;
        accuLE3 = 0;

        accuFO1 = 0;
        accuFO15 = 0;
        accuFO2 = 0;
        accuFO3 = 0;

        accuSU1 = 0;
        accuSU15 = 0;
        accuSU2 = 0;
        accuSU3 = 0;

   


        CountMPOTREQD = 0;
        CountMPOTREQN = 0;
        //       CountMPD = 0;
        CountMPN = 0;
        CountMPH = 0;
        SumMP = 0;


        return oListMP;
    }
     public List<MMPInfo.MPAllChartInfo> GetChartMPDailybyAndon(int _Year,int _Month, DateTime _DataDate, string _Type)
    {

        List<MMPInfo.MPAllChartInfo> oListMP = new List<MMPInfo.MPAllChartInfo>();

        //* Maintenance 
        string[] ArryMT = { "4310", "4320" };
        string[] ArryMTM = { "4310" };
        string[] ArryMTA = { "4320" };


        string[] ArryPrd = { "1YC", "2YC", "SCR", "1YC/3", "ODM" };
        //string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702", "4310", "4320", "4510", "4720", "8120" };
        string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702" };
        string[] ArryPrdFac1 = { "1101", "1102" };
        //string[] ArryPrdAndonFac1 = { "001", "049", "052", "054", "056", "057", "058", "062", "063", "065", "066", "069", "072", "074", "076", "077", "080", "083", "084", "089","090","093","095","098","103","106","107" };
        //string[] ArryPrdAndonFac2 = { "004", "005", "006", "007", "008", "009", "010", "011", "012", "013", "014", "015", "017", "018", "019", "020", "021", "022", "023", "026", "027", "028", "030", "031", "033", "034", "036", "037", "041", "043", "044", "045", "046", "051", "053", "059", "061", "068", "070", "071", "073" };
        string[] ArryPrdFac1M = { "1101" };
        string[] ArryPrdFac1A = { "1102" };
        string[] ArryPrdFac2 = { "1201", "1202", "1301", "1302", "1401", "1402" };
        string[] ArryPrdFac2M = { "1201" };
        string[] ArryPrdFac2A = { "1202" };
        string[] ArryPrdFac2Mo = { "1401" };
        string[] ArryPrdFac2MoA = { "1402" };
        string[] ArryPrdSCA = { "1301", "1302" };
        string[] ArryPrdSCRM = { "1301" };
        string[] ArryPrdSCRA = { "1302" };
        string[] ArryPrdFac3 = { "1701", "1702" };
        string[] ArryPrdFac3M = { "1701" };
        string[] ArryPrdMachine = {"306","307","308","304","310","302","301","303"};
        string[] ArryPrdMachineFac3 = { "MPFAC3CY", "MPFAC3CS", "MPFAC3FH", "MPFAC3RH", "MPFAC3PI", "MPFAC3MOT", "MPFAC3MA", "MPFAC3AS", "MPFAC3FIN" };
        string[] ArryPrdFac3CY = { "%305%" };
        string[] ArryPrdFac3CS = { "%306%" };
        string[] ArryPrdFac3CP = { "%312%" };
        string[] ArryPrdFac3FH = { "%307%" };
        string[] ArryPrdFac3RH = { "%304%" };
        string[] ArryPrdFac3PI = { "%308%" };
        string[] ArryPrdFac3MOT = { "%310%" };
        string[] ArryPrdFac3MA = { "%302%" };
        string[] ArryPrdFac3AS = { "%301%" };
        string[] ArryPrdFac3FIN = { "%303%" };

       
        string[] ArryPrdFac3A = { "1702" };
        string[] ArryPrdODM = { "1501" };

        string[] ArryPeriod = { "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod1 = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod2 = { "PRD_JAN", "PRD_FEB", "PRD_MAR", "PRD_APR", "PRD_MAY", "PRD_JUN", "PRD_JUL", "PRD_AUG", "PRD_SEP", "PRD_OCT", "PRD_NOV", "PRD_DEC" };

        int[] ArryDay = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 };
        int[] ArryMonth = { 4, 5, 6, 7, 8, 9, 10, 11, 12 };

        int[] ArryMonth1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };


        string pAccGroup = "EXP";
        string pBudgetType = "DI";
        string pYear = _DataDate.ToString("yyyy");
        string pMonth = _DataDate.ToString("MM");
      //  DateTime _ThisYear = new DateTime();
        DateTime _LastYear = new DateTime();
        DateTime _Last2Year = new DateTime();
        DateTime _Last3Year = new DateTime();
       // _ThisYear = _DataDate.Year;
        _LastYear = _DataDate.AddYears(-1);
        _Last2Year = _DataDate.AddYears(-2);
        _Last3Year = _DataDate.AddYears(-3);
        string pLastYear = _LastYear.ToString("yyyy");
        string pLast2Year = _Last2Year.ToString("yyyy");
        string pLast3Year = _Last3Year.ToString("yyyy");
       // string ThisYear = _ThisYear.tostring("yyyy");
        string TxtModel = " ";


        int PresentYear = Convert.ToInt16(_DataDate.Year);

        string Factory = "";
        string Txt_Type = "";


        #region init



        int[] _PrdActual = new int[12];

        string[] ArrySeires5 = new string[5];
        Decimal[] ArrySeiresValue5 = new Decimal[5];



        #endregion

        string[] ArryLoop = new string[0];
        string ProductType = "";
        string TargetType = "";
        if (_Type == "ALL")
        {
            ArryLoop = ArryPrdALL;
            TargetType = "DCI";

            txtCostCenter = " = " + ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1] +
              " or [COSTCENTER] = " + ArryLoop[2] + " or [COSTCENTER] = " + ArryLoop[3] +
               " or [COSTCENTER] = " + ArryLoop[4] + " or [COSTCENTER] = " + ArryLoop[5] +
               " or [COSTCENTER] = " + ArryLoop[6] + " or [COSTCENTER] = " + ArryLoop[7] +
            " or [COSTCENTER] = " + ArryLoop[8] + " or [COSTCENTER] = " + ArryLoop[9] +
            " or [COSTCENTER] = " + ArryLoop[10];

        }
        else if ((_Type == "MPMTALL") || (_Type == "OTMTALL"))
        {
            ArryLoop = ArryPrdFac1;
            ProductType = "1YC";
            TargetType = "1YC";
            TxtModel = "1YC%";
            Factory = "1";
            Txt_Type = "FAC1";

        }
        else if ((_Type == "MPFAC1") || (_Type == "MPFAC1Prev") || (_Type == "MPFAC1Prev2") || (_Type == "MPFAC1Prev3") || (_Type == "MPFAC1Next") ||
            (_Type == "OTFAC1") || (_Type == "OTFAC1Prev") | (_Type == "OTFAC1Prev2") || (_Type == "OTFAC1Prev3") || (_Type == "OTFAC1Next"))
        {
            ArryLoop = ArryPrdFac1;
            txtCostCenter = ArryLoop[0] + " or COSTCENTER = " + ArryLoop[1];
            ProductType = "1YC";
            TargetType = "1YC";
            TxtModel = "1YC%";
            Factory = "1";
            Txt_Type = "FAC1";

        }
        else if (_Type == "MPFAC1M")
        {
            ArryLoop = ArryPrdFac1M;
            ProductType = "1YC";
            TargetType = "1YC";
            Txt_Type = "FAC1M";
        }
        else if (_Type == "MPFAC1A")
        {
            ArryLoop = ArryPrdFac1A;
            ProductType = "1YC";
            TargetType = "1YC";
            Txt_Type = "FAC1A";
        }
        else if ((_Type == "MPFAC2") || (_Type == "MPFAC2Prev") || (_Type == "MPFAC2Prev2") || (_Type == "MPFAC2Prev3") || (_Type == "MPFAC2Next") ||
          (_Type == "OTFAC2") || (_Type == "OTFAC2Prev") | (_Type == "OTFAC2Prev2") || (_Type == "OTFAC2Prev3") || (_Type == "OTFAC2Next"))
        {
            ArryLoop = ArryPrdFac2;
            txtCostCenter = ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1] +
                      " or [COSTCENTER] = " + ArryLoop[2] + " or [COSTCENTER] = " + ArryLoop[3] +
                       " or [COSTCENTER] = " + ArryLoop[4] + " or [COSTCENTER] = " + ArryLoop[5];
            //txtCostCenter = ArryLoop[0] + " or COSTCENTER = " + ArryLoop[1] + " or COSTCENTER = " + ArryLoop[2] + " or COSTCENTER = " + ArryLoop[3] + " or COSTCENTER = " + ArryLoop[4] + " or COSTCENTER = " + ArryLoop[5] + " or COSTCENTER = " + ArryLoop[6] + " or COSTCENTER = " + ArryLoop[7];
            ProductType = "2YC";
            TargetType = "2YC";
            TxtModel = "2YC%";
            Factory = "2";
            Txt_Type = "FAC2";
        }
        else if (_Type == "MPFAC2M")
        {
            ArryLoop = ArryPrdFac2M;
            ProductType = "2YC";
            TargetType = "2YC";
            Txt_Type = "FAC2M";
        }
        else if (_Type == "MPFAC2A")
        {
            ArryLoop = ArryPrdFac2A;
            ProductType = "2YC";
            TargetType = "2YC";
            Txt_Type = "FAC2A";
        }
        else if (_Type == "MPFAC2MOM")
        {
            ArryLoop = ArryPrdFac2M;
            ProductType = "2YC";
            TargetType = "2YC";
            Txt_Type = "FAC2MOM";
        }
        else if (_Type == "MPFAC2MOA")
        {
            ArryLoop = ArryPrdFac2A;
            ProductType = "2YC";
            TargetType = "2YC";
            Txt_Type = "FAC2MOA";
        }
        else if ((_Type == "MPFAC3") || (_Type == "MPFAC3Prev") || (_Type == "MPFAC3Prev2") || (_Type == "MPFAC3Prev3") || (_Type == "MPFAC3Next") ||
            (_Type == "OTFAC3") || (_Type == "OTFAC3Prev") | (_Type == "OTFAC3Prev2") || (_Type == "OTFAC3Prev3") || (_Type == "OTFAC3Next"))
        {
            ArryLoop = ArryPrdFac3;
            txtCostCenter = ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1];
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            TxtModel = "1YC%";
            Factory = "3";
            Txt_Type = "FAC3";
        }
        else if ((_Type == "MPFAC3M") || (_Type == "OTFAC3M"))
        {
            ArryLoop = ArryPrdFac3M;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            Factory = "3";
            Txt_Type = "FAC3M";

        }
        else if ((_Type == "MPFAC3MM") )
        {
            ArryLoop = ArryPrdMachineFac3;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            Factory = "3";
            Txt_Type = "FAC3MM";

        }
        else if ((_Type == "MPFAC3A")||(_Type == "OTFAC3A"))
        {
            ArryLoop = ArryPrdFac3A;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            Factory = "3";
            Txt_Type = "FAC3A";
        }

        else if ((_Type == "MPFAC3CY") || (_Type == "OTFAC3CY")
                  || (_Type == "MPFAC3CYPrev") || (_Type == "MPFAC3CYPrev2") || (_Type == "MPFAC3CYPrev3"))
        
        {
            ArryLoop = ArryPrdFac3CY;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            Factory = "3";
            Txt_Type = "FAC3CY";
        }
        else if ((_Type == "MPFAC3CP") || (_Type == "OTFAC3CP")
              || (_Type == "MPFAC3CPPrev") || (_Type == "MPFAC3CPPrev2") || (_Type == "MPFAC3CPPrev3"))
        {
            ArryLoop = ArryPrdFac3CP;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            Factory = "3";
            Txt_Type = "FAC3CP";
        }

        else if ((_Type == "MPFAC3CS") || (_Type == "OTFAC3CS")
              || (_Type == "MPFAC3CSPrev") || (_Type == "MPFAC3CSPrev2") || (_Type == "MPFAC3CSPrev3"))
        {
            ArryLoop = ArryPrdFac3CS;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            Factory = "3";
            Txt_Type = "FAC3CS";
        }
              else if ((_Type == "MPFAC3FH") || (_Type == "OTFAC3FH")
              || (_Type == "MPFAC3FHPrev") || (_Type == "MPFAC3FHPrev2") || (_Type == "MPFAC3FHPrev3"))
        {
            ArryLoop = ArryPrdFac3FH;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            Factory = "3";
            Txt_Type = "FAC3FH";
        }
                 else if ((_Type == "MPFAC3RH") || (_Type == "OTFAC3RH")
              || (_Type == "MPFAC3RHPrev") || (_Type == "MPFAC3RHPrev2") || (_Type == "MPFAC3RHPrev3"))
        {
            ArryLoop = ArryPrdFac3RH;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            Factory = "3";
            Txt_Type = "FAC3RH";
        }
            
         
        else if ((_Type == "MPFAC3PI") || (_Type == "OTFAC3PI")
              || (_Type == "MPFAC3PIPrev") || (_Type == "MPFAC3PIPrev2") || (_Type == "MPFAC3PIPrev3"))
        {
            ArryLoop = ArryPrdFac3PI;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            Factory = "3";
            Txt_Type = "FAC3PI";
        }
          else if ((_Type == "MPFAC3MOT") || (_Type == "OTFAC3MOT")
              || (_Type == "MPFAC3MOTPrev") || (_Type == "MPFAC3MOTPrev2") || (_Type == "MPFAC3MOTPrev3"))
        {
            ArryLoop = ArryPrdFac3MOT;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            Factory = "3";
            Txt_Type = "FAC3MOT";
        }
          
          else if ((_Type == "MPFAC3MA") || (_Type == "OTFAC3MA")
              || (_Type == "MPFAC3MAPrev") || (_Type == "MPFAC3MAPrev2") || (_Type == "MPFAC3MAPrev3"))
        {
            ArryLoop = ArryPrdFac3MA;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            Factory = "3";
            Txt_Type = "FAC3MA";
        }
        else if ((_Type == "MPFAC3AS") || (_Type == "OTFAC3AS")
              || (_Type == "MPFAC3ASPrev") || (_Type == "MPFAC3ASPrev2") || (_Type == "MPFAC3ASPrev3"))
        {
            ArryLoop = ArryPrdFac3AS;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            Factory = "3";
            Txt_Type = "FAC3AS";
        }
               else if ((_Type == "MPFAC3FIN") || (_Type == "OTFAC3FIN")
              || (_Type == "MPFAC3FINPrev") || (_Type == "MPFAC3FINPrev2") || (_Type == "MPFAC3FINPrev3"))
        {
            ArryLoop = ArryPrdFac3FIN;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            Factory = "3";
            Txt_Type = "FAC3FIN";
        }
        else if ((_Type == "MPODM") || (_Type == "MPODMPrev") || (_Type == "MPODMPrev2") || (_Type == "MPODMPrev3") ||
             (_Type == "OTODM") || (_Type == "OTODMPrev") | (_Type == "OTODMPrev2") || (_Type == "OTODMPrev3"))
        {
            ArryLoop = ArryPrdODM;
            txtCostCenter = ArryLoop[0];
            ProductType = "ODM";
            TargetType = "ODM";
            Factory = "ODM";
            Txt_Type = "ODM";
        }
        else if ((_Type == "MPSCR") || (_Type == "MPSCRPrev") || (_Type == "MPSCRNext") ||
            (_Type == "OTSCR") || (_Type == "OTSCRPrev") || (_Type == "OTSCRNext"))
        {
            ArryLoop = ArryPrdSCA;
            ProductType = "SCR";
            TargetType = "SCR";
            Txt_Type = "SRC";

        }
        else if (_Type == "MPSCRM")
        {
            ArryLoop = ArryPrdSCRM;
            ProductType = "SCR";
            TargetType = "SCR";
            Txt_Type = "SRCM";
        }
        else if (_Type == "MPSCRA")
        {
            ArryLoop = ArryPrdSCRA;
            ProductType = "SCR";
            TargetType = "SCR";
            Txt_Type = "SRCA";
        }



        DateTime strDate = new DateTime(DateTime.Now.Year, _Month, 1, 0, 0, 0);
        DateTime endDate = strDate.AddMonths(1).Date + new TimeSpan(0, 0, 0);

        DateTime strHr = DateTime.Today + new TimeSpan(08, 00, 00);
        DateTime dateEnd = DateTime.Today + new TimeSpan(20, 00, 00);
        DateTime Endtoday = DateTime.Now;
        DateTime EndYesterday = DateTime.Today - new TimeSpan(24, 00, 00);

        int YearSelect = _Year;
        int MonthSelect = _Month;
        int MonthPresent = Endtoday.Month;
        int PrevMonth = _Month - 1;
        int NextMonth = _Month + 1;



        //DataTable dtWorkingHour = new DataTable();
        //dtWorkingHour.Columns.Add("Position", typeof(string));
        //dtWorkingHour.Columns.Add("OT1", typeof(string));
        //dtWorkingHour.Columns.Add("OT15", typeof(string));
        //dtWorkingHour.Columns.Add("OT2", typeof(string));
        //dtWorkingHour.Columns.Add("OT3", typeof(string));
        //string[] arrPotition = { "OP", "LE", "FO", "SU" };
        //foreach (string item in arrPotition)
        //{
        //    dtWorkingHour.Rows.Add(item, "", "", "", "");
        //}


        //------------- Create column header OT  -----------------


        DataTable dtBCPD = new DataTable();
        dtBCPD.Columns.Add("Fiscal_year", typeof(string));
        dtBCPD.Columns.Add("ProductType", typeof(string));
        dtBCPD.Columns.Add("PRD_JAN", typeof(string));
        dtBCPD.Columns.Add("PRD_FEB", typeof(string));
        dtBCPD.Columns.Add("PRD_MAR", typeof(string));
        dtBCPD.Columns.Add("PRD_APR", typeof(string));
        dtBCPD.Columns.Add("PRD_MAY", typeof(string));
        dtBCPD.Columns.Add("PRD_JUN", typeof(string));
        dtBCPD.Columns.Add("PRD_JUL", typeof(string));
        dtBCPD.Columns.Add("PRD_AUG", typeof(string));
        dtBCPD.Columns.Add("PRD_SEP", typeof(string));
        dtBCPD.Columns.Add("PRD_OCT", typeof(string));
        dtBCPD.Columns.Add("PRD_NOV", typeof(string));
        dtBCPD.Columns.Add("PRD_DEC", typeof(string));
        DateTime setDate1 = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sqlBCPD = new SqlCommand();
        sqlBCPD.CommandText = "SELECT Fiscal_year " +
            " ,ProductType,PRD_APR,PRD_MAY,PRD_JUN,PRD_JUL,PRD_AUG " +
            " ,PRD_SEP,PRD_OCT,PRD_NOV,PRD_DEC,PRD_JAN,PRD_FEB,PRD_MAR,Total_PRD " +
           " from BC_PRODUCTION " +
           " where [Fiscal_year] = " + setDate1.Year;


        // int LBCSPD = 0;
        double Prd = 0, Prd1 = 0, Prd2 = 0, Prd3 = 0, Prd4 = 0, Prd5 = 0, Prd6 = 0, Prd7 = 0;
        double Prd8 = 0, Prd9 = 0, Prd10 = 0, Prd11 = 0, Prd12 = 0, SumPrd = 0, SumPrdOverAll = 0, PrdMonth = 0, SumPrdMonth = 0;
        DataTable dt1 = oConn.SqlGet(sqlBCPD, "DBBCS");
        foreach (DataRow item in dt1.Rows)
        {
            DataRow _rowBCSPD = dtBCPD.NewRow();
            _rowBCSPD["Fiscal_year"] = item["Fiscal_year"].ToString();
            _rowBCSPD["ProductType"] = item["ProductType"].ToString();
            _rowBCSPD["PRD_JAN"] = item["PRD_JAN"];
            _rowBCSPD["PRD_FEB"] = item["PRD_FEB"];
            _rowBCSPD["PRD_MAR"] = item["PRD_MAR"];
            _rowBCSPD["PRD_APR"] = item["PRD_APR"];
            _rowBCSPD["PRD_MAY"] = item["PRD_MAY"];
            _rowBCSPD["PRD_JUN"] = item["PRD_JUN"];
            _rowBCSPD["PRD_JUL"] = item["PRD_JUL"];
            _rowBCSPD["PRD_AUG"] = item["PRD_AUG"];
            _rowBCSPD["PRD_SEP"] = item["PRD_SEP"];
            _rowBCSPD["PRD_OCT"] = item["PRD_OCT"];
            _rowBCSPD["PRD_NOV"] = item["PRD_NOV"];
            _rowBCSPD["PRD_DEC"] = item["PRD_DEC"];
            dtBCPD.Rows.Add(_rowBCSPD);
        }


        //---------------- Get Employeee of Line --------------


        DataTable dtAndon = new DataTable();
        dtAndon.Columns.Add("LineCode", typeof(string));
        dtAndon.Columns.Add("LineName", typeof(string));
        dtAndon.Columns.Add("BoardId", typeof(string));
        dtAndon.Columns.Add("LineGroup", typeof(string));
        DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);
        DateTime setyesterday = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sql = new SqlCommand();

        if (_Type == "ALL")
        {

            txtCostCenter = ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1] +
              " or [COSTCENTER] = " + ArryLoop[2] + " or [COSTCENTER] = " + ArryLoop[3] +
               " or [COSTCENTER] = " + ArryLoop[4] + " or [COSTCENTER] = " + ArryLoop[5] +
               " or [COSTCENTER] = " + ArryLoop[6] + " or [COSTCENTER] = " + ArryLoop[7] +
            " or [COSTCENTER] = " + ArryLoop[8] + " or [COSTCENTER] = " + ArryLoop[9] +
            " or [COSTCENTER] = " + ArryLoop[10];



        }
        else if (_Type == "MPFAC3")
        {
            txtCostCenter = ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1];

        }
        else if ((_Type == "MPFAC3CY")|| (_Type == "MPFAC3CYPrev") || (_Type == "MPFAC3CYPrev2") || (_Type == "MPFAC3CYPrev3"))
        {
            txtCostCenter = ArryLoop[0];
        }
        else if ((_Type == "MPFAC3CP")|| (_Type == "MPFAC3CPPrev") || (_Type == "MPFAC3CPPrev2") || (_Type == "MPFAC3CPPrev3"))
        {
            txtCostCenter = ArryLoop[0];
        }
        else if ((_Type == "MPFAC3CS") || (_Type == "MPFAC3CSPrev") || (_Type == "MPFAC3CSPrev2") || (_Type == "MPFAC3CSPrev3"))
        {
            txtCostCenter = ArryLoop[0] ;
        }
        else if ((_Type == "MPFAC3FH") || (_Type == "MPFAC3FHPrev") || (_Type == "MPFAC3FHPrev2") || (_Type == "MPFAC3FHPrev3"))
        {
            txtCostCenter = ArryLoop[0];
        }
        else if ((_Type == "MPFAC3RH")|| (_Type == "MPFAC3RHPrev") || (_Type == "MPFAC3RHPrev2") || (_Type == "MPFAC3RHPrev3"))
        {
            txtCostCenter = ArryLoop[0];
        }
        else if ((_Type == "MPFAC3PI") || (_Type == "MPFAC3PIPrev") || (_Type == "MPFAC3PIPrev2") || (_Type == "MPFAC3PIPrev3"))
        {
            txtCostCenter = ArryLoop[0];
        }
        else if ((_Type == "MPFAC3MOT") || (_Type == "MPFAC3MOTPrev") || (_Type == "MPFAC3MOTPrev2") || (_Type == "MPFAC3MOTPrev3"))
        {
            txtCostCenter = ArryLoop[0];
        }
        else if ((_Type == "MPFAC3MA") || (_Type == "MPFAC3MAPrev") || (_Type == "MPFAC3MAPrev2") || (_Type == "MPFAC3MAPrev3"))
        {
            txtCostCenter = ArryLoop[0];
        }
        else if ((_Type == "MPFAC3AS") || (_Type == "MPFAC3ASPrev") || (_Type == "MPFAC3ASPrev2") || (_Type == "MPFAC3ASPrev3"))
        {
            txtCostCenter = ArryLoop[0];
        }
        else if ((_Type == "MPFAC3FIN") || (_Type == "MPFAC3FINPrev") || (_Type == "MPFAC3FINPrev2") || (_Type == "MPFAC3FINPrev3"))
        {
            txtCostCenter = ArryLoop[0];
        }
        else if (_Type == "MPFAC3M")
        {
            txtCostCenter = ArryLoop[0];
        }
        else if (_Type == "MPFAC3A")
        {
            txtCostCenter = ArryLoop[0];
        }
        else if (_Type == "MPFAC2")
        {
            txtCostCenter = ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1] +
                         " or [COSTCENTER] = " + ArryLoop[2] + " or [COSTCENTER] = " + ArryLoop[3] +
                          " or [COSTCENTER] = " + ArryLoop[4] + " or [COSTCENTER] = " + ArryLoop[5];
        }
        else if (_Type == "MPFAC2M")
        {
            txtCostCenter = ArryLoop[0];
        }
        else if (_Type == "MPFAC2A")
        {
            txtCostCenter = ArryLoop[0];
        }
        else if (_Type == "MPFAC2MOM")
        {
            txtCostCenter = ArryLoop[0];
        }
        else if (_Type == "MPFAC2MOA")
        {
            txtCostCenter = ArryLoop[0];
        }
        else if (_Type == "MPSCRA")
        {
            txtCostCenter = ArryLoop[0];
        }
        else if (_Type == "MPSCRM")
        {
            txtCostCenter = ArryLoop[0];
        }



        else if (_Type == "MPODM")
        {
            txtCostCenter = ArryLoop[0];
        }


        sql.CommandText = " Select LineCode,LineName,BoardId,LineGroup, " +
                       " PdModel,Factory " +
                       "  FROM PD_LineMstr where factory = '" + Factory + "' " +
                       " order by boardid  ";


        int ii = 0;
        DataTable dt = oConn.SqlGet(sql, "DBPDB");
        foreach (DataRow item in dt.Rows)
        {
            DataRow _rowAndon = dtAndon.NewRow();
            if ((item["LineCode"].ToString() != "") && (item["BoardId"].ToString() != "" && item["BoardId"].ToString() != "-"))
            {
                _rowAndon["LineCode"] = item["LineCode"].ToString();
                _rowAndon["LineName"] = item["LineName"].ToString();
                _rowAndon["BoardId"] = item["BoardId"].ToString();
                _rowAndon["LineGroup"] = item["LineGroup"].ToString();
                dtAndon.Rows.Add(_rowAndon);
            }
        }
        string txtAndon = "";
        int Loopj = 0;
        string sqlandon = " andon like ";
        if (dtAndon.Rows.Count > 0)
        {

            foreach (DataRow _rowMP in dtAndon.Rows)
            {

                if (Loopj == dtAndon.Rows.Count - 1)
                {
                    txtAndon += sqlandon + "'%" + _rowMP["BoardId"].ToString();
                }
                else
                {
                    txtAndon += sqlandon + "'%" + _rowMP["BoardId"].ToString() + "%' or ";

                }
                Loopj += 1;
            }
        }

        //  lbMP.Text = dtEmp.Rows.Count.ToString();
        //---------------- Get Employeee of Line --------------        

        //----------------- Create row content Manpower ------------------

        MMPInfo.MPAllChartInfo oItemMPP = new MMPInfo.MPAllChartInfo();

        int accuOP1 = 0, accuOP15 = 0, accuOP2 = 0, accuOP3 = 0, CountMPOP = 1, CountMPOP_D = 0, CountMPOP_N = 0, REQ_MPOP_D = 0, REQ_MPOP_N = 0;
        int accuLE1 = 0, accuLE15 = 0, accuLE2 = 0, accuLE3 = 0, CountMPLE = 1, CountMPLE_D = 0, CountMPLE_N = 0, REQ_MPLE_D = 0, REQ_MPLE_N = 0; ;
        int accuFO1 = 0, accuFO15 = 0, accuFO2 = 0, accuFO3 = 0, CountMPFO = 1, CountMPFO_D = 0, CountMPFO_N = 0, REQ_MPFO_D = 0, REQ_MPFO_N = 0;
        int accuSU1 = 0, accuSU15 = 0, accuSU2 = 0, accuSU3 = 0, CountMPSU = 1, CountMPSU_D = 0, CountMPSU_N = 0, REQ_MPSU_D = 0, REQ_MPSU_N = 0;
        int CountMPOTREQD = 1, CountMPOTREQN = 1, SumMPReqD = 1, SumMPReqN = 1, CountMPN = 1, CountMPH = 1, SumMP = 1;
        int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
        int SumFOLE_ACTD = 0, SumFOLE_ACTN = 0, SumLEOT_ReqD = 0, SumLEOT_ReqN = 0, SumLEOT_ActD = 0, SumLEOT_ActN = 0;

        double CostOverAllSum = 0;

        //---------------- Get Employeee of Line --------------
        DataTable dtMNOT = new DataTable();

        dtMNOT.Columns.Add("Fiscal_year", typeof(string));
        dtMNOT.Columns.Add("Monthly", typeof(string));
        dtMNOT.Columns.Add("Daily", typeof(string));
        dtMNOT.Columns.Add("ProductType", typeof(string));

        dtMNOT.Columns.Add("STD_MPDay", typeof(string));
        dtMNOT.Columns.Add("ACT_MPDay", typeof(string));
        dtMNOT.Columns.Add("STD_MPNight", typeof(string));
        dtMNOT.Columns.Add("ACT_MPNight", typeof(string));

        dtMNOT.Columns.Add("STD_OTDay", typeof(string));
        dtMNOT.Columns.Add("REQ_OTDay", typeof(string));
        dtMNOT.Columns.Add("ACT_OTDay", typeof(string));

        dtMNOT.Columns.Add("STD_OTNight", typeof(string));
        dtMNOT.Columns.Add("REQ_OTNight", typeof(string));
        dtMNOT.Columns.Add("ACT_OTNight", typeof(string));



        SqlCommand sqlMNOT = new SqlCommand();


        sqlMNOT.CommandText = "SELECT Fiscal_year,Monthly,Daily,ProductType,STD_MPDay,ACT_MPDay" +
            " ,STD_MPNight,ACT_MPNight,STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight" +
           " FROM BC_MANPOWER where Fiscal_year = '" + _Year + "' and  Monthly = '" + MonthSelect + "' and ProductType ='" + Txt_Type + "' " +
           " order by daily ";



        DataTable dtMOT = oConn.SqlGet(sqlMNOT, "DBBCS");

        if (dtMOT.Rows.Count > 0)
        {
            foreach (DataRow item in dtMOT.Rows)
            {
                DataRow _rowMNOT = dtMNOT.NewRow();
                _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                _rowMNOT["Monthly"] = item["Monthly"].ToString();
                _rowMNOT["Daily"] = item["Daily"].ToString();
                _rowMNOT["ProductType"] = item["ProductType"].ToString();
                _rowMNOT["STD_MPDay"] = item["STD_MPDay"].ToString();
                _rowMNOT["ACT_MPDay"] = item["ACT_MPDay"].ToString();
                _rowMNOT["STD_MPNight"] = item["STD_MPNight"].ToString();
                _rowMNOT["ACT_MPNight"] = item["ACT_MPNight"].ToString();
                _rowMNOT["STD_OTDay"] = item["STD_OTDay"].ToString();
                _rowMNOT["REQ_OTDay"] = item["REQ_OTDay"].ToString();
                _rowMNOT["ACT_OTDay"] = item["ACT_OTDay"].ToString();
                _rowMNOT["STD_OTNight"] = item["STD_OTNight"].ToString();
                _rowMNOT["REQ_OTNight"] = item["REQ_OTNight"].ToString();
                _rowMNOT["ACT_OTNight"] = item["ACT_OTNight"].ToString();

                dtMNOT.Rows.Add(_rowMNOT);
            }

        }


        //** Productivity End


        int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;
        int LECount_D = 0, LECount_N = 0, FOCount_D = 0, FOCount_N = 0; ;
        int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;
        string DatetoDay = "";

        if (dtMNOT.Rows.Count > 0)
        {
            if ((MonthSelect == MonthPresent) && ((_Type == "MPFAC3CY") || (_Type == "MPFAC3CP") || (_Type == "MPFAC3CS") || (_Type == "MPFAC3FH") || (_Type == "MPFAC3RH") ||
                    (_Type == "MPFAC3PI") || (_Type == "MPFAC3MOT") || (_Type == "MPFAC3MA") ||
                    (_Type == "MPFAC3AS") || (_Type == "MPFAC3FIN")
                    || (_Type == "MPFAC3CYPrev") || (_Type == "MPFAC3CYPrev2") || (_Type == "MPFAC3CYPrev3")
                    || (_Type=="MPFAC3CS")||(_Type=="MPFAC3CSPrev")||(_Type=="MPFAC3CSPrev2")||(_Type=="MPFAC3CSPrev3")
||(_Type=="MPFAC3FH")||(_Type=="MPFAC3FHPrev")||(_Type=="MPFAC3FHPrev2")||(_Type=="MPFAC3FHPrev3")
||(_Type=="MPFAC3RH")||(_Type=="MPFAC3RHPrev")||(_Type=="MPFAC3RHPrev2")||(_Type=="MPFAC3RHPrev3")
||(_Type=="MPFAC3PI")||(_Type=="MPFAC3PIPrev")||(_Type=="MPFAC3PIPrev2")||(_Type=="MPFAC3PIPrev3")
||(_Type=="MPFAC3MOT")||(_Type=="MPFAC3MOTPrev")||(_Type=="MPFAC3MOTPrev2")||(_Type=="MPFAC3MOTPrev3")
||(_Type=="MPFAC3MA")||(_Type=="MPFAC3MAPrev")||(_Type=="MPFAC3MAPrev2")||(_Type=="MPFAC3MAPrev3")
||(_Type=="MPFAC3AS")||(_Type=="MPFAC3ASPrev")||(_Type=="MPFAC3ASPrev2")||(_Type=="MPFAC3ASPrev3")
||(_Type=="MPFAC3FIN")||(_Type=="MPFAC3FINPrev")||(_Type=="MPFAC3FINPrev2")||(_Type=="MPFAC3FINPrev3")))
            {

                int idxMP = 0;
                //--------------- Get Employee working Time ---------------------
                DataTable dtempWorkingTime = new DataTable();

                //int SumOT1 = 0, OT1 = 0, OT15 = 0, OT2 = 0, OT3 = 0;
                int SUMMPD = 0, DOT1 = 0, DOT15 = 0, DOT2 = 0, DOT3 = 0, SDOT1 = 0, SDOT15 = 0, SDOT2 = 0, SDOT3 = 0;
                int SUMMPN = 0, HOT1 = 0, HOT15 = 0, HOT2 = 0, HOT3 = 0, SHOT1 = 0, SHOT15 = 0, SHOT2 = 0, SHOT3 = 0;
                int SUMMPH = 0, NOT1 = 0, NOT15 = 0, NOT2 = 0, NOT3 = 0, SNOT1 = 0, SNOT15 = 0, SNOT2 = 0, SNOT3 = 0;



                DataTable dtWorkTime = new DataTable();
                dtWorkTime.Columns.Add("Code", typeof(string));
                dtWorkTime.Columns.Add("WorkDate", typeof(string));
                dtWorkTime.Columns.Add("POSIT", typeof(string));
                dtWorkTime.Columns.Add("OT1", typeof(int));
                dtWorkTime.Columns.Add("OT15", typeof(int));
                dtWorkTime.Columns.Add("OT2", typeof(int));
                dtWorkTime.Columns.Add("OT3", typeof(int));
                dtWorkTime.Columns.Add("SUMOT", typeof(int));
                dtWorkTime.Columns.Add("REQDOT1", typeof(int));
                dtWorkTime.Columns.Add("REQDOT15", typeof(int));
                dtWorkTime.Columns.Add("REQDOT2", typeof(int));
                dtWorkTime.Columns.Add("REQDOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMDOTREQ", typeof(int));
                dtWorkTime.Columns.Add("SUMMPReqD", typeof(int));
                dtWorkTime.Columns.Add("DOT1", typeof(int));
                dtWorkTime.Columns.Add("DOT15", typeof(int));
                dtWorkTime.Columns.Add("DOT2", typeof(int));
                dtWorkTime.Columns.Add("DOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMDOT", typeof(int));
                dtWorkTime.Columns.Add("SUMMPD", typeof(int));

                dtWorkTime.Columns.Add("REQNOT1", typeof(int));
                dtWorkTime.Columns.Add("REQNOT15", typeof(int));
                dtWorkTime.Columns.Add("REQNOT2", typeof(int));
                dtWorkTime.Columns.Add("REQNOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMNOTREQ", typeof(int));
                dtWorkTime.Columns.Add("SUMMPReqN", typeof(int));
                dtWorkTime.Columns.Add("NOT1", typeof(int));
                dtWorkTime.Columns.Add("NOT15", typeof(int));
                dtWorkTime.Columns.Add("NOT2", typeof(int));
                dtWorkTime.Columns.Add("NOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMNOT", typeof(int));
                dtWorkTime.Columns.Add("SUMMPN", typeof(int));

                dtWorkTime.Columns.Add("REQHOT1", typeof(int));
                dtWorkTime.Columns.Add("REQHOT15", typeof(int));
                dtWorkTime.Columns.Add("REQHOT2", typeof(int));
                dtWorkTime.Columns.Add("REQHOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMHOTREQ", typeof(int));
                dtWorkTime.Columns.Add("SUMMPReqH", typeof(int));
                dtWorkTime.Columns.Add("HOT1", typeof(int));
                dtWorkTime.Columns.Add("HOT15", typeof(int));
                dtWorkTime.Columns.Add("HOT2", typeof(int));
                dtWorkTime.Columns.Add("HOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMHOT", typeof(int));
                dtWorkTime.Columns.Add("SUMMPH", typeof(int));


                //--------------- Get Employee working Time ---------------------
                //int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
                int FlagUdate = 0;
                //int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;

                int Xdate = 0;
                int Yester = 0;
                int SUMOT_REQDD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
                int SUMOT_REQNN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
                int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
                int SUMMP_SHIFT = 0, SUMACT_MP = 0;
                //int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;
                int FlagInsert = 1;


                for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                {
                    //------------------ Monthly Present Update --------------------//
                    if (i >= 2)
                    {
                        Yester = i - 1;
                        setyesterday = new DateTime(DateTime.Now.Year, setDate.Month, Yester);

                    }
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);

                    if ((setDate >= EndYesterday) && (setDate <= dateEnd))
                    {
                        FlagUdate = 1;

                        //----------------- Fillter Working Time -------------
                        bool Working = false;

                        sql.CommandText = "SELECT e.Posit,WorkShift,WorkType,otr.OTFROM ,[WCode],[WDate],[WTime],[WDoor],es.[WType],LTRIM(DATEDIFF(MINUTE, 0, otr.OT1)) as OT1,LTRIM(DATEDIFF(MINUTE, 0, otr.OT15)) as OT15 " +
          ",LTRIM(DATEDIFF(MINUTE, 0, otr.OT2)) as OT2,LTRIM(DATEDIFF(MINUTE, 0, otr.OT3)) as OT3 " +
          " FROM [dbDCI].[dbo].[EmployeeTimeStamp] es " +
          " LEFT JOIN [dbDCI].[dbo].[Employee] e ON es.WCode = e.CODE " +
          " LEFT JOIN [dbDCI].[dbo].[EmployeeWorkingTime] wt ON es.WCode = wt.Code " +
          " LEFT JOIN [dbDCI].[dbo].[EMP_OTRQ] otr ON es.WCode = otr.CODE AND es.WDate = otr.ODATE " +
          " WHERE WDate >= '" + setDate.ToString("yyyy-MM-dd") + "' AND WDate <= '" + setDate.ToString("yyyy-MM-dd") + "' AND es.WType = 'O' " +
          " And OTFROM != ''" +
          "	AND CONVERT(DATE, wt.SystemOUT) = WDate " +
          //" and (CostCenter = " + txtCostCenter + " )" +
          " And  ( " + txtAndon + "' or andon ='' )" +
                            //" And  ( " + txtAndon + "')" +
          " order by WDate  desc";
                        //" And  ( " + txtAndon +  "' or andon ='' '"+ "')" +

                        DataTable dtt = oConn.SqlGet(sql, "DBDCI");
                        if (dtt.Rows.Count > 0)
                        {

                  

                            // *** Get ManPower OP
                            DataTable MPDataDirect = GetManPowerByLine(txtCostCenter);

                            //DataTable MPDataOP = GetManPowerByLineOP(txtAndon, "OP");
                            MPCount_D += Convert.ToInt16(MPDataDirect.Rows[0]["MP_D"]);
                            MPCount_N += Convert.ToInt16(MPDataDirect.Rows[0]["MP_N"]);



                            SumMP_ACTD += GetWorkActByLineDay(txtCostCenter, setDate);
                            SumMP_ACTN += GetWorkActByLineNight(txtCostCenter, setDate);

                            //-------OT Req, Actual Day,Night

                            SumOT_ReqD += GetOTReqByLineDay(txtCostCenter, setDate);
                            SumOT_ReqN += GetOTReqByLineNight(txtCostCenter, setDate);
                            SumOT_ActD += GetOTActByLineDay(txtCostCenter, setDate);
                            SumOT_ActN += GetOTActByLineNight(txtCostCenter, setDate);

                            SqlCommand sqlCheck = new SqlCommand();

                           
                            sqlCheck.CommandText = "SELECT * FROM BC_ManPower WHERE ProductType = " +
                           " '" + Txt_Type + "' and Fiscal_year = '" + _Year + "'" +
                               " and Monthly = '" + _Month + "' and Daily ='" + i + "'";
                            DataTable dtCheck = oConBCS.Query(sqlCheck);


                            if (dtCheck.Rows.Count > 0)
                            {

                                FlagInsert = 1;
                                SqlCommand UpdateMNOT = new SqlCommand();
                                UpdateMNOT.CommandText = "Update  BC_MANPOWER  " +
                                        " set STD_MPDay ='" + MPCount_D + "',ACT_MPDay ='" + SumMP_ACTD + "' " +
                                        ",STD_MPNight ='" + MPCount_N + "',ACT_MPNight ='" + SumMP_ACTN + "' " +
                                        ",STD_OTDay ='" + MPCount_D + "',REQ_OTDay ='" + SumOT_ReqD + "',ACT_OTDay = '" + SumOT_ActD + "'" +
                                        ",STD_OTNight ='" + MPCount_N + "',REQ_OTNight ='" + SumOT_ReqN + "',ACT_OTNight = '" + SumOT_ActN + "'" +
                                        "where  Fiscal_year ='" + _Year + "' and Monthly ='" + _Month + "' and Daily ='" + i + "' and ProductType ='" + Txt_Type + "'";

                                oConn.SqlExecute(UpdateMNOT, "DBBCS");

                            }
                            else
                            {
                                FlagInsert = 0;
                                SqlCommand InsertMNOT = new SqlCommand();

                                InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                              ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                              ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                              " VALUES ('" + _Year + "','" + _Month + "','" + i + "','" + Txt_Type + "' " +
                              ",'" + MPCount_D + "','" + SumMP_ACTD + "' " +
                              ",'" + MPCount_N + "','" + SumMP_ACTN + "' " +
                              ",'" + MPCount_D + "','" + SumOT_ReqD + "','" + SumOT_ActD + "' " +
                              ",'" + MPCount_N + "','" + SumOT_ReqN + "','" + SumOT_ActN + "')";
                                //}           



                                oConn.SqlExecute(InsertMNOT, "DBBCS");

                            }
                             

                        }
                        else
                        {


                          

                            SqlCommand sqlCheck = new SqlCommand();
                            sqlCheck.CommandText = "SELECT * FROM BC_ManPower WHERE ProductType = " +
                           " '" + Txt_Type + "' and Fiscal_year = '" + _Year + "'" +
                               " and Monthly = '" + _Month + "' and Daily ='" + i + "'";
                            DataTable dtCheck = oConBCS.Query(sqlCheck);
                            if (dtCheck.Rows.Count > 0)
                            {

                                FlagInsert = 1;
                                //for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                                //{

                                //if (dtAndon.Rows.Count > 0)
                                //{
                                
                                    DataTable dtMP = new DataTable();
                                      dtMP.Columns.Add("STD_MPDay", typeof(string));
                                      dtMP.Columns.Add("STD_MPNight", typeof(string));
                                      dtMP.Columns.Add("ACT_MPDay", typeof(string));
                                      dtMP.Columns.Add("ACT_MPNight", typeof(string));
                                      dtMP.Columns.Add("REQ_OTDay", typeof(string));
                                      dtMP.Columns.Add("REQ_OTNight", typeof(string));
                                      dtMP.Columns.Add("ACT_OTDay", typeof(string));
                                      dtMP.Columns.Add("ACT_OTNight", typeof(string));

                                        foreach (DataRow item in dtCheck.Rows)
                                        {

                                            if (i == Convert.ToInt16(item["Daily"].ToString()))
                                            {
                                            DataRow _rowMP = dtMP.NewRow();

                                            _rowMP["STD_MPDay"] = item["STD_MPDay"].ToString();
                                            _rowMP["STD_MPNight"] = item["STD_MPNight"].ToString();
                                            _rowMP["ACT_MPDay"] = item["ACT_MPDay"].ToString();
                                            _rowMP["ACT_MPNight"] = item["ACT_MPNight"].ToString();
                                            _rowMP["REQ_OTDay"] = item["REQ_OTDay"].ToString();
                                            _rowMP["REQ_OTNight"] = item["REQ_OTNight"].ToString();
                                            _rowMP["ACT_OTDay"] = item["ACT_OTDay"].ToString();
                                            _rowMP["ACT_OTNight"] = item["ACT_OTNight"].ToString();
                                            dtMP.Rows.Add(_rowMP);

                                            //if (i == Convert.ToInt16(item["Daily"].ToString()))
                                            //{
                                            // ** Man Power Attandance
                                            DatetoDay = i + ":" + setDate.DayOfWeek.ToString().Substring(0, 3);
                                            Xdate = i;

                                            //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                                            //  mManPower.SumMP_STD = SUMACT_MP;


                                            MPCount_D = Convert.ToInt16(item["STD_MPDay"].ToString());
                                            MPCount_N = Convert.ToInt16(item["STD_MPNight"].ToString());
                                            SumMP_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                                            SumMP_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());
                                            //SumMP_DIFFD = MPCount_D - SumMP_ACTD;
                                            //SumMP_DIFFN = MPCount_N - SumMP_ACTN;


                                            // ** OT Req,ACT
                                            SumOT_ReqD = Convert.ToInt16(item["REQ_OTDay"].ToString());
                                            SumOT_ReqN = Convert.ToInt16(item["REQ_OTNight"].ToString());
                                            SumOT_ActD = Convert.ToInt16(item["ACT_OTDay"].ToString());
                                            SumOT_ActN = Convert.ToInt16(item["ACT_OTNight"].ToString());
                                        }
                                    }
                               
                                //    }
                                //}
                            }
                            else
                            {
                                FlagInsert = 0;
                             

                                DataTable MPData1= GetManPowerByLine(txtCostCenter);
                                MPCount_D += Convert.ToInt16(MPData1.Rows[0]["MP_D"]);
                                MPCount_N += Convert.ToInt16(MPData1.Rows[0]["MP_N"]);


                                //------Actual Work by Line Day,Night
                                SumFOLE_ACTD += GetWorkActByLineDay(txtCostCenter, setDate);
                                SumFOLE_ACTN += GetWorkActByLineNight(txtCostCenter, setDate);

                                //-------OT Req, Actual Day,Night

                                SumOT_ReqD += GetOTReqByLineDay(txtCostCenter, setDate);
                                SumOT_ReqN += GetOTReqByLineNight(txtCostCenter, setDate);
                                SumOT_ActD += GetOTActByLineDay(txtCostCenter, setDate);
                                SumOT_ActN += GetOTActByLineNight(txtCostCenter, setDate);

                            }
                        }
                    }
                    else
                    {
                        SqlCommand sqlCheck = new SqlCommand();
                        sqlCheck.CommandText = "SELECT * FROM BC_ManPower WHERE ProductType = " +
                       " '" + Txt_Type + "' and Fiscal_year = '" + _Year + "'" +
                           " and Monthly = '" + _Month + "' and Daily ='" + i + "'";
                        DataTable dtCheck = oConBCS.Query(sqlCheck);
                        if (dtCheck.Rows.Count > 0)
                        {

                            FlagInsert = 1;
                            //for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                            //{
                            DataTable dtMP = new DataTable();
                            dtMP.Columns.Add("STD_MPDay", typeof(string));
                            dtMP.Columns.Add("STD_MPNight", typeof(string));
                            dtMP.Columns.Add("ACT_MPDay", typeof(string));
                            dtMP.Columns.Add("ACT_MPNight", typeof(string));
                            dtMP.Columns.Add("REQ_OTDay", typeof(string));
                            dtMP.Columns.Add("REQ_OTNight", typeof(string));
                            dtMP.Columns.Add("ACT_OTDay", typeof(string));
                            dtMP.Columns.Add("ACT_OTNight", typeof(string));

                            foreach (DataRow item in dtCheck.Rows)
                            {

                                if (i == Convert.ToInt16(item["Daily"].ToString()))
                                {
                                    DataRow _rowMP = dtMP.NewRow();

                                    _rowMP["STD_MPDay"] = item["STD_MPDay"].ToString();
                                    _rowMP["STD_MPNight"] = item["STD_MPNight"].ToString();
                                    _rowMP["ACT_MPDay"] = item["ACT_MPDay"].ToString();
                                    _rowMP["ACT_MPNight"] = item["ACT_MPNight"].ToString();
                                    _rowMP["REQ_OTDay"] = item["REQ_OTDay"].ToString();
                                    _rowMP["REQ_OTNight"] = item["REQ_OTNight"].ToString();
                                    _rowMP["ACT_OTDay"] = item["ACT_OTDay"].ToString();
                                    _rowMP["ACT_OTNight"] = item["ACT_OTNight"].ToString();
                                    dtMP.Rows.Add(_rowMP);

                                    //if (i == Convert.ToInt16(item["Daily"].ToString()))
                                    //{
                                    // ** Man Power Attandance
                                    DatetoDay = i + ":" + setDate.DayOfWeek.ToString().Substring(0, 3);
                                    Xdate = i;

                                    //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                                    //  mManPower.SumMP_STD = SUMACT_MP;


                                    MPCount_D = Convert.ToInt16(item["STD_MPDay"].ToString());
                                    MPCount_N = Convert.ToInt16(item["STD_MPNight"].ToString());
                                    SumMP_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                                    SumMP_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());
                                    //SumMP_DIFFD = MPCount_D - SumMP_ACTD;
                                    //SumMP_DIFFN = MPCount_N - SumMP_ACTN;


                                    // ** OT Req,ACT
                                    SumOT_ReqD = Convert.ToInt16(item["REQ_OTDay"].ToString());
                                    SumOT_ReqN = Convert.ToInt16(item["REQ_OTNight"].ToString());
                                    SumOT_ActD = Convert.ToInt16(item["ACT_OTDay"].ToString());
                                    SumOT_ActN = Convert.ToInt16(item["ACT_OTNight"].ToString());
                                }
                            }
                            SqlCommand UpdateMNOT = new SqlCommand();
                            UpdateMNOT.CommandText = "Update  BC_MANPOWER  " +
                                    " set STD_MPDay ='" + MPCount_D + "',ACT_MPDay ='" + SumMP_ACTD + "' " +
                                    ",STD_MPNight ='" + MPCount_N + "',ACT_MPNight ='" + SumMP_ACTN + "' " +
                                    ",STD_OTDay ='" + MPCount_D + "',REQ_OTDay ='" + SumOT_ReqD + "',ACT_OTDay = '" + SumOT_ActD + "'" +
                                    ",STD_OTNight ='" + MPCount_N + "',REQ_OTNight ='" + SumOT_ReqN + "',ACT_OTNight = '" + SumOT_ActN + "'" +
                                    "where  Fiscal_year ='" + _Year + "' and Monthly ='" + _Month + "' and Daily ='" + i + "' and ProductType ='" + Txt_Type + "'";

                            oConn.SqlExecute(UpdateMNOT, "DBBCS");

                           
                        }
                        else
                        {
                            FlagInsert = 0;
                        

                            DataTable MPData2 = GetManPowerByLine(txtCostCenter);
                            MPCount_D += Convert.ToInt16(MPData2.Rows[0]["MP_D"]);
                            MPCount_N += Convert.ToInt16(MPData2.Rows[0]["MP_N"]);


                            //------Actual Work by Line Day,Night
                            SumMP_ACTD += GetWorkActByLineDay(txtCostCenter, setDate);
                            SumMP_ACTN += GetWorkActByLineNight(txtCostCenter, setDate);

                            //-------OT Req, Actual Day,Night

                            SumOT_ReqD += GetOTReqByLineDay(txtCostCenter, setDate);
                            SumOT_ReqN += GetOTReqByLineNight(txtCostCenter, setDate);
                            SumOT_ActD += GetOTActByLineDay(txtCostCenter, setDate);
                            SumOT_ActN += GetOTActByLineNight(txtCostCenter, setDate);

                            SqlCommand InsertMNOT = new SqlCommand();

                            InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                          ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                          ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                          " VALUES ('" + _Year + "','" + _Month + "','" + i + "','" + Txt_Type + "' " +
                          ",'" + MPCount_D + "','" + SumMP_ACTD + "' " +
                          ",'" + MPCount_N + "','" + SumMP_ACTN + "' " +
                          ",'" + MPCount_D + "','" + SumOT_ReqD + "','" + SumOT_ActD + "' " +
                          ",'" + MPCount_N + "','" + SumOT_ReqN + "','" + SumOT_ActN + "')";
                            //}           



                            oConn.SqlExecute(InsertMNOT, "DBBCS");

                        }
                    }//exit Check EndYesterday

                    if (((setDate <= dateEnd) && ((_Type == "MPFAC3CY") || (_Type == "MPFAC3CP") || (_Type == "MPFAC3CS") || (_Type == "MPFAC3FH") || (_Type == "MPFAC3RH") ||
                    (_Type == "MPFAC3PI") || (_Type == "MPFAC3MOT") || (_Type == "MPFAC3MA") ||
                    (_Type == "MPFAC3AS") || (_Type == "MPFAC3FIN")
                    || (_Type == "MPFAC3CYPrev") || (_Type == "MPFAC3CYPrev2") || (_Type == "MPFAC3CYPrev3")
                         ||(_Type=="MPFAC3CS")||(_Type=="MPFAC3CSPrev")||(_Type=="MPFAC3CSPrev2")||(_Type=="MPFAC3CSPrev3")
||(_Type=="MPFAC3FH")||(_Type=="MPFAC3FHPrev")||(_Type=="MPFAC3FHPrev2")||(_Type=="MPFAC3FHPrev3")
||(_Type=="MPFAC3RH")||(_Type=="MPFAC3RHPrev")||(_Type=="MPFAC3RHPrev2")||(_Type=="MPFAC3RHPrev3")
||(_Type=="MPFAC3PI")||(_Type=="MPFAC3PIPrev")||(_Type=="MPFAC3PIPrev2")||(_Type=="MPFAC3PIPrev3")
||(_Type=="MPFAC3MOT")||(_Type=="MPFAC3MOTPrev")||(_Type=="MPFAC3MOTPrev2")||(_Type=="MPFAC3MOTPrev3")
||(_Type=="MPFAC3MA")||(_Type=="MPFAC3MAPrev")||(_Type=="MPFAC3MAPrev2")||(_Type=="MPFAC3MAPrev3")
||(_Type=="MPFAC3AS")||(_Type=="MPFAC3ASPrev")||(_Type=="MPFAC3ASPrev2")||(_Type=="MPFAC3ASPrev3")
||(_Type=="MPFAC3FIN")||(_Type=="MPFAC3FINPrev")||(_Type=="MPFAC3FINPrev2")||(_Type=="MPFAC3FINPrev3"))))
                    {
                        //*****  Data for MP, OT Req and Actual                  
                        MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                        //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                        DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);

                        // ** Man Power Attandance
                        mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                        mManPower.Xdate = i;


                        mManPower.SumMPD = MPCount_D;
                        mManPower.SumMPN = MPCount_N;

                        SumMP_ACTD += SumFOLE_ACTD;
                        SumMP_ACTN += SumFOLE_ACTN;

                        mManPower.SumMP_ACTD = SumMP_ACTD;
                        mManPower.SumMP_ACTN = SumMP_ACTN;

                        if (SumMP_ACTD != 0)
                        {
                            mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                        }
                        else
                        {
                            mManPower.SumMP_DIFFD = 0;

                        }

                        if (SumMP_ACTN != 0)
                        {

                            mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                        }
                        else
                        {

                            mManPower.SumMP_DIFFN = 0;
                        }

                        // ** OT Req,ACT


                        mManPower.SumOT_ReqD = SumOT_ReqD;
                        mManPower.SumOT_ReqN = SumOT_ReqN;
                        mManPower.SumOT_ActD = SumOT_ActD;
                        mManPower.SumOT_ActN = SumOT_ActN;

                        oListMP.Add(mManPower);
                    }

                    //    if (((FlagInsert == 1) && (setDate >= EndYesterday) && (setDate <= dateEnd) ) && ((_Type == "MPFAC3CY") || (_Type == "MPFAC3CP") || (_Type == "MPFAC3CS") || (_Type == "MPFAC3FH") || (_Type == "MPFAC3RH") ||
                    //(_Type == "MPFAC3PI") || (_Type == "MPFAC3MOT") || (_Type == "MPFAC3MA") ||
                    //(_Type == "MPFAC3AS") || (_Type == "MPFAC3FIN")))
                    //    {

                    //        SqlCommand UpdateMNOT = new SqlCommand();
                    //        UpdateMNOT.CommandText = "Update  BC_MANPOWER  " +
                    //                " set STD_MPDay ='" + MPCount_D + "',ACT_MPDay ='" + SumMP_ACTD + "' " +
                    //                ",STD_MPNight ='" + MPCount_N + "',ACT_MPNight ='" + SumMP_ACTN + "' " +
                    //                ",STD_OTDay ='" + MPCount_D + "',REQ_OTDay ='" + SumOT_ReqD + "',ACT_OTDay = '" + SumOT_ActD + "'" +
                    //                ",STD_OTNight ='" + MPCount_N + "',REQ_OTNight ='" + SumOT_ReqN + "',ACT_OTNight = '" + SumOT_ActN + "'" +
                    //                "where  Fiscal_year ='" + _Year + "' and Monthly ='" + _Month + "' and Daily ='" + i + "' and ProductType ='" + Txt_Type + "'";

                    //        oConn.SqlExecute(UpdateMNOT, "DBBCS");
                    //    }
                    //    else if ((FlagInsert == 0) && (_Type == "MPFAC3CY") || (_Type == "MPFAC3CP") || (_Type == "MPFAC3CS") || (_Type == "MPFAC3FH") || (_Type == "MPFAC3RH") ||
                    //(_Type == "MPFAC3PI") || (_Type == "MPFAC3MOT") || (_Type == "MPFAC3MA") ||
                    //(_Type == "MPFAC3AS") || (_Type == "MPFAC3FIN"))
                    //    {

                    //        SqlCommand InsertMNOT = new SqlCommand();

                    //        InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                    //            ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                    //            ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                    //            " VALUES ('" + _Year + "','" + _Month + "','" + i + "','" + Txt_Type + "' " +
                    //            ",'" + MPCount_D + "','" + SumMP_ACTD + "' " +
                    //            ",'" + MPCount_N + "','" + SumMP_ACTN + "' " +
                    //            ",'" + MPCount_D + "','" + SumOT_ReqD + "','" + SumOT_ActD + "' " +
                    //            ",'" + MPCount_N + "','" + SumOT_ReqN + "','" + SumOT_ActN + "')";
                    //        //}           



                    //        oConn.SqlExecute(InsertMNOT, "DBBCS");


                    //   // }
                    //}
                    //else
                            if ((setDate > dateEnd) && ((_Type == "MPFAC3CY") || (_Type == "MPFAC3CP") || (_Type == "MPFAC3CS") || (_Type == "MPFAC3FH") || (_Type == "MPFAC3RH") ||
                    (_Type == "MPFAC3PI") || (_Type == "MPFAC3MOT") || (_Type == "MPFAC3MA") ||
                    (_Type == "MPFAC3AS") || (_Type == "MPFAC3FIN")
                    || (_Type == "MPFAC3CYPrev") || (_Type == "MPFAC3CYPrev2") || (_Type == "MPFAC3CYPrev3")
                                 || (_Type == "MPFAC3CS") || (_Type == "MPFAC3CSPrev") || (_Type == "MPFAC3CSPrev2") || (_Type == "MPFAC3CSPrev3")
|| (_Type == "MPFAC3FH") || (_Type == "MPFAC3FHPrev") || (_Type == "MPFAC3FHPrev2") || (_Type == "MPFAC3FHPrev3")
|| (_Type == "MPFAC3RH") || (_Type == "MPFAC3RHPrev") || (_Type == "MPFAC3RHPrev2") || (_Type == "MPFAC3RHPrev3")
|| (_Type == "MPFAC3PI") || (_Type == "MPFAC3PIPrev") || (_Type == "MPFAC3PIPrev2") || (_Type == "MPFAC3PIPrev3")
|| (_Type == "MPFAC3MOT") || (_Type == "MPFAC3MOTPrev") || (_Type == "MPFAC3MOTPrev2") || (_Type == "MPFAC3MOTPrev3")
|| (_Type == "MPFAC3MA") || (_Type == "MPFAC3MAPrev") || (_Type == "MPFAC3MAPrev2") || (_Type == "MPFAC3MAPrev3")
|| (_Type == "MPFAC3AS") || (_Type == "MPFAC3ASPrev") || (_Type == "MPFAC3ASPrev2") || (_Type == "MPFAC3ASPrev3")
|| (_Type == "MPFAC3FIN") || (_Type == "MPFAC3FINPrev") || (_Type == "MPFAC3FINPrev2") || (_Type == "MPFAC3FINPrev3")))
                    {
                        //*****  Data for MP, OT Req and Actual                  
                        MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                        //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                        DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);
                        // ** Man Power Attandance
                        mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                        mManPower.Xdate = i;

                        mManPower.SumMPD = 0;
                        mManPower.SumMPN = 0;

                        SumMP_ACTD += 0;
                        SumMP_ACTN += 0;

                        mManPower.SumMP_ACTD = 0;
                        mManPower.SumMP_ACTN = 0;
                        mManPower.SumMP_DIFFD = 0;
                        mManPower.SumMP_DIFFN = 0;

                        // ** OT Req,ACT

                     

                        mManPower.SumOT_ReqD = 0;
                        mManPower.SumOT_ReqN = 0;
                        mManPower.SumOT_ActD = 0;
                        mManPower.SumOT_ActN = 0;

                        oListMP.Add(mManPower);

                    }

                    MPCount_D = 0;
                    MPCount_N = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;

                    SumMP_ACTN = 0;
                    SumOT_ReqD = 0;
                    SumOT_ReqN = 0;
                    SumOT_ActD = 0;
                    SumOT_ActN = 0;
                    MPFOLE_ALL = 0;

                    SumMP_ACTN = 0;
                    SumOT_ActD = 0;
                    SumOT_ActN = 0;
                    SUMMPD = 0;
                    SUMMPN = 0;
                    SUMOT_REQNN = 0;
                    SUMOT_REQDD = 0;
                    SUMOT_ACTD = 0;
                    SUMOT_ACTN = 0;
                    MPFOLE_D = 0;
                    MPFOLE_N = 0;
                    LECount_D = 0;
                    LECount_N = 0;
                    FOCount_D = 0;
                    FOCount_N = 0;
                    SumFOLE_ACTD = 0;
                    SumFOLE_ACTN = 0;
                    FlagInsert = 1;


                    //} //exit Check EndYesterday
                }// exit loop
            }
            else
            {

                //------------------Not have data for  OT Req --------------------//

                int Xdate = 0;
                int Yester = 0;
                int SUMOT_REQD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
                int SUMOT_REQN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
                int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
                int SUMMP_SHIFT = 0, SUMACT_MP = 0;
                //int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;

                for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                {


                    foreach (DataRow item in dtMNOT.Rows)
                    {

                        if (i == Convert.ToInt16(item["Daily"].ToString()))
                        {
                            // ** Man Power Attandance
                            DatetoDay = i + ":" + setDate.DayOfWeek.ToString().Substring(0, 3);
                            Xdate = i;

                            MPCount_D = Convert.ToInt16(item["STD_MPDay"].ToString());
                            MPCount_N = Convert.ToInt16(item["STD_MPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());


                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["REQ_OTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["REQ_OTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["ACT_OTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["ACT_OTNight"].ToString());
                        }
                    }





                    //*****  Data for MP, OT Req and Actual                  
                    MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();




                    // ** Man Power Attandance
                    mManPower.DatetoDay = DatetoDay;
                    mManPower.Xdate = Xdate;

                  


                    mManPower.SumMPD = MPCount_D;
                    mManPower.SumMPN = MPCount_N;

                  

                    mManPower.SumMP_ACTD = SumMP_ACTD;
                    mManPower.SumMP_ACTN = SumMP_ACTN;

                    if (SumMP_ACTD != 0)
                    {
                        mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                    }
                    else
                    {
                        mManPower.SumMP_DIFFD = 0;

                    }

                    if (SumMP_ACTN != 0)
                    {

                        mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                    }
                    else
                    {

                        mManPower.SumMP_DIFFN = 0;
                    }



                    // ** OT Req,ACT

                 

                    mManPower.SumOT_ReqD = SumOT_ReqD;
                    mManPower.SumOT_ReqN = SumOT_ReqN;
                    mManPower.SumOT_ActD = SumOT_ActD;
                    mManPower.SumOT_ActN = SumOT_ActN;


                    oListMP.Add(mManPower);

                }

            }

        }
        else
        {

            //------------------ Man-Power Daily for New Record or Erase Record to Insert---------------//

            int idxMP = 0;
            //--------------- Get Employee working Time ---------------------
            DataTable dtempWorkingTime = new DataTable();

          
            //int SumOT1 = 0, OT1 = 0, OT15 = 0, OT2 = 0, OT3 = 0;
            int SUMMPD = 0, DOT1 = 0, DOT15 = 0, DOT2 = 0, DOT3 = 0, SDOT1 = 0, SDOT15 = 0, SDOT2 = 0, SDOT3 = 0;
            int SUMMPN = 0, HOT1 = 0, HOT15 = 0, HOT2 = 0, HOT3 = 0, SHOT1 = 0, SHOT15 = 0, SHOT2 = 0, SHOT3 = 0;
            int SUMMPH = 0, NOT1 = 0, NOT15 = 0, NOT2 = 0, NOT3 = 0, SNOT1 = 0, SNOT15 = 0, SNOT2 = 0, SNOT3 = 0;



            DataTable dtWorkTime = new DataTable();
            dtWorkTime.Columns.Add("Code", typeof(string));
            dtWorkTime.Columns.Add("WorkDate", typeof(string));
            dtWorkTime.Columns.Add("POSIT", typeof(string));
            dtWorkTime.Columns.Add("OT1", typeof(int));
            dtWorkTime.Columns.Add("OT15", typeof(int));
            dtWorkTime.Columns.Add("OT2", typeof(int));
            dtWorkTime.Columns.Add("OT3", typeof(int));
            dtWorkTime.Columns.Add("SUMOT", typeof(int));
            dtWorkTime.Columns.Add("REQDOT1", typeof(int));
            dtWorkTime.Columns.Add("REQDOT15", typeof(int));
            dtWorkTime.Columns.Add("REQDOT2", typeof(int));
            dtWorkTime.Columns.Add("REQDOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMDOTREQ", typeof(int));
            dtWorkTime.Columns.Add("SUMMPReqD", typeof(int));
            dtWorkTime.Columns.Add("DOT1", typeof(int));
            dtWorkTime.Columns.Add("DOT15", typeof(int));
            dtWorkTime.Columns.Add("DOT2", typeof(int));
            dtWorkTime.Columns.Add("DOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMDOT", typeof(int));
            dtWorkTime.Columns.Add("SUMMPD", typeof(int));

            dtWorkTime.Columns.Add("REQNOT1", typeof(int));
            dtWorkTime.Columns.Add("REQNOT15", typeof(int));
            dtWorkTime.Columns.Add("REQNOT2", typeof(int));
            dtWorkTime.Columns.Add("REQNOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMNOTREQ", typeof(int));
            dtWorkTime.Columns.Add("SUMMPReqN", typeof(int));
            dtWorkTime.Columns.Add("NOT1", typeof(int));
            dtWorkTime.Columns.Add("NOT15", typeof(int));
            dtWorkTime.Columns.Add("NOT2", typeof(int));
            dtWorkTime.Columns.Add("NOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMNOT", typeof(int));
            dtWorkTime.Columns.Add("SUMMPN", typeof(int));

            dtWorkTime.Columns.Add("REQHOT1", typeof(int));
            dtWorkTime.Columns.Add("REQHOT15", typeof(int));
            dtWorkTime.Columns.Add("REQHOT2", typeof(int));
            dtWorkTime.Columns.Add("REQHOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMHOTREQ", typeof(int));
            dtWorkTime.Columns.Add("SUMMPReqH", typeof(int));
            dtWorkTime.Columns.Add("HOT1", typeof(int));
            dtWorkTime.Columns.Add("HOT15", typeof(int));
            dtWorkTime.Columns.Add("HOT2", typeof(int));
            dtWorkTime.Columns.Add("HOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMHOT", typeof(int));
            dtWorkTime.Columns.Add("SUMMPH", typeof(int));


            //--------------- Get Employee working Time ---------------------
            //int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
            int FlagUdate = 0;
            //int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;
            //string DatetoDay = "";
            int Xdate = 0;
            int Yester = 0;
            int SUMOT_REQD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
            int SUMOT_REQN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
            int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
            int SUMMP_SHIFT = 0, SUMACT_MP = 0;
            //int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;

            for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
            {

                if (i >= 2)
                {
                    Yester = i - 1;
                    setyesterday = new DateTime(DateTime.Now.Year, setDate.Month, Yester);

                }
                setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);




                //if ((setDate.ToString("yyyy-MM-dd") == EndYesterday.ToString("yyyy-MM-dd"))
                //    || (setyesterday.ToString("yyyy-MM-dd") == Endtoday.ToString("yyyy-MM-dd")))
                //if (setDate.ToString("yyyy-MM-dd") <= Endtoday.ToString("yyyy-MM-dd"))
                //if ((setDate >= EndYesterday) && (setDate <= Endtoday))
                //if (setDate <= Endtoday)
                //{
                //    FlagUdate = 1;

                //----------------- Fillter Working Time -------------
                bool Working = false;
              


                sql.CommandText = "SELECT e.Posit,WorkShift,WorkType,otr.OTFROM ,[WCode],[WDate],[WTime],[WDoor],es.[WType],LTRIM(DATEDIFF(MINUTE, 0, otr.OT1)) as OT1,LTRIM(DATEDIFF(MINUTE, 0, otr.OT15)) as OT15 " +
  ",LTRIM(DATEDIFF(MINUTE, 0, otr.OT2)) as OT2,LTRIM(DATEDIFF(MINUTE, 0, otr.OT3)) as OT3 " +
  " FROM [dbDCI].[dbo].[EmployeeTimeStamp] es " +
  " LEFT JOIN [dbDCI].[dbo].[Employee] e ON es.WCode = e.CODE " +
  " LEFT JOIN [dbDCI].[dbo].[EmployeeWorkingTime] wt ON es.WCode = wt.Code " +
  " LEFT JOIN [dbDCI].[dbo].[EMP_OTRQ] otr ON es.WCode = otr.CODE AND es.WDate = otr.ODATE " +
  " WHERE WDate >= '" + setDate.ToString("yyyy-MM-dd") + "' AND WDate <= '" + setDate.ToString("yyyy-MM-dd") + "' AND es.WType = 'O' " +
  " And OTFROM != ''" +
  "	AND CONVERT(DATE, wt.SystemOUT) = WDate " +
  " And  ( " + txtAndon + "')" +
  " order by WDate  desc";


                DataTable dtt = oConn.SqlGet(sql, "DBDCI");
                if (dtt.Rows.Count > 0)
                {

                    


                    DataTable MPDataDirect = GetManPowerByLine(txtCostCenter);
                    //DataTable MPDataOP = GetManPowerByLineOP(txtAndon, "OP");
                    MPCount_D += Convert.ToInt16(MPDataDirect.Rows[0]["MP_D"]);
                    MPCount_N += Convert.ToInt16(MPDataDirect.Rows[0]["MP_N"]);

                 
                    SumFOLE_ACTD += GetWorkActByLineDay(txtCostCenter, setDate);
                    SumFOLE_ACTN += GetWorkActByLineNight(txtCostCenter, setDate);

                    //-------OT Req, Actual Day,Night

                    SumOT_ReqD += GetOTReqByLineDay(txtCostCenter, setDate);
                    SumOT_ReqN += GetOTReqByLineNight(txtCostCenter, setDate);
                    SumOT_ActD += GetOTActByLineDay(txtCostCenter, setDate);
                    SumOT_ActN += GetOTActByLineNight(txtCostCenter, setDate);

                }
                else
                {
                 

                    DataTable MPDataDirect = GetManPowerByLine(txtCostCenter);
                    //DataTable MPDataOP = GetManPowerByLineOP(txtAndon, "OP");
                    MPCount_D += Convert.ToInt16(MPDataDirect.Rows[0]["MP_D"]);
                    MPCount_N += Convert.ToInt16(MPDataDirect.Rows[0]["MP_N"]);


                    SumFOLE_ACTD += GetWorkActByLineDay(txtCostCenter, setDate);
                    SumFOLE_ACTN += GetWorkActByLineNight(txtCostCenter, setDate);

                    //SumFOLE_ACTD += GetWorkActByLineDayFOLE_Direct(txtCostCenter, setDate);
                    //SumFOLE_ACTN += GetWorkActByLineNightFOLE_Direct(txtCostCenter, setDate);

                    //-------OT Req, Actual Day,Night



                    SumOT_ReqD += GetOTReqByLineDay(txtCostCenter, setDate);
                    SumOT_ReqN += GetOTReqByLineNight(txtCostCenter, setDate);
                    SumOT_ActD += GetOTActByLineDay(txtCostCenter, setDate);
                    SumOT_ActN += GetOTActByLineNight(txtCostCenter, setDate);

                    //SumOT_ReqD += GetOTReqByLineDayFOLE_Direct(txtCostCenter, setDate);
                    //SumOT_ReqN += GetOTReqByLineNightFOLE_Direct(txtCostCenter, setDate);
                    //SumOT_ActD += GetOTActByLineDayFOLE_Direct(txtCostCenter, setDate);
                    //SumOT_ActN += GetOTActByLineNightFOLE_Direct(txtCostCenter, setDate);

                }




                //*****  Data for MP, OT Req and Actual                  
                MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);
                //SUMMP_SHIFT = MPCountALL;
                //SUMACT_MP = SUMOT_REQD + SUMOT_REQN;


                // ** Man Power Attandance
                mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                mManPower.Xdate = i;

                //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                //  mManPower.SumMP_STD = SUMACT_MP;
                MPCount_D += LECount_D + FOCount_D;
                MPCount_N += LECount_N + FOCount_N;


                mManPower.SumMPD = MPCount_D;
                mManPower.SumMPN = MPCount_N;

                SumMP_ACTD += SumFOLE_ACTD;
                SumMP_ACTN += SumFOLE_ACTN;

                mManPower.SumMP_ACTD = SumMP_ACTD;
                mManPower.SumMP_ACTN = SumMP_ACTN;

                if (SumMP_ACTD != 0)
                {
                    mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                }
                else
                {
                    mManPower.SumMP_DIFFD = 0;

                }

                if (SumMP_ACTN != 0)
                {

                    mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                }
                else
                {

                    mManPower.SumMP_DIFFN = 0;
                }


                // ** OT Req,ACT

             

                mManPower.SumOT_ReqD = SumOT_ReqD;
                mManPower.SumOT_ReqN = SumOT_ReqN;
                mManPower.SumOT_ActD = SumOT_ActD;
                mManPower.SumOT_ActN = SumOT_ActN;



                oListMP.Add(mManPower);



                //if (ii == MonthSelect)
                //{
                // *** OT Does not Insert  Man Power Daily
                if ((_Type == "MPFAC3CY") || (_Type == "MPFAC3CP") ||
                    (_Type == "MPFAC3CS") || (_Type == "MPFAC3FH") || (_Type == "MPFAC3RH") ||
                    (_Type == "MPFAC3PI") || (_Type == "MPFAC3MOT") || (_Type == "MPFAC3MA") ||
                    (_Type == "MPFAC3AS") || (_Type == "MPFAC3FIN")
                    || (_Type == "MPFAC3CYPrev") || (_Type == "MPFAC3CYPrev2") || (_Type == "MPFAC3CYPrev3")
                     ||(_Type=="MPFAC3CS")||(_Type=="MPFAC3CSPrev")||(_Type=="MPFAC3CSPrev2")||(_Type=="MPFAC3CSPrev3")
||(_Type=="MPFAC3FH")||(_Type=="MPFAC3FHPrev")||(_Type=="MPFAC3FHPrev2")||(_Type=="MPFAC3FHPrev3")
||(_Type=="MPFAC3RH")||(_Type=="MPFAC3RHPrev")||(_Type=="MPFAC3RHPrev2")||(_Type=="MPFAC3RHPrev3")
||(_Type=="MPFAC3PI")||(_Type=="MPFAC3PIPrev")||(_Type=="MPFAC3PIPrev2")||(_Type=="MPFAC3PIPrev3")
||(_Type=="MPFAC3MOT")||(_Type=="MPFAC3MOTPrev")||(_Type=="MPFAC3MOTPrev2")||(_Type=="MPFAC3MOTPrev3")
||(_Type=="MPFAC3MA")||(_Type=="MPFAC3MAPrev")||(_Type=="MPFAC3MAPrev2")||(_Type=="MPFAC3MAPrev3")
||(_Type=="MPFAC3AS")||(_Type=="MPFAC3ASPrev")||(_Type=="MPFAC3ASPrev2")||(_Type=="MPFAC3ASPrev3")
||(_Type=="MPFAC3FIN")||(_Type=="MPFAC3FINPrev")||(_Type=="MPFAC3FINPrev2")||(_Type=="MPFAC3FINPrev3"))
                   
                {
                    SqlCommand InsertMNOT = new SqlCommand();

                    InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                        ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                        ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                        " VALUES ('" + _Year + "','" + _Month + "','" + i + "','" + Txt_Type + "' " +
                        ",'" + MPCount_D + "','" + SumMP_ACTD + "' " +
                        ",'" + MPCount_N + "','" + SumMP_ACTN + "' " +
                        ",'" + MPCount_D + "','" + SumOT_ReqD + "','" + SumOT_ActD + "' " +
                        ",'" + MPCount_N + "','" + SumOT_ReqN + "','" + SumOT_ActN + "')";
                    //}           



                   oConn.SqlExecute(InsertMNOT, "DBBCS");
                }


                MPCount_D = 0;
                MPCount_N = 0;
                SumMP_ACTD = 0;
                SumMP_ACTN = 0;

                SumMP_ACTN = 0;
                SumOT_ReqD = 0;
                SumOT_ReqN = 0;
                SumOT_ActD = 0;
                SumOT_ActN = 0;
                MPFOLE_ALL = 0;

                SumMP_ACTN = 0;
                SumOT_ActD = 0;
                SumOT_ActN = 0;
                SUMMPD = 0;
                SUMMPN = 0;
                SUMOT_REQN = 0;
                SUMOT_REQD = 0;
                SUMOT_ACTD = 0;
                SUMOT_ACTN = 0;
                MPFOLE_D = 0;
                MPFOLE_N = 0;
                LECount_D = 0;
                LECount_N = 0;
                FOCount_D = 0;
                FOCount_N = 0;
                SumFOLE_ACTD = 0;
                SumFOLE_ACTN = 0;
            }

        }


        //   }




        PrdMonth = 0;
        SumPrdMonth = 0;
     

        accuOP1 = 0;
        accuOP15 = 0;
        accuOP2 = 0;
        accuOP3 = 0;

        accuLE1 = 0;
        accuLE15 = 0;
        accuLE2 = 0;
        accuLE3 = 0;

        accuFO1 = 0;
        accuFO15 = 0;
        accuFO2 = 0;
        accuFO3 = 0;

        accuSU1 = 0;
        accuSU15 = 0;
        accuSU2 = 0;
        accuSU3 = 0;

   


        CountMPOTREQD = 0;
        CountMPOTREQN = 0;
        //       CountMPD = 0;
        CountMPN = 0;
        CountMPH = 0;
        SumMP = 0;


        return oListMP;
    }
    public List<MMPInfo.MPAllChartInfo> GetChartMPDaily(int _Year, int _Month, DateTime _DataDate, string _Type)
    {

        List<MMPInfo.MPAllChartInfo> oListMP = new List<MMPInfo.MPAllChartInfo>();

        //* Maintenance 
        string[] ArryMT = { "4310", "4320" };
        string[] ArryMTM = { "4310" };
        string[] ArryMTA = { "4320" };


        string[] ArryPrd = { "1YC", "2YC", "SCR", "1YC/3", "ODM" };
        //string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702", "4310", "4320", "4510", "4720", "8120" };
        string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702" };
        string[] ArryPrdFac1 = { "1101", "1102" };
        //string[] ArryPrdAndonFac1 = { "001", "049", "052", "054", "056", "057", "058", "062", "063", "065", "066", "069", "072", "074", "076", "077", "080", "083", "084", "089","090","093","095","098","103","106","107" };
        //string[] ArryPrdAndonFac2 = { "004", "005", "006", "007", "008", "009", "010", "011", "012", "013", "014", "015", "017", "018", "019", "020", "021", "022", "023", "026", "027", "028", "030", "031", "033", "034", "036", "037", "041", "043", "044", "045", "046", "051", "053", "059", "061", "068", "070", "071", "073" };
        string[] ArryPrdFac1M = { "1101" };
        string[] ArryPrdFac1A = { "1102" };
        string[] ArryPrdFac2 = { "1201", "1202", "1301", "1302", "1401", "1402" };
        string[] ArryPrdFac2M = { "1201" };
        string[] ArryPrdFac2A = { "1202" };
        string[] ArryPrdFac2Mo = { "1401" };
        string[] ArryPrdFac2MoA = { "1402" };
        string[] ArryPrdSCA = { "1301", "1302" };
        string[] ArryPrdSCRM = { "1301" };
        string[] ArryPrdSCRA = { "1302" };
        string[] ArryPrdFac3 = { "1701", "1702","1703" };
        string[] ArryPrdFac3M = { "1701" };
        string[] ArryPrdMachine = { "305","306", "307", "308", "304", "310", "302", "301", "303" };
        string[] ArryPrdFac3CY = { "305" };
        string[] ArryPrdFac3CS = { "306" };
        string[] ArryPrdFac3A = { "1702" };
        string[] ArryPrdODM = { "1501" };

        string[] ArryPeriod = { "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod1 = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod2 = { "PRD_JAN", "PRD_FEB", "PRD_MAR", "PRD_APR", "PRD_MAY", "PRD_JUN", "PRD_JUL", "PRD_AUG", "PRD_SEP", "PRD_OCT", "PRD_NOV", "PRD_DEC" };

        int[] ArryDay = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 };
        int[] ArryMonth = { 4, 5, 6, 7, 8, 9, 10, 11, 12 };

        int[] ArryMonth1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };


        string pAccGroup = "EXP";
        string pBudgetType = "DI";
        string pYear = _DataDate.ToString("yyyy");
        string pMonth = _DataDate.ToString("MM");
        //  DateTime _ThisYear = new DateTime();
        DateTime _LastYear = new DateTime();
        DateTime _Last2Year = new DateTime();
        DateTime _Last3Year = new DateTime();
        // _ThisYear = _DataDate.Year;
        _LastYear = _DataDate.AddYears(-1);
        _Last2Year = _DataDate.AddYears(-2);
        _Last3Year = _DataDate.AddYears(-3);
        string pLastYear = _LastYear.ToString("yyyy");
        string pLast2Year = _Last2Year.ToString("yyyy");
        string pLast3Year = _Last3Year.ToString("yyyy");
        // string ThisYear = _ThisYear.tostring("yyyy");
        string TxtModel = " ";


        int PresentYear = Convert.ToInt16(_DataDate.Year);

        string Factory = "";
        string Txt_Type = "";


        #region init



        int[] _PrdActual = new int[12];

        string[] ArrySeires5 = new string[5];
        Decimal[] ArrySeiresValue5 = new Decimal[5];



        #endregion

        string[] ArryLoop = new string[0];
        string ProductType = "";
        string TargetType = "";
        if (_Type == "ALL")
        {
            ArryLoop = ArryPrdALL;
            TargetType = "DCI";

            txtCostCenter = " = " + ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1] +
              " or [COSTCENTER] = " + ArryLoop[2] + " or [COSTCENTER] = " + ArryLoop[3] +
               " or [COSTCENTER] = " + ArryLoop[4] + " or [COSTCENTER] = " + ArryLoop[5] +
               " or [COSTCENTER] = " + ArryLoop[6] + " or [COSTCENTER] = " + ArryLoop[7] +
            " or [COSTCENTER] = " + ArryLoop[8] + " or [COSTCENTER] = " + ArryLoop[9] +
            " or [COSTCENTER] = " + ArryLoop[10];

        }
        else if ((_Type == "MPMTALL") || (_Type == "OTMTALL"))
        {
            ArryLoop = ArryPrdFac1;
            ProductType = "1YC";
            TargetType = "1YC";
            TxtModel = "1YC%";
            Factory = "1";
            Txt_Type = "FAC1";

        }
        else if ((_Type == "MPFAC1") || (_Type == "MPFAC1Prev") || (_Type == "MPFAC1Prev2") || (_Type == "MPFAC1Prev3") || (_Type == "MPFAC1Next") ||
            (_Type == "OTFAC1") || (_Type == "OTFAC1Prev") | (_Type == "OTFAC1Prev2") || (_Type == "OTFAC1Prev3") || (_Type == "OTFAC1Next"))
        {
            ArryLoop = ArryPrdFac1;
            txtCostCenter = ArryLoop[0] + " or COSTCENTER = " + ArryLoop[1];
            ProductType = "1YC";
            TargetType = "1YC";
            TxtModel = "1YC%";
            Factory = "1";
            Txt_Type = "FAC1";

        }
        else if (_Type == "MPFAC1M")
        {
            ArryLoop = ArryPrdFac1M;
            ProductType = "1YC";
            TargetType = "1YC";
            Txt_Type = "FAC1M";
        }
        else if (_Type == "MPFAC1A")
        {
            ArryLoop = ArryPrdFac1A;
            ProductType = "1YC";
            TargetType = "1YC";
            Txt_Type = "FAC1A";
        }
        else if ((_Type == "MPFAC2") || (_Type == "MPFAC2Prev") || (_Type == "MPFAC2Prev2") || (_Type == "MPFAC2Prev3") || (_Type == "MPFAC2Next") ||
          (_Type == "OTFAC2") || (_Type == "OTFAC2Prev") | (_Type == "OTFAC2Prev2") || (_Type == "OTFAC2Prev3") || (_Type == "OTFAC2Next"))
        {
            ArryLoop = ArryPrdFac2;
            txtCostCenter = ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1] +
                      " or [COSTCENTER] = " + ArryLoop[2] + " or [COSTCENTER] = " + ArryLoop[3] +
                       " or [COSTCENTER] = " + ArryLoop[4] + " or [COSTCENTER] = " + ArryLoop[5];
            //txtCostCenter = ArryLoop[0] + " or COSTCENTER = " + ArryLoop[1] + " or COSTCENTER = " + ArryLoop[2] + " or COSTCENTER = " + ArryLoop[3] + " or COSTCENTER = " + ArryLoop[4] + " or COSTCENTER = " + ArryLoop[5] + " or COSTCENTER = " + ArryLoop[6] + " or COSTCENTER = " + ArryLoop[7];
            ProductType = "2YC";
            TargetType = "2YC";
            TxtModel = "2YC%";
            Factory = "2";
            Txt_Type = "FAC2";
        }
        else if (_Type == "MPFAC2M")
        {
            ArryLoop = ArryPrdFac2M;
            ProductType = "2YC";
            TargetType = "2YC";
            Txt_Type = "FAC2M";
        }
        else if (_Type == "MPFAC2A")
        {
            ArryLoop = ArryPrdFac2A;
            ProductType = "2YC";
            TargetType = "2YC";
            Txt_Type = "FAC2A";
        }
        else if (_Type == "MPFAC2MOM")
        {
            ArryLoop = ArryPrdFac2M;
            ProductType = "2YC";
            TargetType = "2YC";
            Txt_Type = "FAC2MOM";
        }
        else if (_Type == "MPFAC2MOA")
        {
            ArryLoop = ArryPrdFac2A;
            ProductType = "2YC";
            TargetType = "2YC";
            Txt_Type = "FAC2MOA";
        }
        else if ((_Type == "MPFAC3") || (_Type == "MPFAC3Prev") || (_Type == "MPFAC3Prev2") || (_Type == "MPFAC3Prev3") || (_Type == "MPFAC3Next") ||
            (_Type == "OTFAC3") || (_Type == "OTFAC3Prev") | (_Type == "OTFAC3Prev2") || (_Type == "OTFAC3Prev3") || (_Type == "OTFAC3Next"))
        {
            ArryLoop = ArryPrdFac3;
            txtCostCenter = ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1] + " or [COSTCENTER] = " + ArryLoop[2];
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            TxtModel = "1YC%";
            Factory = "3";
            Txt_Type = "FAC3";
        }
        else if ((_Type == "MPFAC3M") || (_Type == "OTFAC3M"))
        {
            ArryLoop = ArryPrdFac3M;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            Factory = "3";
            Txt_Type = "FAC3M";

        }
        else if ((_Type == "MPFAC3A") || (_Type == "OTFAC3A"))
        {
            ArryLoop = ArryPrdFac3A;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            Factory = "3";
            Txt_Type = "FAC3A";
        }
        else if ((_Type == "MPFAC3CS") || (_Type == "OTFAC3CS"))
        {
            ArryLoop = ArryPrdMachine;
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            Factory = "3";
            Txt_Type = "FAC3CS";
        }
        else if ((_Type == "MPODM") || (_Type == "MPODMPrev") || (_Type == "MPODMPrev2") || (_Type == "MPODMPrev3") ||
             (_Type == "OTODM") || (_Type == "OTODMPrev") | (_Type == "OTODMPrev2") || (_Type == "OTODMPrev3"))
        {
            ArryLoop = ArryPrdODM;
            txtCostCenter = ArryLoop[0];
            ProductType = "ODM";
            TargetType = "ODM";
            Factory = "ODM";
            Txt_Type = "ODM";
        }
        else if ((_Type == "MPSCR") || (_Type == "MPSCRPrev") || (_Type == "MPSCRNext") ||
            (_Type == "OTSCR") || (_Type == "OTSCRPrev") || (_Type == "OTSCRNext"))
        {
            ArryLoop = ArryPrdSCA;
            ProductType = "SCR";
            TargetType = "SCR";
            Txt_Type = "SRC";

        }
        else if (_Type == "MPSCRM")
        {
            ArryLoop = ArryPrdSCRM;
            ProductType = "SCR";
            TargetType = "SCR";
            Txt_Type = "SRCM";
        }
        else if (_Type == "MPSCRA")
        {
            ArryLoop = ArryPrdSCRA;
            ProductType = "SCR";
            TargetType = "SCR";
            Txt_Type = "SRCA";
        }



        DateTime strDate = new DateTime(DateTime.Now.Year, _Month, 1, 0, 0, 0);
        DateTime endDate = strDate.AddMonths(1).Date + new TimeSpan(0, 0, 0);

        DateTime strHr = DateTime.Today + new TimeSpan(08, 00, 00);
        DateTime dateEnd = DateTime.Today + new TimeSpan(20, 00, 00);
        DateTime Endtoday = DateTime.Now;
        DateTime EndYesterday = DateTime.Today - new TimeSpan(24, 00, 00);

        int YearSelect = _Year;
        int MonthSelect = _Month;
        int MonthPresent = Endtoday.Month;
        int PrevMonth = _Month - 1;
        int NextMonth = _Month + 1;



        //DataTable dtWorkingHour = new DataTable();
        //dtWorkingHour.Columns.Add("Position", typeof(string));
        //dtWorkingHour.Columns.Add("OT1", typeof(string));
        //dtWorkingHour.Columns.Add("OT15", typeof(string));
        //dtWorkingHour.Columns.Add("OT2", typeof(string));
        //dtWorkingHour.Columns.Add("OT3", typeof(string));
        //string[] arrPotition = { "OP", "LE", "FO", "SU" };
        //foreach (string item in arrPotition)
        //{
        //    dtWorkingHour.Rows.Add(item, "", "", "", "");
        //}


        //------------- Create column header OT  -----------------


        DataTable dtBCPD = new DataTable();
        dtBCPD.Columns.Add("Fiscal_year", typeof(string));
        dtBCPD.Columns.Add("ProductType", typeof(string));
        dtBCPD.Columns.Add("PRD_JAN", typeof(string));
        dtBCPD.Columns.Add("PRD_FEB", typeof(string));
        dtBCPD.Columns.Add("PRD_MAR", typeof(string));
        dtBCPD.Columns.Add("PRD_APR", typeof(string));
        dtBCPD.Columns.Add("PRD_MAY", typeof(string));
        dtBCPD.Columns.Add("PRD_JUN", typeof(string));
        dtBCPD.Columns.Add("PRD_JUL", typeof(string));
        dtBCPD.Columns.Add("PRD_AUG", typeof(string));
        dtBCPD.Columns.Add("PRD_SEP", typeof(string));
        dtBCPD.Columns.Add("PRD_OCT", typeof(string));
        dtBCPD.Columns.Add("PRD_NOV", typeof(string));
        dtBCPD.Columns.Add("PRD_DEC", typeof(string));
        DateTime setDate1 = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sqlBCPD = new SqlCommand();
        sqlBCPD.CommandText = "SELECT Fiscal_year " +
            " ,ProductType,PRD_APR,PRD_MAY,PRD_JUN,PRD_JUL,PRD_AUG " +
            " ,PRD_SEP,PRD_OCT,PRD_NOV,PRD_DEC,PRD_JAN,PRD_FEB,PRD_MAR,Total_PRD " +
           " from BC_PRODUCTION " +
           " where [Fiscal_year] = " + setDate1.Year;


        // int LBCSPD = 0;
        double Prd = 0, Prd1 = 0, Prd2 = 0, Prd3 = 0, Prd4 = 0, Prd5 = 0, Prd6 = 0, Prd7 = 0;
        double Prd8 = 0, Prd9 = 0, Prd10 = 0, Prd11 = 0, Prd12 = 0, SumPrd = 0, SumPrdOverAll = 0, PrdMonth = 0, SumPrdMonth = 0;
        DataTable dt1 = oConn.SqlGet(sqlBCPD, "DBBCS");
        foreach (DataRow item in dt1.Rows)
        {
            DataRow _rowBCSPD = dtBCPD.NewRow();
            _rowBCSPD["Fiscal_year"] = item["Fiscal_year"].ToString();
            _rowBCSPD["ProductType"] = item["ProductType"].ToString();
            _rowBCSPD["PRD_JAN"] = item["PRD_JAN"];
            _rowBCSPD["PRD_FEB"] = item["PRD_FEB"];
            _rowBCSPD["PRD_MAR"] = item["PRD_MAR"];
            _rowBCSPD["PRD_APR"] = item["PRD_APR"];
            _rowBCSPD["PRD_MAY"] = item["PRD_MAY"];
            _rowBCSPD["PRD_JUN"] = item["PRD_JUN"];
            _rowBCSPD["PRD_JUL"] = item["PRD_JUL"];
            _rowBCSPD["PRD_AUG"] = item["PRD_AUG"];
            _rowBCSPD["PRD_SEP"] = item["PRD_SEP"];
            _rowBCSPD["PRD_OCT"] = item["PRD_OCT"];
            _rowBCSPD["PRD_NOV"] = item["PRD_NOV"];
            _rowBCSPD["PRD_DEC"] = item["PRD_DEC"];
            dtBCPD.Rows.Add(_rowBCSPD);
        }


        //---------------- Get Employeee of Line --------------


        DataTable dtAndon = new DataTable();
        dtAndon.Columns.Add("LineCode", typeof(string));
        dtAndon.Columns.Add("LineName", typeof(string));
        dtAndon.Columns.Add("BoardId", typeof(string));
        dtAndon.Columns.Add("LineGroup", typeof(string));
        DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);
        DateTime setyesterday = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sql = new SqlCommand();

        if (_Type == "ALL")
        {

            txtCostCenter = ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1] +
              " or [COSTCENTER] = " + ArryLoop[2] + " or [COSTCENTER] = " + ArryLoop[3] +
               " or [COSTCENTER] = " + ArryLoop[4] + " or [COSTCENTER] = " + ArryLoop[5] +
               " or [COSTCENTER] = " + ArryLoop[6] + " or [COSTCENTER] = " + ArryLoop[7] +
            " or [COSTCENTER] = " + ArryLoop[8] + " or [COSTCENTER] = " + ArryLoop[9] +
            " or [COSTCENTER] = " + ArryLoop[10];



        }
        else if ((_Type == "MPFAC3") || (_Type == "MPFAC3Prev") || (_Type == "MPFAC3Prev2") || (_Type == "MPFAC3Prev3"))
        {
            txtCostCenter = ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1] + " or [COSTCENTER] = " + ArryLoop[2];

        }
        else if (_Type == "MPFAC3CY")
        {
            txtCostCenter = ArryLoop[0];
        }
        else if (_Type == "MPFAC3CS")
        {
            txtCostCenter = ArryLoop[0];
        }
        else if (_Type == "MPFAC3M")
        {
            txtCostCenter = ArryLoop[0];
        }
        else if (_Type == "MPFAC3A")
        {
            txtCostCenter = ArryLoop[0];
        }
        else if (_Type == "MPFAC2")
        {
            txtCostCenter = ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1] +
                         " or [COSTCENTER] = " + ArryLoop[2] + " or [COSTCENTER] = " + ArryLoop[3] +
                          " or [COSTCENTER] = " + ArryLoop[4] + " or [COSTCENTER] = " + ArryLoop[5];
        }
        else if (_Type == "MPFAC2M")
        {
            txtCostCenter = ArryLoop[0];
        }
        else if (_Type == "MPFAC2A")
        {
            txtCostCenter = ArryLoop[0];
        }
        else if (_Type == "MPFAC2MOM")
        {
            txtCostCenter = ArryLoop[0];
        }
        else if (_Type == "MPFAC2MOA")
        {
            txtCostCenter = ArryLoop[0];
        }
        else if (_Type == "MPSCRA")
        {
            txtCostCenter = ArryLoop[0];
        }
        else if (_Type == "MPSCRM")
        {
            txtCostCenter = ArryLoop[0];
        }



        else if (_Type == "MPODM")
        {
            txtCostCenter = ArryLoop[0];
        }


        sql.CommandText = " Select LineCode,LineName,BoardId,LineGroup, " +
                       " PdModel,Factory " +
                       "  FROM PD_LineMstr where factory = '" + Factory + "' " +
                       " order by boardid  ";


        int ii = 0;
        DataTable dt = oConn.SqlGet(sql, "DBPDB");
        foreach (DataRow item in dt.Rows)
        {
            DataRow _rowAndon = dtAndon.NewRow();
            if ((item["LineCode"].ToString() != "") && (item["BoardId"].ToString() != "" && item["BoardId"].ToString() != "-"))
            {
                _rowAndon["LineCode"] = item["LineCode"].ToString();
                _rowAndon["LineName"] = item["LineName"].ToString();
                _rowAndon["BoardId"] = item["BoardId"].ToString();
                _rowAndon["LineGroup"] = item["LineGroup"].ToString();
                dtAndon.Rows.Add(_rowAndon);
            }
        }
        string txtAndon = "";
        int Loopj = 0;
        string sqlandon = " andon like ";
        if (dtAndon.Rows.Count > 0)
        {

            foreach (DataRow _rowMP in dtAndon.Rows)
            {

                if (Loopj == dtAndon.Rows.Count - 1)
                {
                    txtAndon += sqlandon + "'%" + _rowMP["BoardId"].ToString()+ "%' " ;
                }
                else
                {
                    txtAndon += sqlandon + "'%" + _rowMP["BoardId"].ToString() + "%' or ";

                }
                Loopj += 1;
            }
        }

        //  lbMP.Text = dtEmp.Rows.Count.ToString();
        //---------------- Get Employeee of Line --------------        

        //----------------- Create row content Manpower ------------------

        MMPInfo.MPAllChartInfo oItemMPP = new MMPInfo.MPAllChartInfo();

        int accuOP1 = 0, accuOP15 = 0, accuOP2 = 0, accuOP3 = 0, CountMPOP = 1, CountMPOP_D = 0, CountMPOP_N = 0, REQ_MPOP_D = 0, REQ_MPOP_N = 0;
        int accuLE1 = 0, accuLE15 = 0, accuLE2 = 0, accuLE3 = 0, CountMPLE = 1, CountMPLE_D = 0, CountMPLE_N = 0, REQ_MPLE_D = 0, REQ_MPLE_N = 0; ;
        int accuFO1 = 0, accuFO15 = 0, accuFO2 = 0, accuFO3 = 0, CountMPFO = 1, CountMPFO_D = 0, CountMPFO_N = 0, REQ_MPFO_D = 0, REQ_MPFO_N = 0;
        int accuSU1 = 0, accuSU15 = 0, accuSU2 = 0, accuSU3 = 0, CountMPSU = 1, CountMPSU_D = 0, CountMPSU_N = 0, REQ_MPSU_D = 0, REQ_MPSU_N = 0;
        int CountMPOTREQD = 1, CountMPOTREQN = 1, SumMPReqD = 1, SumMPReqN = 1, CountMPN = 1, CountMPH = 1, SumMP = 1;
        int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
        int SumFOLE_ACTD = 0, SumFOLE_ACTN = 0, SumLEOT_ReqD = 0, SumLEOT_ReqN = 0, SumLEOT_ActD = 0, SumLEOT_ActN = 0, SumMP_DIFFD = 0, SumMP_DIFFN = 0;

        double CostOverAllSum = 0;



        //** Productivity start
        for (ii = MonthSelect; ii <= MonthPresent; ii++)
        {
            Prd = 0;
            if (dtBCPD.Rows.Count > 0)
            {

                foreach (DataRow _rowbcpd in dtBCPD.Rows)
                {

                    if (_Type == "FAC2")
                    {
                        if (Convert.ToString(_rowbcpd["ProductType"].ToString()) == "2YC" || Convert.ToString(_rowbcpd["ProductType"].ToString()) == "SCR")
                        {
                            PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                            Prd += PrdMonth;
                            //    SumPrd += Prd;
                        }
                    }
                    else if (_Type == "ALL")
                    {
                        int k = 0;
                        for (k = 1; k <= ArryPrd.Count(); k++)
                        {


                            if (ArryPrd[k - 1] == Convert.ToString(_rowbcpd["ProductType"].ToString()))
                            {
                                if (ArryPrd[k - 1] == "ODM")
                                {
                                    PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                                    PrdMonth = PrdMonth / 20;
                                }
                                else
                                {
                                    PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                                }
                                Prd += PrdMonth;


                            }
                            PrdMonth = 0;
                        }
                    }
                    else

                        if (ProductType == Convert.ToString(_rowbcpd["ProductType"].ToString()))
                        {
                            Prd = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                            // SumPrd += Prd;
                        }


                    // SumPrd += Prd;
                }
                SumPrd += Prd;

            }
        }

        //if (ii < MonthSelect)
        //{
        //    setDate = new DateTime(DateTime.Now.Year, ii, 1);

        //}
        //else if (ii == MonthSelect)
        //{
        //    setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);

        //}
        //else if (ii > MonthSelect)
        //{

        //    setDate = new DateTime(DateTime.Now.Year, NextMonth, 1);

        //}
        //int __Month = setDate.Month;


        // Start Check Working Time OT in DB

        //---------------- Get Employeee of Line --------------
        DataTable dtMNOT = new DataTable();

        dtMNOT.Columns.Add("Fiscal_year", typeof(string));
        dtMNOT.Columns.Add("Monthly", typeof(string));
        dtMNOT.Columns.Add("Daily", typeof(string));
        dtMNOT.Columns.Add("ProductType", typeof(string));

        dtMNOT.Columns.Add("STD_MPDay", typeof(string));
        dtMNOT.Columns.Add("ACT_MPDay", typeof(string));
        dtMNOT.Columns.Add("STD_MPNight", typeof(string));
        dtMNOT.Columns.Add("ACT_MPNight", typeof(string));

        dtMNOT.Columns.Add("STD_OTDay", typeof(string));
        dtMNOT.Columns.Add("REQ_OTDay", typeof(string));
        dtMNOT.Columns.Add("ACT_OTDay", typeof(string));

        dtMNOT.Columns.Add("STD_OTNight", typeof(string));
        dtMNOT.Columns.Add("REQ_OTNight", typeof(string));
        dtMNOT.Columns.Add("ACT_OTNight", typeof(string));



        SqlCommand sqlMNOT = new SqlCommand();


        sqlMNOT.CommandText = "SELECT Fiscal_year,Monthly,Daily,ProductType,STD_MPDay,ACT_MPDay" +
            " ,STD_MPNight,ACT_MPNight,STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight" +
           " FROM BC_MANPOWER where Fiscal_year = '" + _Year + "' and  Monthly = '" + MonthSelect + "' and ProductType ='" + Txt_Type + "' " +
           " order by daily ";



        DataTable dtMOT = oConn.SqlGet(sqlMNOT, "DBBCS");

        if (dtMOT.Rows.Count > 0)
        {
            foreach (DataRow item in dtMOT.Rows)
            {
                DataRow _rowMNOT = dtMNOT.NewRow();
                _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                _rowMNOT["Monthly"] = item["Monthly"].ToString();
                _rowMNOT["Daily"] = item["Daily"].ToString();
                _rowMNOT["ProductType"] = item["ProductType"].ToString();
                _rowMNOT["STD_MPDay"] = item["STD_MPDay"].ToString();
                _rowMNOT["ACT_MPDay"] = item["ACT_MPDay"].ToString();
                _rowMNOT["STD_MPNight"] = item["STD_MPNight"].ToString();
                _rowMNOT["ACT_MPNight"] = item["ACT_MPNight"].ToString();
                _rowMNOT["STD_OTDay"] = item["STD_OTDay"].ToString();
                _rowMNOT["REQ_OTDay"] = item["REQ_OTDay"].ToString();
                _rowMNOT["ACT_OTDay"] = item["ACT_OTDay"].ToString();
                _rowMNOT["STD_OTNight"] = item["STD_OTNight"].ToString();
                _rowMNOT["REQ_OTNight"] = item["REQ_OTNight"].ToString();
                _rowMNOT["ACT_OTNight"] = item["ACT_OTNight"].ToString();

                dtMNOT.Rows.Add(_rowMNOT);
            }

        }


        //** Productivity End


        //   string InsertDD;

        //double MPOP = 4, MPLE = 50, MPFO = 90, MPSU = 100;
        //double totalOP = 0, totalOPOT1 = 0, totalOPOT15 = 0, totalOPOT2 = 0, totalOPOT3 = 0;
        //double totalLE = 0, totalLEOT1 = 0, totalLEOT15 = 0, totalLEOT2 = 0, totalLEOT3 = 0;
        //double totalFO = 0, totalFOOT1 = 0, totalFOOT15 = 0, totalFOOT2 = 0, totalFOOT3 = 0;
        //double totalSU = 0, totalSUOT1 = 0, totalSUOT15 = 0, totalSUOT2 = 0, totalSUOT3 = 0;
        //double TotalOT1 = 0, TotalOT15 = 0, TotalOT2 = 0, TotalOT3 = 0, TotalSum = 0;
        //double TotalMPD = 0, TotalMPN = 0, TotalMPH = 0;
        //double CostOverall = 0;
        //int SumTimeOP = 0, SumTimeLE = 0, SumTimeFO = 0, SumTimeSU = 0;

        int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;
        int LECount_D = 0, LECount_N = 0, FOCount_D = 0, FOCount_N = 0; ;
        int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;
        string DatetoDay = "";

        if (dtMNOT.Rows.Count > 0)
        {
            if ((MonthSelect == MonthPresent) && (_Type == "MPODM") || (_Type == "OTODM") || (_Type == "MPFAC1") || (_Type == "OTFAC1")
                || (_Type == "MPFAC2") || (_Type == "OTFAC2") || (_Type == "MPFAC3") || (_Type == "OTFAC3")
                || (_Type == "MPFAC3A") || (_Type == "OTFAC3A") || (_Type == "MPFAC3M") || (_Type == "OTFAC3M")
                || (_Type == "MPFAC3Prev") || (_Type == "MPFAC3Prev2") || (_Type == "MPFAC3Prev3"))
            {

                int idxMP = 0;
                //--------------- Get Employee working Time ---------------------
                DataTable dtempWorkingTime = new DataTable();

                //int SumOT1 = 0, OT1 = 0, OT15 = 0, OT2 = 0, OT3 = 0;
                int SUMMPD = 0, DOT1 = 0, DOT15 = 0, DOT2 = 0, DOT3 = 0, SDOT1 = 0, SDOT15 = 0, SDOT2 = 0, SDOT3 = 0;
                int SUMMPN = 0, HOT1 = 0, HOT15 = 0, HOT2 = 0, HOT3 = 0, SHOT1 = 0, SHOT15 = 0, SHOT2 = 0, SHOT3 = 0;
                int SUMMPH = 0, NOT1 = 0, NOT15 = 0, NOT2 = 0, NOT3 = 0, SNOT1 = 0, SNOT15 = 0, SNOT2 = 0, SNOT3 = 0;



                DataTable dtWorkTime = new DataTable();
                dtWorkTime.Columns.Add("Code", typeof(string));
                dtWorkTime.Columns.Add("WorkDate", typeof(string));
                dtWorkTime.Columns.Add("POSIT", typeof(string));
                dtWorkTime.Columns.Add("OT1", typeof(int));
                dtWorkTime.Columns.Add("OT15", typeof(int));
                dtWorkTime.Columns.Add("OT2", typeof(int));
                dtWorkTime.Columns.Add("OT3", typeof(int));
                dtWorkTime.Columns.Add("SUMOT", typeof(int));
                dtWorkTime.Columns.Add("REQDOT1", typeof(int));
                dtWorkTime.Columns.Add("REQDOT15", typeof(int));
                dtWorkTime.Columns.Add("REQDOT2", typeof(int));
                dtWorkTime.Columns.Add("REQDOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMDOTREQ", typeof(int));
                dtWorkTime.Columns.Add("SUMMPReqD", typeof(int));
                dtWorkTime.Columns.Add("DOT1", typeof(int));
                dtWorkTime.Columns.Add("DOT15", typeof(int));
                dtWorkTime.Columns.Add("DOT2", typeof(int));
                dtWorkTime.Columns.Add("DOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMDOT", typeof(int));
                dtWorkTime.Columns.Add("SUMMPD", typeof(int));

                dtWorkTime.Columns.Add("REQNOT1", typeof(int));
                dtWorkTime.Columns.Add("REQNOT15", typeof(int));
                dtWorkTime.Columns.Add("REQNOT2", typeof(int));
                dtWorkTime.Columns.Add("REQNOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMNOTREQ", typeof(int));
                dtWorkTime.Columns.Add("SUMMPReqN", typeof(int));
                dtWorkTime.Columns.Add("NOT1", typeof(int));
                dtWorkTime.Columns.Add("NOT15", typeof(int));
                dtWorkTime.Columns.Add("NOT2", typeof(int));
                dtWorkTime.Columns.Add("NOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMNOT", typeof(int));
                dtWorkTime.Columns.Add("SUMMPN", typeof(int));

                dtWorkTime.Columns.Add("REQHOT1", typeof(int));
                dtWorkTime.Columns.Add("REQHOT15", typeof(int));
                dtWorkTime.Columns.Add("REQHOT2", typeof(int));
                dtWorkTime.Columns.Add("REQHOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMHOTREQ", typeof(int));
                dtWorkTime.Columns.Add("SUMMPReqH", typeof(int));
                dtWorkTime.Columns.Add("HOT1", typeof(int));
                dtWorkTime.Columns.Add("HOT15", typeof(int));
                dtWorkTime.Columns.Add("HOT2", typeof(int));
                dtWorkTime.Columns.Add("HOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMHOT", typeof(int));
                dtWorkTime.Columns.Add("SUMMPH", typeof(int));


                //--------------- Get Employee working Time ---------------------
                //int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
                int FlagUdate = 0;
                //int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;

                int Xdate = 0;
                int Yester = 0;
                int SUMOT_REQDD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
                int SUMOT_REQNN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
                int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
                int SUMMP_SHIFT = 0, SUMACT_MP = 0;
                int MC_MPD = 0, MC_MPN = 0, MCACTD = 0, MCACTN = 0;
                string MC_Name = "";
                //int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;
                int FlagInsert = 1;


                for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                {
                    //------------------ Monthly Present Update --------------------//
                    if (i >= 2)
                    {
                        Yester = i - 1;
                        setyesterday = new DateTime(DateTime.Now.Year, setDate.Month, Yester);

                    }
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);

                    if ((setDate >= EndYesterday) && (setDate <= dateEnd))
                    {
                        FlagUdate = 1;

                        //----------------- Fillter Working Time -------------
                        bool Working = false;

                        sql.CommandText = "SELECT e.Posit,WorkShift,WorkType,otr.OTFROM ,[WCode],[WDate],[WTime],[WDoor],es.[WType],LTRIM(DATEDIFF(MINUTE, 0, otr.OT1)) as OT1,LTRIM(DATEDIFF(MINUTE, 0, otr.OT15)) as OT15 " +
          ",LTRIM(DATEDIFF(MINUTE, 0, otr.OT2)) as OT2,LTRIM(DATEDIFF(MINUTE, 0, otr.OT3)) as OT3 " +
          " FROM [dbDCI].[dbo].[EmployeeTimeStamp] es " +
          " LEFT JOIN [dbDCI].[dbo].[Employee] e ON es.WCode = e.CODE " +
          " LEFT JOIN [dbDCI].[dbo].[EmployeeWorkingTime] wt ON es.WCode = wt.Code " +
          " LEFT JOIN [dbDCI].[dbo].[EMP_OTRQ] otr ON es.WCode = otr.CODE AND es.WDate = otr.ODATE " +
          " WHERE WDate >= '" + setDate.ToString("yyyy-MM-dd") + "' AND WDate <= '" + setDate.ToString("yyyy-MM-dd") + "' And e.posit ='OP' AND es.WType = 'O' " +
          " And OTFROM != ''" +
          "	AND CONVERT(DATE, wt.SystemOUT) = WDate " +
        //  " and (CostCenter = " + txtCostCenter + " )" +
        //  " And  ( " + txtAndon + "' or andon ='' )" +
                            " And  ( " + txtAndon + ")" +
          " order by WDate  desc";
                        //" And  ( " + txtAndon +  "' or andon ='' '"+ "')" +

                        DataTable dtt = oConn.SqlGet(sql, "DBDCI");
                        if (dtt.Rows.Count > 0)
                        {


                            //int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;

                            // Get LE, Fo
                            DataTable MPDataLE = GetManPowerByLineFOLE(txtAndon,txtCostCenter,"LE");
                            LECount_D += Convert.ToInt16(MPDataLE.Rows[0]["MP_D"]);
                            LECount_N += Convert.ToInt16(MPDataLE.Rows[0]["MP_N"]);

                            DataTable MPDataFO = GetManPowerByLineFOLE(txtAndon,txtCostCenter, "FO");
                            FOCount_D += Convert.ToInt16(MPDataFO.Rows[0]["MP_D"]);
                            FOCount_N += Convert.ToInt16(MPDataFO.Rows[0]["MP_N"]);


                            // *** Get ManPower OP
                            DataTable MPDataDirect = GetManPowerByLine_Direct(txtAndon);
                            //DataTable MPDataOP = GetManPowerByLineOP(txtAndon, "OP");
                            MPCount_D += Convert.ToInt16(MPDataDirect.Rows[0]["MP_D"]);
                            MPCount_N += Convert.ToInt16(MPDataDirect.Rows[0]["MP_N"]);


                            //MPCountALL += MPFOLE_ALL;
                            //MPCount_D += MPFOLE_D;
                            //MPCount_N += MPFOLE_N;
                            SumMP_ACTD += GetWorkActByLineDayFOLE_Direct(txtAndon, setDate);
                            SumMP_ACTN += GetWorkActByLineNightFOLE_Direct(txtAndon, setDate);

                            //-------OT Req, Actual Day,Night

                            SumOT_ReqD += GetOTReqByLineDayFOLE_Direct(txtAndon, setDate);
                            SumOT_ReqN += GetOTReqByLineNightFOLE_Direct(txtAndon, setDate);
                            SumOT_ActD += GetOTActByLineDayFOLE_Direct(txtAndon, setDate);
                            SumOT_ActN += GetOTActByLineNightFOLE_Direct(txtAndon, setDate);

                            SqlCommand sqlCheck = new SqlCommand();


                            sqlCheck.CommandText = "SELECT * FROM BC_ManPower WHERE ProductType = " +
                           " '" + Txt_Type + "' and Fiscal_year = '" + _Year + "'" +
                               " and Monthly = '" + _Month + "' and Daily ='" + i + "'";
                            DataTable dtCheck = oConBCS.Query(sqlCheck);


                            if (dtCheck.Rows.Count > 0)
                            {

                                FlagInsert = 1;

                            }
                            else
                            {
                                FlagInsert = 0;

                            }


                        }
                        else
                        {




                            SqlCommand sqlCheck = new SqlCommand();
                            sqlCheck.CommandText = "SELECT * FROM BC_ManPower WHERE ProductType = " +
                           " '" + Txt_Type + "' and Fiscal_year = '" + _Year + "'" +
                               " and Monthly = '" + _Month + "' and Daily ='" + i + "'";
                            DataTable dtCheck = oConBCS.Query(sqlCheck);
                            if (dtCheck.Rows.Count > 0)
                            {

                                FlagInsert = 1;
                                //for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                                //{

                                //if (dtAndon.Rows.Count > 0)
                                //{

                                DataTable dtMP = new DataTable();
                                dtMP.Columns.Add("STD_MPDay", typeof(string));
                                dtMP.Columns.Add("STD_MPNight", typeof(string));
                                dtMP.Columns.Add("ACT_MPDay", typeof(string));
                                dtMP.Columns.Add("ACT_MPNight", typeof(string));

                                dtMP.Columns.Add("STD_LEDay", typeof(string));
                                dtMP.Columns.Add("STD_LENight", typeof(string));
                                dtMP.Columns.Add("ACT_LEDay", typeof(string));
                                dtMP.Columns.Add("ACT_LENight", typeof(string));

                                dtMP.Columns.Add("STD_FODay", typeof(string));
                                dtMP.Columns.Add("STD_FONight", typeof(string));
                                dtMP.Columns.Add("ACT_FODay", typeof(string));
                                dtMP.Columns.Add("ACT_FONight", typeof(string));


                                dtMP.Columns.Add("REQ_OTDay", typeof(string));
                                dtMP.Columns.Add("REQ_OTNight", typeof(string));
                                dtMP.Columns.Add("ACT_OTDay", typeof(string));
                                dtMP.Columns.Add("ACT_OTNight", typeof(string));

                                foreach (DataRow item in dtCheck.Rows)
                                {

                                    if (i == Convert.ToInt16(item["Daily"].ToString()))
                                    {
                                        DataRow _rowMP = dtMP.NewRow();

                                        _rowMP["STD_MPDay"] = item["STD_MPDay"].ToString();
                                        _rowMP["STD_MPNight"] = item["STD_MPNight"].ToString();
                                        _rowMP["ACT_MPDay"] = item["ACT_MPDay"].ToString();
                                        _rowMP["ACT_MPNight"] = item["ACT_MPNight"].ToString();

                                        _rowMP["STD_LEDay"] = item["STD_LEDay"].ToString();
                                        _rowMP["STD_LENight"] = item["STD_LENight"].ToString();
                                        _rowMP["ACT_LEDay"] = item["ACT_LEDay"].ToString();
                                        _rowMP["ACT_LENight"] = item["ACT_LENight"].ToString();

                                        _rowMP["STD_FODay"] = item["STD_FODay"].ToString();
                                        _rowMP["STD_FONight"] = item["STD_FONight"].ToString();
                                        _rowMP["ACT_FODay"] = item["ACT_FODay"].ToString();
                                        _rowMP["ACT_FONight"] = item["ACT_FONight"].ToString();

                                        _rowMP["REQ_OTDay"] = item["REQ_OTDay"].ToString();
                                        _rowMP["REQ_OTNight"] = item["REQ_OTNight"].ToString();
                                        _rowMP["ACT_OTDay"] = item["ACT_OTDay"].ToString();
                                        _rowMP["ACT_OTNight"] = item["ACT_OTNight"].ToString();
                                        dtMP.Rows.Add(_rowMP);

                                        //if (i == Convert.ToInt16(item["Daily"].ToString()))
                                        //{
                                        // ** Man Power Attandance
                                        DatetoDay = i + ":" + setDate.DayOfWeek.ToString().Substring(0, 3);
                                        Xdate = i;

                                        //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                                        //  mManPower.SumMP_STD = SUMACT_MP;


                                        MPCount_D = Convert.ToInt16(item["STD_MPDay"].ToString());
                                        MPCount_N = Convert.ToInt16(item["STD_MPNight"].ToString());
                                        SumMP_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                                        SumMP_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());

                                        LECount_D = Convert.ToInt16(item["STD_LEDay"].ToString());
                                        LECount_N = Convert.ToInt16(item["STD_LENight"].ToString());

                                        FOCount_D = Convert.ToInt16(item["STD_FODay"].ToString());
                                        FOCount_N = Convert.ToInt16(item["STD_FONight"].ToString());



                                        SumMP_DIFFD = MPCount_D - SumMP_ACTD;
                                        SumMP_DIFFN = MPCount_N - SumMP_ACTN;


                                        // ** OT Req,ACT
                                        SumOT_ReqD = Convert.ToInt16(item["REQ_OTDay"].ToString());
                                        SumOT_ReqN = Convert.ToInt16(item["REQ_OTNight"].ToString());
                                        SumOT_ActD = Convert.ToInt16(item["ACT_OTDay"].ToString());
                                        SumOT_ActN = Convert.ToInt16(item["ACT_OTNight"].ToString());
                                    }
                                }

                                //    }
                                //}
                            }
                            else
                            {
                                FlagInsert = 0;

                                // Get LE, Fo
                                DataTable MPDataLE = GetManPowerByLineFOLE(txtAndon,txtCostCenter, "LE");
                                LECount_D += Convert.ToInt16(MPDataLE.Rows[0]["MP_D"]);
                                LECount_N += Convert.ToInt16(MPDataLE.Rows[0]["MP_N"]);

                                DataTable MPDataFO = GetManPowerByLineFOLE(txtAndon,txtCostCenter, "FO");
                                FOCount_D += Convert.ToInt16(MPDataFO.Rows[0]["MP_D"]);
                                FOCount_N += Convert.ToInt16(MPDataFO.Rows[0]["MP_N"]);


                                DataTable MPData1 = GetManPowerByLine_Direct(txtAndon);
                                MPCount_D += Convert.ToInt16(MPData1.Rows[0]["MP_D"]);
                                MPCount_N += Convert.ToInt16(MPData1.Rows[0]["MP_N"]);


                                //------Actual Work by Line Day,Night
                                SumFOLE_ACTD += GetWorkActByLineDayFOLE_Direct(txtAndon, setDate);
                                SumFOLE_ACTN += GetWorkActByLineNightFOLE_Direct(txtAndon, setDate);


                                SumMP_DIFFD = MPCount_D - SumFOLE_ACTD;
                                SumMP_DIFFN = MPCount_N - SumFOLE_ACTN;

                                //-------OT Req, Actual Day,Night

                                SumOT_ReqD += GetOTReqByLineDayFOLE_Direct(txtAndon, setDate);
                                SumOT_ReqN += GetOTReqByLineNightFOLE_Direct(txtAndon, setDate);
                                SumOT_ActD += GetOTActByLineDayFOLE_Direct(txtAndon, setDate);
                                SumOT_ActN += GetOTActByLineNightFOLE_Direct(txtAndon, setDate);

                            }







                        }

              // ******* Start DrillDown Machine Line for Production Fac3 *********
  //                      int __Day = setDate.Day;
  //                      int _Day = DateTime.Now.Day;
  //                      SqlCommand SqlMC = new SqlCommand();
  //                      SqlMC.CommandText = "select Monthly,Daily,ProductType,STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight FROM [dbBCS].[dbo].[BC_MANPOWER] " +
  //" WHERE  (Fiscal_year = '" + _Year + "' and  Monthly = '" + MonthSelect + "' and Daily = '" + __Day + "') and  (ProductType = 'FAC3CS' or ProductType = 'FAC3RH' or ProductType = 'FAC3FH' or ProductType = 'FAC3PI' or " +
  //" ProductType = 'FAC3MOT' or ProductType = 'FAC3MA' or ProductType = 'FAC3AS' or ProductType = 'FAC3FIN' ) ";



  //                      DataTable MC = oConn.SqlGet(SqlMC, "DBDCI");
  //                 if (MC.Rows.Count > 0)
  //                 {

  //                     foreach (DataRow item in MC.Rows)
  //                     {


  //                         // *** Get ManPower OP
  //                         MC_Name = item["ProductType"].ToString();
  //                         //DataTable MPDataDirect = GetManPowerByLine(txtCostCenter);
  //                         //DataTable MPDataOP = GetManPowerByLineOP(txtAndon, "OP");
  //                         MC_MPD = Convert.ToInt16(item["STD_MPDay"].ToString());
  //                         MC_MPN = Convert.ToInt16(item["STD_MPNight"].ToString());
  //                         MCACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
  //                         MCACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());

                       
  //                     }
  //                 }

                        // End DrillDown Machine Line for Production Fac3





                    }
                    else
                    {
                        SqlCommand sqlCheck = new SqlCommand();
                        sqlCheck.CommandText = "SELECT * FROM BC_ManPower WHERE ProductType = " +
                       " '" + Txt_Type + "' and Fiscal_year = '" + _Year + "'" +
                           " and Monthly = '" + _Month + "' and Daily ='" + i + "'";
                        DataTable dtCheck = oConBCS.Query(sqlCheck);
                        if (dtCheck.Rows.Count > 0)
                        {

                            FlagInsert = 1;
                            //for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                            //{
                            DataTable dtMP = new DataTable();
                            dtMP.Columns.Add("STD_MPDay", typeof(string));
                            dtMP.Columns.Add("STD_MPNight", typeof(string));
                            dtMP.Columns.Add("ACT_MPDay", typeof(string));
                            dtMP.Columns.Add("ACT_MPNight", typeof(string));

                            dtMP.Columns.Add("STD_LEDay", typeof(string));
                            dtMP.Columns.Add("STD_LENight", typeof(string));
                            dtMP.Columns.Add("ACT_LEDay", typeof(string));
                            dtMP.Columns.Add("ACT_LENight", typeof(string));

                            dtMP.Columns.Add("STD_FODay", typeof(string));
                            dtMP.Columns.Add("STD_FONight", typeof(string));
                            dtMP.Columns.Add("ACT_FODay", typeof(string));
                            dtMP.Columns.Add("ACT_FONight", typeof(string));

                            dtMP.Columns.Add("REQ_OTDay", typeof(string));
                            dtMP.Columns.Add("REQ_OTNight", typeof(string));
                            dtMP.Columns.Add("ACT_OTDay", typeof(string));
                            dtMP.Columns.Add("ACT_OTNight", typeof(string));

                            foreach (DataRow item in dtCheck.Rows)
                            {

                                if (i == Convert.ToInt16(item["Daily"].ToString()))
                                {
                                    DataRow _rowMP = dtMP.NewRow();

                                    _rowMP["STD_MPDay"] = item["STD_MPDay"].ToString();
                                    _rowMP["STD_MPNight"] = item["STD_MPNight"].ToString();
                                    _rowMP["ACT_MPDay"] = item["ACT_MPDay"].ToString();
                                    _rowMP["ACT_MPNight"] = item["ACT_MPNight"].ToString();

                                    _rowMP["STD_LEDay"] = item["STD_LEDay"].ToString();
                                    _rowMP["STD_LENight"] = item["STD_LENight"].ToString();

                                    _rowMP["STD_FODay"] = item["STD_FODay"].ToString();
                                    _rowMP["STD_FONight"] = item["STD_FONight"].ToString();

                                    _rowMP["REQ_OTDay"] = item["REQ_OTDay"].ToString();
                                    _rowMP["REQ_OTNight"] = item["REQ_OTNight"].ToString();
                                    _rowMP["ACT_OTDay"] = item["ACT_OTDay"].ToString();
                                    _rowMP["ACT_OTNight"] = item["ACT_OTNight"].ToString();
                                    dtMP.Rows.Add(_rowMP);

                                    //if (i == Convert.ToInt16(item["Daily"].ToString()))
                                    //{
                                    // ** Man Power Attandance
                                    DatetoDay = i + ":" + setDate.DayOfWeek.ToString().Substring(0, 3);
                                    Xdate = i;

                                    //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                                    //  mManPower.SumMP_STD = SUMACT_MP;


                                    MPCount_D = Convert.ToInt16(item["STD_MPDay"].ToString());
                                    MPCount_N = Convert.ToInt16(item["STD_MPNight"].ToString());

                                    LECount_D = Convert.ToInt16(item["STD_LEDay"].ToString());
                                    LECount_N = Convert.ToInt16(item["STD_LENight"].ToString());

                                    FOCount_D = Convert.ToInt16(item["STD_FODay"].ToString());
                                    FOCount_N = Convert.ToInt16(item["STD_FONight"].ToString());

                                    SumMP_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                                    SumMP_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());
                                    SumMP_DIFFD = MPCount_D - SumMP_ACTD;
                                    SumMP_DIFFN = MPCount_N - SumMP_ACTN;


                                    // ** OT Req,ACT
                                    SumOT_ReqD = Convert.ToInt16(item["REQ_OTDay"].ToString());
                                    SumOT_ReqN = Convert.ToInt16(item["REQ_OTNight"].ToString());
                                    SumOT_ActD = Convert.ToInt16(item["ACT_OTDay"].ToString());
                                    SumOT_ActN = Convert.ToInt16(item["ACT_OTNight"].ToString());
                                }
                            }
                            SqlCommand UpdateMNOT = new SqlCommand();
                            UpdateMNOT.CommandText = "Update  BC_MANPOWER  " +
                                    " set STD_MPDay ='" + MPCount_D + "',ACT_MPDay ='" + SumMP_ACTD + "' " +
                                    ",STD_MPNight ='" + MPCount_N + "',ACT_MPNight ='" + SumMP_ACTN + "' " +
                                    ",STD_OTDay ='" + MPCount_D + "',REQ_OTDay ='" + SumOT_ReqD + "',ACT_OTDay = '" + SumOT_ActD + "'" +
                                    ",STD_OTNight ='" + MPCount_N + "',REQ_OTNight ='" + SumOT_ReqN + "',ACT_OTNight = '" + SumOT_ActN + "' " +
                                    ", STD_LEDay = '" + LECount_D + "',STD_LENight ='" + LECount_N + "',STD_FODay = '" + FOCount_D + "',STD_FONight ='" + FOCount_N + "'" +
                                    " where  Fiscal_year ='" + _Year + "' and Monthly ='" + _Month + "' and Daily ='" + i + "' and ProductType ='" + Txt_Type + "'";

                          //  oConn.SqlExecute(UpdateMNOT, "DBBCS");

                        }
                        else
                        {
                            FlagInsert = 0;
                            // Get LE, Fo
                            DataTable MPDataLE = GetManPowerByLineFOLE(txtAndon,txtCostCenter, "LE");
                            LECount_D += Convert.ToInt16(MPDataLE.Rows[0]["MP_D"]);
                            LECount_N += Convert.ToInt16(MPDataLE.Rows[0]["MP_N"]);

                            DataTable MPDataFO = GetManPowerByLineFOLE(txtAndon,txtCostCenter, "FO");
                            FOCount_D += Convert.ToInt16(MPDataFO.Rows[0]["MP_D"]);
                            FOCount_N += Convert.ToInt16(MPDataFO.Rows[0]["MP_N"]);

                            DataTable MPData2 = GetManPowerByLine_Direct(txtAndon);
                            MPCount_D += Convert.ToInt16(MPData2.Rows[0]["MP_D"]);
                            MPCount_N += Convert.ToInt16(MPData2.Rows[0]["MP_N"]);


                            //------Actual Work by Line Day,Night
                            SumMP_ACTD += GetWorkActByLineDayFOLE_Direct(txtAndon, setDate);
                            SumMP_ACTN += GetWorkActByLineNightFOLE_Direct(txtAndon, setDate);

                            SumMP_DIFFD = MPCount_D - SumMP_ACTD;
                            SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                            

                            //-------OT Req, Actual Day,Night

                            SumOT_ReqD += GetOTReqByLineDayFOLE_Direct(txtAndon, setDate);
                            SumOT_ReqN += GetOTReqByLineNightFOLE_Direct(txtAndon, setDate);
                            SumOT_ActD += GetOTActByLineDayFOLE_Direct(txtAndon, setDate);
                            SumOT_ActN += GetOTActByLineNightFOLE_Direct(txtAndon, setDate);
                            SqlCommand InsertMNOT = new SqlCommand();

                            InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                                ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                                ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight,STD_LEDay,STD_LENight,STD_FODay,STD_FONight) " +
                                " VALUES ('" + _Year + "','" + _Month + "','" + i + "','" + Txt_Type + "' " +
                                ",'" + MPCount_D + "','" + SumMP_ACTD + "' " +
                                ",'" + MPCount_N + "','" + SumMP_ACTN + "' " +
                                ",'" + MPCount_D + "','" + SumOT_ReqD + "','" + SumOT_ActD + "' " +
                                ",'" + MPCount_N + "','" + SumOT_ReqN + "','" + SumOT_ActN + "' " +
                                ",'" + LECount_D + "','" + LECount_N + "' " +
                                ",'" + FOCount_D + "','" + FOCount_N + "')";
                            //}           



                            oConn.SqlExecute(InsertMNOT, "DBBCS");
                        }
                        
                    }//exit Check EndYesterday

                    if (((setDate <= dateEnd) && ((_Type == "MPFAC1") || (_Type == "MPFAC2")
                        || (_Type == "MPFAC3") || (_Type == "MPFAC3A") || (_Type == "MPFAC3M") || (_Type == "MPFAC3CS") || (_Type == "MPODM"))) || ((_Type == "OTFAC1") || (_Type == "OTFAC2")
                        || (_Type == "OTFAC3") || (_Type == "OTFAC3A") || (_Type == "OTFAC3M") || (_Type == "OTODM")
                        || (_Type == "MPFAC3Prev") || (_Type == "MPFAC3Prev2") || (_Type == "MPFAC3Prev3")))
                    {


                        int __Day = setDate.Day;
                        int _Day = DateTime.Now.Day;
                        SqlCommand SqlMC = new SqlCommand();
                        SqlMC.CommandText = "select Monthly,Daily,ProductType,STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight FROM [dbBCS].[dbo].[BC_MANPOWER] " +
  " WHERE  (Fiscal_year = '" + _Year + "' and  Monthly = '" + MonthSelect + "' and Daily = '" + __Day + "') and (ProductType = 'FAC3CP' or ProductType = 'FAC3CY' or ProductType = 'FAC3CS' or ProductType = 'FAC3RH' or ProductType = 'FAC3FH' or ProductType = 'FAC3PI' or " +
  " ProductType = 'FAC3MOT' or ProductType = 'FAC3MA' or ProductType = 'FAC3AS' or ProductType = 'FAC3FIN' ) ";



                        DataTable MC = oConn.SqlGet(SqlMC, "DBBCS");
                        if (MC.Rows.Count > 0)
                        {

                            foreach (DataRow item in MC.Rows)
                            {


                                // *** Get ManPower OP
                                MC_Name = item["ProductType"].ToString();
                                //DataTable MPDataDirect = GetManPowerByLine(txtCostCenter);
                                //DataTable MPDataOP = GetManPowerByLineOP(txtAndon, "OP");
                                MC_MPD = Convert.ToInt16(item["STD_MPDay"].ToString());
                                MC_MPN = Convert.ToInt16(item["STD_MPNight"].ToString());
                                MCACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                                MCACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());


                        //    }
                        //}




                        //*****  Data for MP, OT Req and Actual                  
                        MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                        //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                        DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);

                        // ** Man Power Attandance
                        mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                        mManPower.Xdate = i;
                        mManPower.CountLoop = i;


                        mManPower.SumMPD = MPCount_D;
                        mManPower.SumMPN = MPCount_N;

                        mManPower.SumLED = LECount_D;
                        mManPower.SumLEN = LECount_N;

                        mManPower.SumFOD = FOCount_D;
                        mManPower.SumFON = FOCount_N;

                        //SumMP_ACTD += SumFOLE_ACTD;
                        //SumMP_ACTN += SumFOLE_ACTN;

                        mManPower.SumMP_ACTD =SumMP_ACTD;
                        mManPower.SumMP_ACTN = SumMP_ACTN;

                        mManPower.MC_Name = MC_Name;
                        mManPower.MC_MPD = MC_MPD;
                        mManPower.MC_MPN = MC_MPN;
                        mManPower.MCACTD = MCACTD;
                        mManPower.MCACTN = MCACTN;

                        if (SumFOLE_ACTD != 0)
                        {
                            mManPower.SumMP_DIFFD = MPCount_D - SumFOLE_ACTD;

                        }
                        else
                        {
                            mManPower.SumMP_DIFFD = SumMP_DIFFD;

                        }

                        if (SumFOLE_ACTN != 0)
                        {

                            mManPower.SumMP_DIFFN = MPCount_N - SumFOLE_ACTN;
                        }
                        else
                        {

                            mManPower.SumMP_DIFFN = SumMP_DIFFN;
                        }

                        // ** OT Req,ACT


                        mManPower.SumOT_ReqD = SumOT_ReqD;
                        mManPower.SumOT_ReqN = SumOT_ReqN;
                        mManPower.SumOT_ActD = SumOT_ActD;
                        mManPower.SumOT_ActN = SumOT_ActN;
                        mManPower.Prd = Prd;
                        mManPower.SumPrd = SumPrd;


                        oListMP.Add(mManPower);

                        //DataTable MC = oConn.SqlGet(SqlMC, "DBDCI");
                        //if (MC.Rows.Count > 0)
                        //{

                        //    foreach (DataRow item in MC.Rows)
                        //    {


                        //        // *** Get ManPower OP
                        //        MC_Name = item["ProductType"].ToString();
                        //        //DataTable MPDataDirect = GetManPowerByLine(txtCostCenter);
                        //        //DataTable MPDataOP = GetManPowerByLineOP(txtAndon, "OP");
                        //        MC_MPD = Convert.ToInt16(item["STD_MPDay"].ToString());
                        //        MC_MPN = Convert.ToInt16(item["STD_MPNight"].ToString());
                        //        MCACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                        //        MCACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());

                        //        mManPower.MC_Name = MC_Name;
                        //        mManPower.MC_MPD = MC_MPD;
                        //        mManPower.MC_MPN = MC_MPN;
                        //        mManPower.MCACTD = MCACTD;
                        //        mManPower.MCACTN = MCACTN;

                        //        //oListMP.Add(mManPower);
                            }
                        }


                        //    }
                        //}

                        if ((FlagInsert == 1) && (setDate >= EndYesterday) && (setDate <= dateEnd) && (_Type == "MPFAC1"
                             || _Type == "MPFAC2" || _Type == "MPFAC3" || _Type == "MPFAC3M" || _Type == "MPFAC3CS" || _Type == "MPFAC3A" || _Type == "MPODM")
                            || (_Type == "MPFAC3Prev") || (_Type == "MPFAC3Prev2") || (_Type == "MPFAC3Prev3"))
                        {

                            SqlCommand UpdateMNOT = new SqlCommand();
                            UpdateMNOT.CommandText = "Update  BC_MANPOWER  " +
                                    " set STD_MPDay ='" + MPCount_D + "',ACT_MPDay ='" + SumMP_ACTD + "' " +
                                    ",STD_MPNight ='" + MPCount_N + "',ACT_MPNight ='" + SumMP_ACTN + "' " +
                                    ",STD_OTDay ='" + MPCount_D + "',REQ_OTDay ='" + SumOT_ReqD + "',ACT_OTDay = '" + SumOT_ActD + "'" +
                                    ",STD_OTNight ='" + MPCount_N + "',REQ_OTNight ='" + SumOT_ReqN + "',ACT_OTNight = '" + SumOT_ActN + "' " +
                                    ", STD_LEDay = '" + LECount_D + "',STD_LENight ='" + LECount_N + "',STD_FODay = '" + FOCount_D + "',STD_FONight ='" + FOCount_N + "'" +
                                    " where  Fiscal_year ='" + _Year + "' and Monthly ='" + _Month + "' and Daily ='" + i + "' and ProductType ='" + Txt_Type + "'";

                    //        oConn.SqlExecute(UpdateMNOT, "DBBCS");
                        }
                        else if ((FlagInsert == 0) && (_Type == "MPFAC1" || _Type == "MPFAC2" || _Type == "MPFAC3" || _Type == "MPFAC3M" || _Type == "MPFAC3CS" || _Type == "MPFAC3A"
                                || _Type == "MPODM")
                            || (_Type == "MPFAC3Prev") || (_Type == "MPFAC3Prev2") || (_Type == "MPFAC3Prev3"))
                        {

                            SqlCommand InsertMNOT = new SqlCommand();

                            InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                                ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                                ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight,STD_LEDay,STD_LENight,STD_FODay,STD_FONight) " +
                                " VALUES ('" + _Year + "','" + _Month + "','" + i + "','" + Txt_Type + "' " +
                                ",'" + MPCount_D + "','" + SumMP_ACTD + "' " +
                                ",'" + MPCount_N + "','" + SumMP_ACTN + "' " +
                                ",'" + MPCount_D + "','" + SumOT_ReqD + "','" + SumOT_ActD + "' " +
                                ",'" + MPCount_N + "','" + SumOT_ReqN + "','" + SumOT_ActN + "' " +
                                ",'" + LECount_D + "','" + LECount_N  + "' " +
                                ",'" + FOCount_D + "','" + FOCount_N  + "')";
                            //}           



                            oConn.SqlExecute(InsertMNOT, "DBBCS");


                        }
                    }
                    else if ((setDate > dateEnd) && ((_Type == "MPFAC1") || (_Type == "MPFAC2")
                        || (_Type == "MPFAC3") || (_Type == "MPFAC3M") || (_Type == "MPFAC3CS") || (_Type == "MPFAC3A") || (_Type == "MPODM")
                        || (_Type == "MPFAC3Prev") || (_Type == "MPFAC3Prev2") || (_Type == "MPFAC3Prev3")))
                    {
                        //*****  Data for MP, OT Req and Actual                  
                        MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                        //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                        DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);
                        // ** Man Power Attandance
                        mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                        mManPower.Xdate = i;

                        mManPower.SumMPD = 0;
                        mManPower.SumMPN = 0;

                        mManPower.SumLED = 0;
                        mManPower.SumLEN = 0;

                        mManPower.SumFOD = 0;
                        mManPower.SumFON = 0;

                        SumMP_ACTD += 0;
                        SumMP_ACTN += 0;

                        mManPower.SumMP_ACTD = 0;
                        mManPower.SumMP_ACTN = 0;
                        mManPower.SumMP_DIFFD = 0;
                        mManPower.SumMP_DIFFN = 0;

                        // ** OT Req,ACT



                        mManPower.SumOT_ReqD = 0;
                        mManPower.SumOT_ReqN = 0;
                        mManPower.SumOT_ActD = 0;
                        mManPower.SumOT_ActN = 0;


                        mManPower.Prd = 0;
                        mManPower.SumPrd = 0;

                        oListMP.Add(mManPower);

                    }

                    MPCount_D = 0;
                    MPCount_N = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;

                    SumMP_ACTN = 0;
                    SumOT_ReqD = 0;
                    SumOT_ReqN = 0;
                    SumOT_ActD = 0;
                    SumOT_ActN = 0;
                    MPFOLE_ALL = 0;

                    SumMP_ACTN = 0;
                    SumOT_ActD = 0;
                    SumOT_ActN = 0;
                    SUMMPD = 0;
                    SUMMPN = 0;
                    SUMOT_REQNN = 0;
                    SUMOT_REQDD = 0;
                    SUMOT_ACTD = 0;
                    SUMOT_ACTN = 0;
                    MPFOLE_D = 0;
                    MPFOLE_N = 0;
                    LECount_D = 0;
                    LECount_N = 0;
                    FOCount_D = 0;
                    FOCount_N = 0;
                    SumFOLE_ACTD = 0;
                    SumFOLE_ACTN = 0;
                    FlagInsert = 1;


                    //} //exit Check EndYesterday
                }// exit loop
            }
            else
            {

                //------------------Not have data for  OT Req --------------------//

                int Xdate = 0;
                int Yester = 0;
                int SUMOT_REQD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
                int SUMOT_REQN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
                int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
                int SUMMP_SHIFT = 0, SUMACT_MP = 0;
                //int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;

                for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                {


                    foreach (DataRow item in dtMNOT.Rows)
                    {

                        if (i == Convert.ToInt16(item["Daily"].ToString()))
                        {
                            // ** Man Power Attandance
                            DatetoDay = i + ":" + setDate.DayOfWeek.ToString().Substring(0, 3);
                            Xdate = i;

                            MPCount_D = Convert.ToInt16(item["STD_MPDay"].ToString());
                            MPCount_N = Convert.ToInt16(item["STD_MPNight"].ToString());

                        


                            SumMP_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());


                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["REQ_OTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["REQ_OTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["ACT_OTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["ACT_OTNight"].ToString());
                        }
                    }





                    //*****  Data for MP, OT Req and Actual                  
                    MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();




                    // ** Man Power Attandance
                    mManPower.DatetoDay = DatetoDay;
                    mManPower.Xdate = Xdate;

                    mManPower.SumMPD = MPCount_D;
                    mManPower.SumMPN = MPCount_N;

                    mManPower.SumLED = LECount_D;
                    mManPower.SumLEN = LECount_N;

                    mManPower.SumFOD = FOCount_D;
                    mManPower.SumFON = FOCount_N;



                    mManPower.SumMP_ACTD = SumMP_ACTD;
                    mManPower.SumMP_ACTN = SumMP_ACTN;

                    if (SumMP_ACTD != 0)
                    {
                        mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                    }
                    else
                    {
                        mManPower.SumMP_DIFFD = 0;

                    }

                    if (SumMP_ACTN != 0)
                    {

                        mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                    }
                    else
                    {

                        mManPower.SumMP_DIFFN = 0;
                    }



                    // ** OT Req,ACT



                    mManPower.SumOT_ReqD = SumOT_ReqD;
                    mManPower.SumOT_ReqN = SumOT_ReqN;
                    mManPower.SumOT_ActD = SumOT_ActD;
                    mManPower.SumOT_ActN = SumOT_ActN;

                    mManPower.Prd = Prd;
                    mManPower.SumPrd = SumPrd;
                    oListMP.Add(mManPower);

                }

            }

        }
        else
        {

            //------------------ Man-Power Daily for New Record or Erase Record to Insert---------------//

            int idxMP = 0;
            //--------------- Get Employee working Time ---------------------
            DataTable dtempWorkingTime = new DataTable();


            //int SumOT1 = 0, OT1 = 0, OT15 = 0, OT2 = 0, OT3 = 0;
            int SUMMPD = 0, DOT1 = 0, DOT15 = 0, DOT2 = 0, DOT3 = 0, SDOT1 = 0, SDOT15 = 0, SDOT2 = 0, SDOT3 = 0;
            int SUMMPN = 0, HOT1 = 0, HOT15 = 0, HOT2 = 0, HOT3 = 0, SHOT1 = 0, SHOT15 = 0, SHOT2 = 0, SHOT3 = 0;
            int SUMMPH = 0, NOT1 = 0, NOT15 = 0, NOT2 = 0, NOT3 = 0, SNOT1 = 0, SNOT15 = 0, SNOT2 = 0, SNOT3 = 0;



            DataTable dtWorkTime = new DataTable();
            dtWorkTime.Columns.Add("Code", typeof(string));
            dtWorkTime.Columns.Add("WorkDate", typeof(string));
            dtWorkTime.Columns.Add("POSIT", typeof(string));
            dtWorkTime.Columns.Add("OT1", typeof(int));
            dtWorkTime.Columns.Add("OT15", typeof(int));
            dtWorkTime.Columns.Add("OT2", typeof(int));
            dtWorkTime.Columns.Add("OT3", typeof(int));
            dtWorkTime.Columns.Add("SUMOT", typeof(int));
            dtWorkTime.Columns.Add("REQDOT1", typeof(int));
            dtWorkTime.Columns.Add("REQDOT15", typeof(int));
            dtWorkTime.Columns.Add("REQDOT2", typeof(int));
            dtWorkTime.Columns.Add("REQDOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMDOTREQ", typeof(int));
            dtWorkTime.Columns.Add("SUMMPReqD", typeof(int));
            dtWorkTime.Columns.Add("DOT1", typeof(int));
            dtWorkTime.Columns.Add("DOT15", typeof(int));
            dtWorkTime.Columns.Add("DOT2", typeof(int));
            dtWorkTime.Columns.Add("DOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMDOT", typeof(int));
            dtWorkTime.Columns.Add("SUMMPD", typeof(int));

            dtWorkTime.Columns.Add("REQNOT1", typeof(int));
            dtWorkTime.Columns.Add("REQNOT15", typeof(int));
            dtWorkTime.Columns.Add("REQNOT2", typeof(int));
            dtWorkTime.Columns.Add("REQNOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMNOTREQ", typeof(int));
            dtWorkTime.Columns.Add("SUMMPReqN", typeof(int));
            dtWorkTime.Columns.Add("NOT1", typeof(int));
            dtWorkTime.Columns.Add("NOT15", typeof(int));
            dtWorkTime.Columns.Add("NOT2", typeof(int));
            dtWorkTime.Columns.Add("NOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMNOT", typeof(int));
            dtWorkTime.Columns.Add("SUMMPN", typeof(int));

            dtWorkTime.Columns.Add("REQHOT1", typeof(int));
            dtWorkTime.Columns.Add("REQHOT15", typeof(int));
            dtWorkTime.Columns.Add("REQHOT2", typeof(int));
            dtWorkTime.Columns.Add("REQHOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMHOTREQ", typeof(int));
            dtWorkTime.Columns.Add("SUMMPReqH", typeof(int));
            dtWorkTime.Columns.Add("HOT1", typeof(int));
            dtWorkTime.Columns.Add("HOT15", typeof(int));
            dtWorkTime.Columns.Add("HOT2", typeof(int));
            dtWorkTime.Columns.Add("HOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMHOT", typeof(int));
            dtWorkTime.Columns.Add("SUMMPH", typeof(int));


            //--------------- Get Employee working Time ---------------------
            //int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
            int FlagUdate = 0;
            //int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;
            //string DatetoDay = "";
            int Xdate = 0;
            int Yester = 0;
            int SUMOT_REQD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
            int SUMOT_REQN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
            int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
            int SUMMP_SHIFT = 0, SUMACT_MP = 0;
            //int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;

            for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
            {

                if (i >= 2)
                {
                    Yester = i - 1;
                    setyesterday = new DateTime(DateTime.Now.Year, setDate.Month, Yester);

                }
                setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);




                //if ((setDate.ToString("yyyy-MM-dd") == EndYesterday.ToString("yyyy-MM-dd"))
                //    || (setyesterday.ToString("yyyy-MM-dd") == Endtoday.ToString("yyyy-MM-dd")))
                //if (setDate.ToString("yyyy-MM-dd") <= Endtoday.ToString("yyyy-MM-dd"))
                //if ((setDate >= EndYesterday) && (setDate <= Endtoday))
                //if (setDate <= Endtoday)
                //{
                //    FlagUdate = 1;

                //----------------- Fillter Working Time -------------
                bool Working = false;



                sql.CommandText = "SELECT e.Posit,WorkShift,WorkType,otr.OTFROM ,[WCode],[WDate],[WTime],[WDoor],es.[WType],LTRIM(DATEDIFF(MINUTE, 0, otr.OT1)) as OT1,LTRIM(DATEDIFF(MINUTE, 0, otr.OT15)) as OT15 " +
  ",LTRIM(DATEDIFF(MINUTE, 0, otr.OT2)) as OT2,LTRIM(DATEDIFF(MINUTE, 0, otr.OT3)) as OT3 " +
  " FROM [dbDCI].[dbo].[EmployeeTimeStamp] es " +
  " LEFT JOIN [dbDCI].[dbo].[Employee] e ON es.WCode = e.CODE " +
  " LEFT JOIN [dbDCI].[dbo].[EmployeeWorkingTime] wt ON es.WCode = wt.Code " +
  " LEFT JOIN [dbDCI].[dbo].[EMP_OTRQ] otr ON es.WCode = otr.CODE AND es.WDate = otr.ODATE " +
  " WHERE WDate >= '" + setDate.ToString("yyyy-MM-dd") + "' AND WDate <= '" + setDate.ToString("yyyy-MM-dd") + "' AND es.WType = 'O' " +
  " And OTFROM != ''" +
  "	AND CONVERT(DATE, wt.SystemOUT) = WDate " +
  " And  ( " + txtAndon + ")" +
  " order by WDate  desc";


                DataTable dtt = oConn.SqlGet(sql, "DBDCI");
                if (dtt.Rows.Count > 0)
                {
                    DataTable MPDataLE = GetManPowerByLineFOLE(txtAndon,txtCostCenter, "LE");
                    LECount_D += Convert.ToInt16(MPDataLE.Rows[0]["MP_D"]);
                    LECount_N += Convert.ToInt16(MPDataLE.Rows[0]["MP_N"]);

                    DataTable MPDataFO = GetManPowerByLineFOLE(txtAndon,txtCostCenter, "FO");
                    FOCount_D += Convert.ToInt16(MPDataFO.Rows[0]["MP_D"]);
                    FOCount_N += Convert.ToInt16(MPDataFO.Rows[0]["MP_N"]);


                    DataTable MPDataDirect = GetManPowerByLine_Direct(txtAndon);
                    //DataTable MPDataOP = GetManPowerByLineOP(txtAndon, "OP");
                    MPCount_D += Convert.ToInt16(MPDataDirect.Rows[0]["MP_D"]);
                    MPCount_N += Convert.ToInt16(MPDataDirect.Rows[0]["MP_N"]);


                    SumFOLE_ACTD += GetWorkActByLineDayFOLE_Direct(txtAndon, setDate);
                    SumFOLE_ACTN += GetWorkActByLineNightFOLE_Direct(txtAndon, setDate);

                    //-------OT Req, Actual Day,Night

                    SumOT_ReqD += GetOTReqByLineDayFOLE_Direct(txtAndon, setDate);
                    SumOT_ReqN += GetOTReqByLineNightFOLE_Direct(txtAndon, setDate);
                    SumOT_ActD += GetOTActByLineDayFOLE_Direct(txtAndon, setDate);
                    SumOT_ActN += GetOTActByLineNightFOLE_Direct(txtAndon, setDate);

                }
                else
                {
                    DataTable MPDataLE = GetManPowerByLineFOLE(txtAndon,txtCostCenter, "LE");
                    LECount_D += Convert.ToInt16(MPDataLE.Rows[0]["MP_D"]);
                    LECount_N += Convert.ToInt16(MPDataLE.Rows[0]["MP_N"]);

                    DataTable MPDataFO = GetManPowerByLineFOLE(txtAndon,txtCostCenter, "FO");
                    FOCount_D += Convert.ToInt16(MPDataFO.Rows[0]["MP_D"]);
                    FOCount_N += Convert.ToInt16(MPDataFO.Rows[0]["MP_N"]);

                    DataTable MPDataDirect = GetManPowerByLine_Direct(txtAndon);
                    //DataTable MPDataOP = GetManPowerByLineOP(txtAndon, "OP");
                    MPCount_D += Convert.ToInt16(MPDataDirect.Rows[0]["MP_D"]);
                    MPCount_N += Convert.ToInt16(MPDataDirect.Rows[0]["MP_N"]);


                    SumFOLE_ACTD += GetWorkActByLineDayFOLE_Direct(txtAndon, setDate);
                    SumFOLE_ACTN += GetWorkActByLineNightFOLE_Direct(txtAndon, setDate);

                    //-------OT Req, Actual Day,Night

                    SumOT_ReqD += GetOTReqByLineDayFOLE_Direct(txtAndon, setDate);
                    SumOT_ReqN += GetOTReqByLineNightFOLE_Direct(txtAndon, setDate);
                    SumOT_ActD += GetOTActByLineDayFOLE_Direct(txtAndon, setDate);
                    SumOT_ActN += GetOTActByLineNightFOLE_Direct(txtAndon, setDate);

                }




                //*****  Data for MP, OT Req and Actual                  
                MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);
                //SUMMP_SHIFT = MPCountALL;
                //SUMACT_MP = SUMOT_REQD + SUMOT_REQN;


                // ** Man Power Attandance
                mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                mManPower.Xdate = i;

                //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                //  mManPower.SumMP_STD = SUMACT_MP;


                //MPCount_D += LECount_D + FOCount_D;
                //MPCount_N += LECount_N + FOCount_N;



                mManPower.SumMPD = MPCount_D;
                mManPower.SumMPN = MPCount_N;

                mManPower.SumLED = LECount_D;
                mManPower.SumLEN = LECount_N;

                mManPower.SumFOD = FOCount_D;
                mManPower.SumFON = FOCount_N;


                SumMP_ACTD += SumFOLE_ACTD;
                SumMP_ACTN += SumFOLE_ACTN;

                mManPower.SumMP_ACTD = SumMP_ACTD;
                mManPower.SumMP_ACTN = SumMP_ACTN;

                if (SumMP_ACTD != 0)
                {
                    mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                }
                else
                {
                    mManPower.SumMP_DIFFD = 0;

                }

                if (SumMP_ACTN != 0)
                {

                    mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                }
                else
                {

                    mManPower.SumMP_DIFFN = 0;
                }


                // ** OT Req,ACT



                mManPower.SumOT_ReqD = SumOT_ReqD;
                mManPower.SumOT_ReqN = SumOT_ReqN;
                mManPower.SumOT_ActD = SumOT_ActD;
                mManPower.SumOT_ActN = SumOT_ActN;
                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;


                oListMP.Add(mManPower);



                //if (ii == MonthSelect)
                //{
                // *** OT Does not Insert  Man Power Daily
                if ((_Type == "MPFAC1") ||
                    (_Type == "MPFAC2") ||
                   (_Type == "MPFAC3") ||
                    (_Type == "MPFAC3M") ||
                        (_Type == "MPFAC3CY") ||
                    (_Type == "MPFAC3CS") ||
                     (_Type == "MPFAC3A") ||
                    (_Type == "MPODM"))
                {
                    SqlCommand InsertMNOT = new SqlCommand();

                    InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                        ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                       ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight,STD_LEDay,STD_LENight,STD_FODay,STD_FONight) " +
                                " VALUES ('" + _Year + "','" + _Month + "','" + i + "','" + Txt_Type + "' " +
                                ",'" + MPCount_D + "','" + SumMP_ACTD + "' " +
                                ",'" + MPCount_N + "','" + SumMP_ACTN + "' " +
                                ",'" + MPCount_D + "','" + SumOT_ReqD + "','" + SumOT_ActD + "' " +
                                ",'" + MPCount_N + "','" + SumOT_ReqN + "','" + SumOT_ActN + "' " +
                                ",'" + LECount_D + "','" + LECount_N + "' " +
                                ",'" + FOCount_D + "','" + FOCount_N + "')";
                    //}           



                    oConn.SqlExecute(InsertMNOT, "DBBCS");
                }


                MPCount_D = 0;
                MPCount_N = 0;
                SumMP_ACTD = 0;
                SumMP_ACTN = 0;

                SumMP_ACTN = 0;
                SumOT_ReqD = 0;
                SumOT_ReqN = 0;
                SumOT_ActD = 0;
                SumOT_ActN = 0;
                MPFOLE_ALL = 0;

                SumMP_ACTN = 0;
                SumOT_ActD = 0;
                SumOT_ActN = 0;
                SUMMPD = 0;
                SUMMPN = 0;
                SUMOT_REQN = 0;
                SUMOT_REQD = 0;
                SUMOT_ACTD = 0;
                SUMOT_ACTN = 0;
                MPFOLE_D = 0;
                MPFOLE_N = 0;
                LECount_D = 0;
                LECount_N = 0;
                FOCount_D = 0;
                FOCount_N = 0;
                SumFOLE_ACTD = 0;
                SumFOLE_ACTN = 0;
            }

        }


        //   }




        PrdMonth = 0;
        SumPrdMonth = 0;


        accuOP1 = 0;
        accuOP15 = 0;
        accuOP2 = 0;
        accuOP3 = 0;

        accuLE1 = 0;
        accuLE15 = 0;
        accuLE2 = 0;
        accuLE3 = 0;

        accuFO1 = 0;
        accuFO15 = 0;
        accuFO2 = 0;
        accuFO3 = 0;

        accuSU1 = 0;
        accuSU15 = 0;
        accuSU2 = 0;
        accuSU3 = 0;




        CountMPOTREQD = 0;
        CountMPOTREQN = 0;
        //       CountMPD = 0;
        CountMPN = 0;
        CountMPH = 0;
        SumMP = 0;


        return oListMP;
    }
    public List<MMPInfo.MPAllChartInfo> GetChartMPDailybyDirect(int _Year,int _Month, DateTime _DataDate, string _Type)
    {

        List<MMPInfo.MPAllChartInfo> oListMP = new List<MMPInfo.MPAllChartInfo>();



        string[] ArryPrd = { "1YC", "2YC", "SCR", "1YC/3", "ODM" };
        //string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702", "4310", "4320", "4510", "4720", "8120" };
        string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702" };
        string[] ArryPrdFac1 = { "1101", "1102" };
        //string[] ArryPrdAndonFac1 = { "001", "049", "052", "054", "056", "057", "058", "062", "063", "065", "066", "069", "072", "074", "076", "077", "080", "083", "084", "089","090","093","095","098","103","106","107" };
        //string[] ArryPrdAndonFac2 = { "004", "005", "006", "007", "008", "009", "010", "011", "012", "013", "014", "015", "017", "018", "019", "020", "021", "022", "023", "026", "027", "028", "030", "031", "033", "034", "036", "037", "041", "043", "044", "045", "046", "051", "053", "059", "061", "068", "070", "071", "073" };
        string[] ArryPrdFac1M = { "1101" };
        string[] ArryPrdFac1A = { "1102" };
        string[] ArryPrdFac2 = { "1201", "1202", "1301", "1302", "1401", "1402" };
        string[] ArryPrdFac2M = { "1201" };
        string[] ArryPrdFac2A = { "1202" };
        string[] ArryPrdFac2Mo = { "1401" };
        string[] ArryPrdFac2MoA = { "1402" };
        string[] ArryPrdSCA = { "1301", "1302" };
        string[] ArryPrdSCRM = { "1301" };
        string[] ArryPrdSCRA = { "1302" };
        string[] ArryPrdFac3 = { "1701", "1702" };
        string[] ArryPrdFac3M = { "1701" };
        string[] ArryPrdFac3A = { "1702" };
        string[] ArryPrdODM = { "1501" };


        //* Maintenance 
        string[] ArryMT = { "4310", "4320", "4330", "4340" };
        string[] ArryMTM = { "4310" };
        string[] ArryMTA = { "4320" };
        string[] ArryMTPM = { "4330" };
        string[] ArryMTTPM = { "4340" };

        //* Engineer
        string[] ArryENALL = { "4410", "4420", "4430" };
        string[] ArryENA = { "4410" };
        string[] ArryENM = { "4420" };
        string[] ArryENMOT = { "4430" };


        //* IT & Env.
        string[] ArryITEC = { "7510", "4510", "4520" };
        string[] ArryECUT = { "4510", "4520" };
        string[] ArryIT = { "7510" };
        string[] ArryEC = { "4520" };
        string[] ArryUT = { "4510" };
        //* Procurement 
        string[] ArryProcurement = { "4110", "4120", "4130" };
        string[] ArryProPU = { "4110" };
        string[] ArryProPC = { "4120" };
        string[] ArryProSPU = { "4130" };
        //* Production Control and SCM
        string[] ArryPDSCM = { "4610", "4620", "4210", "4140" };
        string[] ArryIM = { "4610" };
        string[] ArryPN = { "4210" };
        string[] ArryPS = { "4620" };
        string[] ArryDC = { "4140" };
        string[] ArryWH = { "7610" };

        //* QCQAQS
        string[] ArryQCQAQS = { "4710", "4720", "4830" };
        string[] ArryQC = { "4720" };
        string[] ArryQA = { "4710" };
        string[] ArryQS = { "4830" };

        //* Design and Development
        string[] ArryDDCD = { "4810", "4820" };
        string[] ArryDD = { "4810" };
        string[] ArryCD = { "4820" };



        string[] ArryPeriod = { "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod1 = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod2 = { "PRD_JAN", "PRD_FEB", "PRD_MAR", "PRD_APR", "PRD_MAY", "PRD_JUN", "PRD_JUL", "PRD_AUG", "PRD_SEP", "PRD_OCT", "PRD_NOV", "PRD_DEC" };

        int[] ArryDay = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 };
        int[] ArryMonth = { 4, 5, 6, 7, 8, 9, 10, 11, 12 };

        int[] ArryMonth1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };


        string pAccGroup = "EXP";
        string pBudgetType = "DI";
        string pYear = _DataDate.ToString("yyyy");
        string pMonth = _DataDate.ToString("MM");
        DateTime _LastYear = new DateTime();
        DateTime _Last2Year = new DateTime();
        DateTime _Last3Year = new DateTime();
        _LastYear = _DataDate.AddYears(-1);
        _Last2Year = _DataDate.AddYears(-2);
        _Last3Year = _DataDate.AddYears(-3);
        string pLastYear = _LastYear.ToString("yyyy");
        string pLast2Year = _Last2Year.ToString("yyyy");
        string pLast3Year = _Last3Year.ToString("yyyy");
        string TxtModel = " ";


        string Factory = "";
        string Txt_Type = "";


        #region init



        int[] _PrdActual = new int[12];

        string[] ArrySeires5 = new string[5];
        Decimal[] ArrySeiresValue5 = new Decimal[5];



        #endregion

        string[] ArryLoop = new string[0];
        string ProductType = "";
        string TargetType = "";




        DateTime strDate = new DateTime(DateTime.Now.Year, _Month, 1, 0, 0, 0);
        DateTime endDate = strDate.AddMonths(1).Date + new TimeSpan(0, 0, 0);

        DateTime strHr = DateTime.Today + new TimeSpan(08, 00, 00);
        DateTime dateEnd = DateTime.Today + new TimeSpan(20, 00, 00);
        DateTime Endtoday = DateTime.Now;
        DateTime EndYesterday = DateTime.Today - new TimeSpan(24, 00, 00);

        int MonthSelect = _Month;
        int MonthPresent = Endtoday.Month;
        int PrevMonth = _Month - 1;
        int NextMonth = _Month + 1;



        //DataTable dtWorkingHour = new DataTable();
        //dtWorkingHour.Columns.Add("Position", typeof(string));
        //dtWorkingHour.Columns.Add("OT1", typeof(string));
        //dtWorkingHour.Columns.Add("OT15", typeof(string));
        //dtWorkingHour.Columns.Add("OT2", typeof(string));
        //dtWorkingHour.Columns.Add("OT3", typeof(string));
        //string[] arrPotition = { "OP", "LE", "FO", "SU" };
        //foreach (string item in arrPotition)
        //{
        //    dtWorkingHour.Rows.Add(item, "", "", "", "");
        //}


        //------------- Create column header OT  -----------------


        DataTable dtBCPD = new DataTable();
        dtBCPD.Columns.Add("Fiscal_year", typeof(string));
        dtBCPD.Columns.Add("ProductType", typeof(string));
        dtBCPD.Columns.Add("PRD_JAN", typeof(string));
        dtBCPD.Columns.Add("PRD_FEB", typeof(string));
        dtBCPD.Columns.Add("PRD_MAR", typeof(string));
        dtBCPD.Columns.Add("PRD_APR", typeof(string));
        dtBCPD.Columns.Add("PRD_MAY", typeof(string));
        dtBCPD.Columns.Add("PRD_JUN", typeof(string));
        dtBCPD.Columns.Add("PRD_JUL", typeof(string));
        dtBCPD.Columns.Add("PRD_AUG", typeof(string));
        dtBCPD.Columns.Add("PRD_SEP", typeof(string));
        dtBCPD.Columns.Add("PRD_OCT", typeof(string));
        dtBCPD.Columns.Add("PRD_NOV", typeof(string));
        dtBCPD.Columns.Add("PRD_DEC", typeof(string));
        DateTime setDate1 = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sqlBCPD = new SqlCommand();
        sqlBCPD.CommandText = "SELECT Fiscal_year " +
            " ,ProductType,PRD_APR,PRD_MAY,PRD_JUN,PRD_JUL,PRD_AUG " +
            " ,PRD_SEP,PRD_OCT,PRD_NOV,PRD_DEC,PRD_JAN,PRD_FEB,PRD_MAR,Total_PRD " +
           " from BC_PRODUCTION " +
           " where [Fiscal_year] = " + setDate1.Year;


        // int LBCSPD = 0;
        double Prd = 0, Prd1 = 0, Prd2 = 0, Prd3 = 0, Prd4 = 0, Prd5 = 0, Prd6 = 0, Prd7 = 0;
        double Prd8 = 0, Prd9 = 0, Prd10 = 0, Prd11 = 0, Prd12 = 0, SumPrd = 0, SumPrdOverAll = 0, PrdMonth = 0, SumPrdMonth = 0;
        DataTable dt1 = oConn.SqlGet(sqlBCPD, "DBBCS");
        foreach (DataRow item in dt1.Rows)
        {
            DataRow _rowBCSPD = dtBCPD.NewRow();
            _rowBCSPD["Fiscal_year"] = item["Fiscal_year"].ToString();
            _rowBCSPD["ProductType"] = item["ProductType"].ToString();
            _rowBCSPD["PRD_JAN"] = item["PRD_JAN"];
            _rowBCSPD["PRD_FEB"] = item["PRD_FEB"];
            _rowBCSPD["PRD_MAR"] = item["PRD_MAR"];
            _rowBCSPD["PRD_APR"] = item["PRD_APR"];
            _rowBCSPD["PRD_MAY"] = item["PRD_MAY"];
            _rowBCSPD["PRD_JUN"] = item["PRD_JUN"];
            _rowBCSPD["PRD_JUL"] = item["PRD_JUL"];
            _rowBCSPD["PRD_AUG"] = item["PRD_AUG"];
            _rowBCSPD["PRD_SEP"] = item["PRD_SEP"];
            _rowBCSPD["PRD_OCT"] = item["PRD_OCT"];
            _rowBCSPD["PRD_NOV"] = item["PRD_NOV"];
            _rowBCSPD["PRD_DEC"] = item["PRD_DEC"];
            dtBCPD.Rows.Add(_rowBCSPD);
        }


        //---------------- Get Employeee of Line --------------


        //DataTable dtAndon = new DataTable();
        //dtAndon.Columns.Add("LineCode", typeof(string));
        //dtAndon.Columns.Add("LineName", typeof(string));
        //dtAndon.Columns.Add("BoardId", typeof(string));
        //dtAndon.Columns.Add("LineGroup", typeof(string));

        DataTable dtEmp = new DataTable();
        dtEmp.Columns.Add("Code", typeof(string));
        dtEmp.Columns.Add("Position", typeof(string));
        dtEmp.Columns.Add("CostCenter", typeof(string));
        dtEmp.Columns.Add("WType", typeof(string));
        DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);




        //  DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);
        DateTime setyesterday = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sql = new SqlCommand();

        // All Maintenance
        if (_Type == "MPMTALL" || _Type == "MPMTALLPrev" || _Type == "MPMTALLPrev2" || _Type == "MPMTALLPrev3" ||
            _Type == "OTMTALL" || _Type == "OTMTALLPrev" || _Type == "OTMTALLPrev2" || _Type == "OTMTALLPrev3")
        {
            ArryLoop = ArryMT;

            txtCostCenter = ArryLoop[0] + " or COSTCENTER = " + ArryLoop[1] + " or COSTCENTER = " + ArryLoop[2] + " or COSTCENTER = " + ArryLoop[3];
            Txt_Type = "MTALL";

        }
        else if (_Type == "MPMTM")
        {
            ArryLoop = ArryMTM;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "MTM";

        }
        else if (_Type == "MPMTA")
        {
            ArryLoop = ArryMTA;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "MTA";


        }
        else if (_Type == "MPPU")
        {
            ArryLoop = ArryProPU;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "PU";

        }
        else if (_Type == "MPPC")
        {
            ArryLoop = ArryProPC;
            txtCostCenter = ArryLoop[0];
            Txt_Type = "PC";


        }
        else if (_Type == "MPSPU")
        {
            ArryLoop = ArryProSPU;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "SPU";

        }
        else if (_Type == "MPIM")
        {
            ArryLoop = ArryIM;
            txtCostCenter = ArryLoop[0];
            Txt_Type = "IM";

        }
        else if (_Type == "MPPN")
        {
            ArryLoop = ArryPN;
            txtCostCenter = ArryLoop[0];
            Txt_Type = "PN";

        }
        else if (_Type == "MPWH")
        {
            ArryLoop = ArryWH;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "WH";

        }
        else if (_Type == "MPPS" || _Type == "MPPSPrev" || _Type == "MPPSPrev2" || _Type == "MPPSPrev3" ||
        _Type == "OTMPPS" || _Type == "OTMPPSPrev" || _Type == "OTMPPSPrev2" || _Type == "OTMPPSPrev3")
        {
            ArryLoop = ArryPS;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "MPPS";

        }
        else if (_Type == "MPDC")
        {
            ArryLoop = ArryDC;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "DC";

        }

        else if (_Type == "MPQCQAQS" || _Type == "MPQCQAQSPrev" || _Type == "MPQCQAQSPrev2" || _Type == "MPQCQAQSPrev3" ||
            _Type == "OTQCQAQS" || _Type == "OTQCQAQSPrev" || _Type == "OTQCQAQSPrev2" || _Type == "OTQCQAQSPrev3")
        {
            ArryLoop = ArryQCQAQS;

            txtCostCenter = ArryLoop[0] + " or COSTCENTER = " + ArryLoop[1] + " or COSTCENTER = " + ArryLoop[2];
            Txt_Type = "QCQAQS";

        }
        else if (_Type == "MPQC" || _Type == "MPQCPrev" || _Type == "MPQCPrev2" || _Type == "MPQCPrev3" ||
            _Type == "OTQC" || _Type == "OTQCPrev" || _Type == "OTQCPrev2" || _Type == "OTQCPrev3")
        {
            ArryLoop = ArryQC;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "MPQC";

        }
        else if (_Type == "MPQA" || _Type == "MPQAPrev" || _Type == "MPQAPrev2" || _Type == "MPQAPrev3" ||
         _Type == "OTMPQA" || _Type == "OTMPQAPrev" || _Type == "OTMPQAPrev2" || _Type == "OTMPQAPrev3")
        {

            ArryLoop = ArryQA;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "MPQA";

        }
        else if (_Type == "MPQC" || _Type == "MPQCPrev" || _Type == "MPQCPrev2" || _Type == "MPQCPrev3" ||
          _Type == "OTQC" || _Type == "OTQCPrev" || _Type == "OTQCPrev2" || _Type == "OTQCPrev3")
        {

            ArryLoop = ArryQS;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "MPQC";

        }
        else if (_Type == "MPDD")
        {
            ArryLoop = ArryDD;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "MPDD";

        }
        else if (_Type == "MPCD")
        {
            ArryLoop = ArryCD;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "MPCD";

        }
        else if (_Type == "MPENA")
        {
            ArryLoop = ArryENA;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "MPENA";

        }
        else if (_Type == "MPENM")
        {
            ArryLoop = ArryENM;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "MPENM";

        }
        else if (_Type == "MPENMOT")
        {
            ArryLoop = ArryENMOT;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "MPENMOT";
        }
        else if (_Type == "MPECUT" || _Type == "MPECUTPrev" || _Type == "MPECUTPrev2" || _Type == "MPECUTPrev3" ||
       _Type == "OTECUT" || _Type == "OTECUTPrev" || _Type == "OTECUTPrev2" || _Type == "OTECUTPrev3")
        {
            ArryLoop = ArryECUT;

            txtCostCenter = ArryLoop[0] + " or COSTCENTER = " + ArryLoop[1];
            Txt_Type = "MPECUT";

        }
        else if (_Type == "MPIT")
        {
            ArryLoop = ArryIT;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "MPIT";
        }
        else if (_Type == "MPWC")
        {
            ArryLoop = ArryEC;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "MPWC";
        }
        else if (_Type == "MPUT")
        {
            ArryLoop = ArryUT;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "MPUT";
        }



        sql.CommandText = "SELECT e.CODE, POSIT,COSTCENTER,WTYPE FROM [Employee] e " +
        " where [COSTCENTER] = " + txtCostCenter + " ORDER BY COSTCENTER,e.POSIT";


        int ii = 0;
        DataTable dt = oConn.SqlGet(sql, "DBDCI");
        foreach (DataRow item in dt.Rows)
        {
            DataRow _rowEmp = dtEmp.NewRow();
            _rowEmp["Code"] = item["CODE"].ToString();
            _rowEmp["Position"] = item["POSIT"].ToString();
            _rowEmp["CostCenter"] = item["COSTCENTER"].ToString();
            _rowEmp["WTYPE"] = item["WTYPE"].ToString();
            dtEmp.Rows.Add(_rowEmp);
        }



        

        //  lbMP.Text = dtEmp.Rows.Count.ToString();
        //---------------- Get Employeee of Line --------------        

        //----------------- Create row content Manpower ------------------

        MMPInfo.MPAllChartInfo oItemMPP = new MMPInfo.MPAllChartInfo();

        int accuOP1 = 0, accuOP15 = 0, accuOP2 = 0, accuOP3 = 0, CountMPOP = 1, CountMPOP_D = 0, CountMPOP_N = 0, REQ_MPOP_D = 0, REQ_MPOP_N = 0;
        int accuLE1 = 0, accuLE15 = 0, accuLE2 = 0, accuLE3 = 0, CountMPLE = 1, CountMPLE_D = 0, CountMPLE_N = 0, REQ_MPLE_D = 0, REQ_MPLE_N = 0; ;
        int accuFO1 = 0, accuFO15 = 0, accuFO2 = 0, accuFO3 = 0, CountMPFO = 1, CountMPFO_D = 0, CountMPFO_N = 0, REQ_MPFO_D = 0, REQ_MPFO_N = 0;
        int accuSU1 = 0, accuSU15 = 0, accuSU2 = 0, accuSU3 = 0, CountMPSU = 1, CountMPSU_D = 0, CountMPSU_N = 0, REQ_MPSU_D = 0, REQ_MPSU_N = 0;
        int CountMPOTREQD = 1, CountMPOTREQN = 1, SumMPReqD = 1, SumMPReqN = 1, CountMPN = 1, CountMPH = 1, SumMP = 1;
        int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
        int SumFOLE_ACTD = 0, SumFOLE_ACTN = 0, SumLEOT_ReqD = 0, SumLEOT_ReqN = 0, SumLEOT_ActD = 0, SumLEOT_ActN = 0;

        double CostOverAllSum = 0;


        //---------------- Get Employeee of Line --------------
        DataTable dtMNOT = new DataTable();

        dtMNOT.Columns.Add("Fiscal_year", typeof(string));
        dtMNOT.Columns.Add("Monthly", typeof(string));
        dtMNOT.Columns.Add("Daily", typeof(string));
        dtMNOT.Columns.Add("ProductType", typeof(string));

        dtMNOT.Columns.Add("STD_MPDay", typeof(string));
        dtMNOT.Columns.Add("ACT_MPDay", typeof(string));
        dtMNOT.Columns.Add("STD_MPNight", typeof(string));
        dtMNOT.Columns.Add("ACT_MPNight", typeof(string));

        dtMNOT.Columns.Add("STD_OTDay", typeof(string));
        dtMNOT.Columns.Add("REQ_OTDay", typeof(string));
        dtMNOT.Columns.Add("ACT_OTDay", typeof(string));

        dtMNOT.Columns.Add("STD_OTNight", typeof(string));
        dtMNOT.Columns.Add("REQ_OTNight", typeof(string));
        dtMNOT.Columns.Add("ACT_OTNight", typeof(string));



        // DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sqlMNOT = new SqlCommand();


        sqlMNOT.CommandText = "SELECT Fiscal_year,Monthly,Daily,ProductType,STD_MPDay,ACT_MPDay" +
            " ,STD_MPNight,ACT_MPNight,STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight" +
           " FROM BC_MANPOWER where Fiscal_year = '" + _Year + "' and  Monthly = '" + MonthSelect + "' and ProductType ='" + Txt_Type + "' " +
           " order by daily ";



        DataTable dtMOT = oConn.SqlGet(sqlMNOT, "DBBCS");

        if (dtMOT.Rows.Count > 0)
        {
            foreach (DataRow item in dtMOT.Rows)
            {
                DataRow _rowMNOT = dtMNOT.NewRow();
                _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                _rowMNOT["Monthly"] = item["Monthly"].ToString();
                _rowMNOT["Daily"] = item["Daily"].ToString();
                _rowMNOT["ProductType"] = item["ProductType"].ToString();
                _rowMNOT["STD_MPDay"] = item["STD_MPDay"].ToString();
                _rowMNOT["ACT_MPDay"] = item["ACT_MPDay"].ToString();
                _rowMNOT["STD_MPNight"] = item["STD_MPNight"].ToString();
                _rowMNOT["ACT_MPNight"] = item["ACT_MPNight"].ToString();
                _rowMNOT["STD_OTDay"] = item["STD_OTDay"].ToString();
                _rowMNOT["REQ_OTDay"] = item["REQ_OTDay"].ToString();
                _rowMNOT["ACT_OTDay"] = item["ACT_OTDay"].ToString();
                _rowMNOT["STD_OTNight"] = item["STD_OTNight"].ToString();
                _rowMNOT["REQ_OTNight"] = item["REQ_OTNight"].ToString();
                _rowMNOT["ACT_OTNight"] = item["ACT_OTNight"].ToString();

                dtMNOT.Rows.Add(_rowMNOT);
            }

        }


        //** Productivity End


        //   string InsertDD;

       

        int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;
        int LECount_D = 0, LECount_N = 0, FOCount_D = 0, FOCount_N = 0; ;
        int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;
        string DatetoDay = "";

        if (dtMNOT.Rows.Count > 0)
        {
            if ((MonthSelect == MonthPresent) && ((_Type == "MPMTALL") || (_Type == "OTMTALL") || (_Type == "MPQCQAQS") || (_Type == "OTQCQAQS")
               || (_Type == "MPPS") || (_Type == "MPQA")))
            {

                int idxMP = 0;
                //--------------- Get Employee working Time ---------------------
                DataTable dtempWorkingTime = new DataTable();

            
                //int SumOT1 = 0, OT1 = 0, OT15 = 0, OT2 = 0, OT3 = 0;
                int SUMMPD = 0, DOT1 = 0, DOT15 = 0, DOT2 = 0, DOT3 = 0, SDOT1 = 0, SDOT15 = 0, SDOT2 = 0, SDOT3 = 0;
                int SUMMPN = 0, HOT1 = 0, HOT15 = 0, HOT2 = 0, HOT3 = 0, SHOT1 = 0, SHOT15 = 0, SHOT2 = 0, SHOT3 = 0;
                int SUMMPH = 0, NOT1 = 0, NOT15 = 0, NOT2 = 0, NOT3 = 0, SNOT1 = 0, SNOT15 = 0, SNOT2 = 0, SNOT3 = 0;



                DataTable dtWorkTime = new DataTable();
                dtWorkTime.Columns.Add("Code", typeof(string));
                dtWorkTime.Columns.Add("WorkDate", typeof(string));
                dtWorkTime.Columns.Add("POSIT", typeof(string));
                dtWorkTime.Columns.Add("OT1", typeof(int));
                dtWorkTime.Columns.Add("OT15", typeof(int));
                dtWorkTime.Columns.Add("OT2", typeof(int));
                dtWorkTime.Columns.Add("OT3", typeof(int));
                dtWorkTime.Columns.Add("SUMOT", typeof(int));
                dtWorkTime.Columns.Add("REQDOT1", typeof(int));
                dtWorkTime.Columns.Add("REQDOT15", typeof(int));
                dtWorkTime.Columns.Add("REQDOT2", typeof(int));
                dtWorkTime.Columns.Add("REQDOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMDOTREQ", typeof(int));
                dtWorkTime.Columns.Add("SUMMPReqD", typeof(int));
                dtWorkTime.Columns.Add("DOT1", typeof(int));
                dtWorkTime.Columns.Add("DOT15", typeof(int));
                dtWorkTime.Columns.Add("DOT2", typeof(int));
                dtWorkTime.Columns.Add("DOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMDOT", typeof(int));
                dtWorkTime.Columns.Add("SUMMPD", typeof(int));

                dtWorkTime.Columns.Add("REQNOT1", typeof(int));
                dtWorkTime.Columns.Add("REQNOT15", typeof(int));
                dtWorkTime.Columns.Add("REQNOT2", typeof(int));
                dtWorkTime.Columns.Add("REQNOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMNOTREQ", typeof(int));
                dtWorkTime.Columns.Add("SUMMPReqN", typeof(int));
                dtWorkTime.Columns.Add("NOT1", typeof(int));
                dtWorkTime.Columns.Add("NOT15", typeof(int));
                dtWorkTime.Columns.Add("NOT2", typeof(int));
                dtWorkTime.Columns.Add("NOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMNOT", typeof(int));
                dtWorkTime.Columns.Add("SUMMPN", typeof(int));

                dtWorkTime.Columns.Add("REQHOT1", typeof(int));
                dtWorkTime.Columns.Add("REQHOT15", typeof(int));
                dtWorkTime.Columns.Add("REQHOT2", typeof(int));
                dtWorkTime.Columns.Add("REQHOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMHOTREQ", typeof(int));
                dtWorkTime.Columns.Add("SUMMPReqH", typeof(int));
                dtWorkTime.Columns.Add("HOT1", typeof(int));
                dtWorkTime.Columns.Add("HOT15", typeof(int));
                dtWorkTime.Columns.Add("HOT2", typeof(int));
                dtWorkTime.Columns.Add("HOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMHOT", typeof(int));
                dtWorkTime.Columns.Add("SUMMPH", typeof(int));


                //--------------- Get Employee working Time ---------------------
                //int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
                int FlagUdate = 0;
                //int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;

                int Xdate = 0;
                int Yester = 0;
                int SUMOT_REQDD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
                int SUMOT_REQNN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
                int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
                int SUMMP_SHIFT = 0, SUMACT_MP = 0;
                //int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;
                int FlagInsert = 1;


                for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                {
                    //------------------ Monthly Present Update --------------------//
                    if (i >= 2)
                    {
                        Yester = i - 1;
                        setyesterday = new DateTime(DateTime.Now.Year, setDate.Month, Yester);

                    }
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);




                    if ((setDate >= EndYesterday) && (setDate <= dateEnd))
                    {
                        //if (setDate <= Endtoday)
                        //{
                        FlagUdate = 1;

                        //----------------- Fillter Working Time -------------
                        bool Working = false;
                    

                        sql.CommandText = "SELECT e.Posit,WorkShift,WorkType,otr.OTFROM ,[WCode],[WDate],[WTime],[WDoor],es.[WType],LTRIM(DATEDIFF(MINUTE, 0, otr.OT1)) as OT1,LTRIM(DATEDIFF(MINUTE, 0, otr.OT15)) as OT15 " +
          ",LTRIM(DATEDIFF(MINUTE, 0, otr.OT2)) as OT2,LTRIM(DATEDIFF(MINUTE, 0, otr.OT3)) as OT3 " +
          " FROM [dbDCI].[dbo].[EmployeeTimeStamp] es " +
          " LEFT JOIN [dbDCI].[dbo].[Employee] e ON es.WCode = e.CODE " +
          " LEFT JOIN [dbDCI].[dbo].[EmployeeWorkingTime] wt ON es.WCode = wt.Code " +
          " LEFT JOIN [dbDCI].[dbo].[EMP_OTRQ] otr ON es.WCode = otr.CODE AND es.WDate = otr.ODATE " +
          " WHERE WDate >= '" + setDate.ToString("yyyy-MM-dd") + "' AND WDate <= '" + setDate.ToString("yyyy-MM-dd") + "' AND es.WType = 'O' " +
          " And OTFROM != ''" +
          "	AND CONVERT(DATE, wt.SystemOUT) = WDate " +
          " and (CostCenter = " + txtCostCenter + " )" +
                            // " And  ( " + txtAndon + "')" +
          " order by WDate  desc";


                        DataTable dtt = oConn.SqlGet(sql, "DBDCI");
                        if (dtt.Rows.Count > 0)
                        {

                            //DataRow _row = dtWorkTime.NewRow();
                            //foreach (DataRow item in dtt.Rows)
                            //{

                            //    _row["Code"] = item["WCode"].ToString();
                            //    _row["WorkDate"] = Convert.ToDateTime(item["WDate"].ToString()).ToString("yyyy-MM-dd");
                            //    _row["POSIT"] = item["Posit"].ToString();


                            //    //-------------------- ActWork, OT REQ,ACT LE-FO -----------------------                                    
                            //    //if ((item["Posit"].ToString() == "LE") || (item["Posit"].ToString() == "FO"))
                            //    //{

                            //    if (item["WorkShift"].ToString() == "D")
                            //    {

                            //        if ((item["OTFROM"].ToString() != "06:05") && (item["OTFROM"].ToString() != "20:00"))
                            //        {

                            //            SUMOT_REQDD += 1;

                            //            if (item["OT1"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                            //                {
                            //                    REQDOT1 += Convert.ToInt16(item["OT1"]);
                            //                    SREQDOT1 += 1;
                            //                }
                            //            }
                            //            if (item["OT15"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                            //                {
                            //                    REQDOT15 += Convert.ToInt16(item["OT15"]);
                            //                    SREQDOT15 += 1;
                            //                }
                            //            }
                            //            if (item["OT2"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                            //                {
                            //                    REQDOT2 += Convert.ToInt16(item["OT2"]);
                            //                    SREQDOT2 += 1;
                            //                }
                            //            }
                            //            if (item["OT3"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                            //                {
                            //                    REQDOT3 += Convert.ToInt16(item["OT3"]);
                            //                    SREQDOT3 += 1;
                            //                }
                            //            }

                            //            if (SREQDOT1 != 0 || SREQDOT15 != 0 || SREQDOT2 != 0 || SREQDOT3 != 0)
                            //            {
                            //                SUMOT_ACTD += 1;
                            //                SREQDOT1 = 0;
                            //                SREQDOT15 = 0;
                            //                SREQDOT2 = 0;
                            //                SREQDOT3 = 0;
                            //            }
                            //        }
                            //        else
                            //        {
                            //            SUMOT_REQDD += 1;

                            //            if (item["OT1"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                            //                {
                            //                    DOT1 += Convert.ToInt16(item["OT1"]);
                            //                    SDOT1 += 1;
                            //                }
                            //            }
                            //            if (item["OT15"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                            //                {
                            //                    DOT15 += Convert.ToInt16(item["OT15"]);
                            //                    SDOT15 += 1;
                            //                }
                            //            }
                            //            if (item["OT2"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                            //                {
                            //                    DOT2 += Convert.ToInt16(item["OT2"]);
                            //                    SDOT2 += 1;
                            //                }
                            //            }
                            //            if (item["OT3"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                            //                {
                            //                    DOT3 += Convert.ToInt16(item["OT3"]);
                            //                    SDOT3 += 1;
                            //                }
                            //            }

                            //            if (SDOT1 != 0 || SDOT15 != 0 || SDOT2 != 0 || SDOT3 != 0)
                            //            {
                            //                SUMMPD += 1;
                            //                SDOT1 = 0;
                            //                SDOT15 = 0;
                            //                SDOT2 = 0;
                            //                SDOT3 = 0;
                            //            }

                            //        }

                            //    }
                            //    else if (item["WorkShift"].ToString() == "N")
                            //    {
                            //        if ((item["OTFROM"].ToString() == "06:05") || (item["OTFROM"].ToString() == "20:00"))
                            //        {
                            //            SUMOT_REQNN += 1;
                            //            if (item["OT1"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                            //                {
                            //                    REQNOT1 += Convert.ToInt16(item["OT1"]);
                            //                    SREQNOT1 += 1;
                            //                }
                            //            }
                            //            if (item["OT15"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                            //                {
                            //                    REQNOT15 += Convert.ToInt16(item["OT15"]);
                            //                    SREQNOT15 += 1;
                            //                }
                            //            }
                            //            if (item["OT2"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                            //                {
                            //                    REQNOT2 += Convert.ToInt16(item["OT2"]);
                            //                    SREQNOT2 += 1;
                            //                }
                            //            }
                            //            if (item["OT3"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                            //                {
                            //                    REQNOT3 += Convert.ToInt16(item["OT3"]);
                            //                    SREQNOT3 += 1;
                            //                }
                            //            }
                            //            if (SREQNOT1 != 0 || SREQNOT15 != 0 || SREQNOT2 != 0 || SREQNOT3 != 0)
                            //            {
                            //                SUMOT_ACTN += 1;
                            //                SREQNOT1 = 0;
                            //                SREQNOT15 = 0;
                            //                SREQNOT2 = 0;
                            //                SREQNOT3 = 0;
                            //            }
                            //        }
                            //        else
                            //        {

                            //            SUMOT_REQNN += 1;
                            //            if (item["OT1"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                            //                {
                            //                    NOT1 += Convert.ToInt16(item["OT1"]);
                            //                    SNOT1 += 1;
                            //                }
                            //            }
                            //            if (item["OT15"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                            //                {
                            //                    NOT15 += Convert.ToInt16(item["OT15"]);
                            //                    SNOT15 += 1;
                            //                }
                            //            }
                            //            if (item["OT2"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                            //                {
                            //                    NOT2 += Convert.ToInt16(item["OT2"]);
                            //                    SNOT2 += 1;
                            //                }
                            //            }
                            //            if (item["OT3"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                            //                {
                            //                    NOT3 += Convert.ToInt16(item["OT3"]);
                            //                    SNOT3 += 1;
                            //                }
                            //            }
                            //            if (SNOT1 != 0 || SNOT15 != 0 || SNOT2 != 0 || SNOT3 != 0)
                            //            {
                            //                SUMMPN += 1;
                            //                SNOT1 = 0;
                            //                SNOT15 = 0;
                            //                SNOT2 = 0;
                            //                SNOT3 = 0;
                            //            }
                            //        }
                            //    }
                            //    else if (item["WorkType"].ToString() == "H")
                            //    {
                            //        if (item["OT1"].ToString() != "")
                            //        {
                            //            if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                            //            {
                            //                HOT1 += Convert.ToInt16(item["OT1"]);
                            //                SHOT1 += 1;
                            //            }
                            //        }
                            //        if (item["OT15"].ToString() != "")
                            //        {
                            //            if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                            //            {
                            //                HOT15 += Convert.ToInt16(item["OT15"]);
                            //                SHOT15 += 1;
                            //            }
                            //        }
                            //        if (item["OT2"].ToString() != "")
                            //        {
                            //            if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                            //            {
                            //                HOT2 += Convert.ToInt16(item["OT2"]);
                            //                SHOT2 += 1;
                            //            }
                            //        }
                            //        if (item["OT3"].ToString() != "")
                            //        {
                            //            if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                            //            {
                            //                HOT3 += Convert.ToInt16(item["OT3"]);
                            //                SHOT3 += 1;
                            //            }
                            //        }
                            //        if (SHOT1 != 0 || SHOT15 != 0 || SHOT2 != 0 || SHOT3 != 0)
                            //        {
                            //            SUMMPH += 1;
                            //            SHOT1 = 0;
                            //            SHOT15 = 0;
                            //            SHOT2 = 0;
                            //            SHOT3 = 0;
                            //        }
                            //    }


                            //    // Get ManPower FOLE

                            //    string dataShift = "";
                            //    DataTable dtEMCL = new DataTable();
                            //    string StrEMCL = "SELECT YM, CODE, STSS, STSO " +
                            //        " FROM EMP_EMCL " +
                            //        " WHERE YM =@YM AND CODE=@CODE ";
                            //    SqlCommand cmdEMCL = new SqlCommand();
                            //    cmdEMCL.CommandText = StrEMCL;
                            //    cmdEMCL.Parameters.Add(new SqlParameter("YM", DateTime.Now.ToString("yyyyMM")));
                            //    cmdEMCL.Parameters.Add(new SqlParameter("CODE", item["WCode"].ToString()));
                            //    cmdEMCL.CommandTimeout = 180;
                            //    dtEMCL = oConDCI.Query(cmdEMCL);

                            //    if (dtEMCL.Rows.Count > 0)
                            //    {
                            //        if (DateTime.Now.Day < 5)
                            //        {
                            //            for (int k = DateTime.Now.Day; k <= 27; k++)
                            //            {
                            //                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(k - 1, 1);
                            //                if (dataShift == "T" || dataShift == "H")
                            //                { }
                            //                else { break; }
                            //            }
                            //        }
                            //        else if (DateTime.Now.Day > 20)
                            //        {
                            //            for (int k = DateTime.Now.Day; k >= 5; k--)
                            //            {
                            //                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(k - 1, 1);
                            //                if (dataShift == "T" || dataShift == "H")
                            //                { }
                            //                else { break; }
                            //            }
                            //        }
                            //        else
                            //        {
                            //            for (int k = DateTime.Now.Day; k <= 27; k++)
                            //            {
                            //                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(k - 1, 1);
                            //                if (dataShift == "T" || dataShift == "H")
                            //                { }
                            //                else { break; }
                            //            }
                            //        }
                            //    }//end if emcl data



                            //    if (dataShift == "D")
                            //    {
                            //        MPFOLE_D++;
                            //    }
                            //    else if (dataShift == "N")
                            //    {
                            //        MPFOLE_N++;
                            //    }

                            //    MPFOLE_ALL = MPFOLE_D + MPFOLE_N;


                            //    //  SumMP_ACTD += MPFOLE_D;


                            //    // SumMP_ACTN += MPFOLE_N;


                            //    //SumOT_ReqD += SUMOT_REQD;


                            //    //SumOT_ReqN += SUMOT_REQN;


                            //    //SumOT_ActD += SUMOT_ACTD;


                            //    //SumOT_ActN += SUMOT_ACTN;



                            //}  //-----  CHECK UPDATE 2 DAYS

                            //try
                            //{
                            //    MPFOLE_ALL = MPFOLE_D + MPFOLE_N;
                            //}
                            //catch { }

                        }



                        DataTable MPData1 = GetManPowerByLine_Direct(txtCostCenter);
                        MPCount_D += Convert.ToInt16(MPData1.Rows[0]["MP_D"]);
                        MPCount_N += Convert.ToInt16(MPData1.Rows[0]["MP_N"]);


                        //------Actual Work by Line Day,Night
                        SumFOLE_ACTD += GetWorkActByLineDayFOLE_Direct(txtCostCenter, setDate);
                        SumFOLE_ACTN += GetWorkActByLineNightFOLE_Direct(txtCostCenter, setDate);

                        //-------OT Req, Actual Day,Night

                        SumOT_ReqD += GetOTReqByLineDayFOLE_Direct(txtCostCenter, setDate);
                        SumOT_ReqN += GetOTReqByLineNightFOLE_Direct(txtCostCenter, setDate);
                        SumOT_ActD += GetOTActByLineDayFOLE_Direct(txtCostCenter, setDate);
                        SumOT_ActN += GetOTActByLineNightFOLE_Direct(txtCostCenter, setDate);

                        SqlCommand sqlCheck = new SqlCommand();
                        sqlCheck.CommandText = "SELECT * FROM BC_ManPower WHERE ProductType = " +
                       " '" + Txt_Type + "' and Fiscal_year = '" + _Year + "'" +
                           " and Monthly = '" + _Month + "' and Daily ='" + i + "'";
                        DataTable dtCheck = oConBCS.Query(sqlCheck);



                        if (dtCheck.Rows.Count > 0)
                        {

                            FlagInsert = 1;

                        }
                        else
                        {
                            FlagInsert = 0;

                        }


                    }
                    else
                    {

                        SqlCommand sqlCheck = new SqlCommand();
                        sqlCheck.CommandText = "SELECT * FROM BC_ManPower WHERE ProductType = " +
                       " '" + Txt_Type + "' and Fiscal_year = '" +_Year + "'" +
                           " and Monthly = '" + _Month + "' and Daily ='" + i + "'";
                        DataTable dtCheck = oConBCS.Query(sqlCheck);
                        if (dtCheck.Rows.Count > 0)
                        {

                            FlagInsert = 1;
                           
                            DataTable dtMP = new DataTable();
                            dtMP.Columns.Add("STD_MPDay", typeof(string));
                            dtMP.Columns.Add("STD_MPNight", typeof(string));
                            dtMP.Columns.Add("ACT_MPDay", typeof(string));
                            dtMP.Columns.Add("ACT_MPNight", typeof(string));
                            dtMP.Columns.Add("REQ_OTDay", typeof(string));
                            dtMP.Columns.Add("REQ_OTNight", typeof(string));
                            dtMP.Columns.Add("ACT_OTDay", typeof(string));
                            dtMP.Columns.Add("ACT_OTNight", typeof(string));

                            foreach (DataRow item in dtCheck.Rows)
                            {

                                if (i == Convert.ToInt16(item["Daily"].ToString()))
                                {
                                    DataRow _rowMP = dtMP.NewRow();

                                    _rowMP["STD_MPDay"] = item["STD_MPDay"].ToString();
                                    _rowMP["STD_MPNight"] = item["STD_MPNight"].ToString();
                                    _rowMP["ACT_MPDay"] = item["ACT_MPDay"].ToString();
                                    _rowMP["ACT_MPNight"] = item["ACT_MPNight"].ToString();
                                    _rowMP["REQ_OTDay"] = item["REQ_OTDay"].ToString();
                                    _rowMP["REQ_OTNight"] = item["REQ_OTNight"].ToString();
                                    _rowMP["ACT_OTDay"] = item["ACT_OTDay"].ToString();
                                    _rowMP["ACT_OTNight"] = item["ACT_OTNight"].ToString();
                                    dtMP.Rows.Add(_rowMP);

                                    //if (i == Convert.ToInt16(item["Daily"].ToString()))
                                    //{
                                    // ** Man Power Attandance
                                    DatetoDay = i + ":" + setDate.DayOfWeek.ToString().Substring(0, 3);
                                    Xdate = i;

                                    //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                                    //  mManPower.SumMP_STD = SUMACT_MP;


                                    MPCount_D = Convert.ToInt16(item["STD_MPDay"].ToString());
                                    MPCount_N = Convert.ToInt16(item["STD_MPNight"].ToString());
                                    SumMP_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                                    SumMP_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());
                                    //SumMP_DIFFD = MPCount_D - SumMP_ACTD;
                                    //SumMP_DIFFN = MPCount_N - SumMP_ACTN;


                                    // ** OT Req,ACT
                                    SumOT_ReqD = Convert.ToInt16(item["REQ_OTDay"].ToString());
                                    SumOT_ReqN = Convert.ToInt16(item["REQ_OTNight"].ToString());
                                    SumOT_ActD = Convert.ToInt16(item["ACT_OTDay"].ToString());
                                    SumOT_ActN = Convert.ToInt16(item["ACT_OTNight"].ToString());
                                }
                            }
                        }
                        else
                        {
                            FlagInsert = 0;


                            DataTable MPData2 = GetManPowerByLine_Direct(txtCostCenter);
                            MPCount_D += Convert.ToInt16(MPData2.Rows[0]["MP_D"]);
                            MPCount_N += Convert.ToInt16(MPData2.Rows[0]["MP_N"]);


                            //------Actual Work by Line Day,Night
                            SumFOLE_ACTD += GetWorkActByLineDayFOLE_Direct(txtCostCenter, setDate);
                            SumFOLE_ACTN += GetWorkActByLineNightFOLE_Direct(txtCostCenter, setDate);

                            //-------OT Req, Actual Day,Night

                            SumOT_ReqD += GetOTReqByLineDayFOLE_Direct(txtCostCenter, setDate);
                            SumOT_ReqN += GetOTReqByLineNightFOLE_Direct(txtCostCenter, setDate);
                            SumOT_ActD += GetOTActByLineDayFOLE_Direct(txtCostCenter, setDate);
                            SumOT_ActN += GetOTActByLineNightFOLE_Direct(txtCostCenter, setDate);

                        }
                       


                    }

                    if (((setDate <= dateEnd) && ((_Type == "MPPS") || (_Type == "MPQA"))) ||
                      ((_Type == "OTMPPS") || (_Type == "OTMPQA")))
                    {

                        //*****  Data for MP, OT Req and Actual                  
                        MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                        //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                        DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);
                        //SUMMP_SHIFT = MPCountALL;
                        //SUMACT_MP = SUMOT_REQD + SUMOT_REQN;


                        // ** Man Power Attandance
                        mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                        mManPower.Xdate = i;

                        mManPower.SumMPD = MPCount_D;
                        mManPower.SumMPN = MPCount_N;

                        SumMP_ACTD += SumFOLE_ACTD;
                        SumMP_ACTN += SumFOLE_ACTN;

                        mManPower.SumMP_ACTD = SumMP_ACTD;
                        mManPower.SumMP_ACTN = SumMP_ACTN;

                        if (SumMP_ACTD != 0)
                        {
                            mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                        }
                        else
                        {
                            mManPower.SumMP_DIFFD = 0;

                        }

                        if (SumMP_ACTN != 0)
                        {

                            mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                        }
                        else
                        {

                            mManPower.SumMP_DIFFN = 0;
                        }

                        // ** OT Req,ACT
                        mManPower.SumOT_ReqD = SumOT_ReqD;
                        mManPower.SumOT_ReqN = SumOT_ReqN;
                        mManPower.SumOT_ActD = SumOT_ActD;
                        mManPower.SumOT_ActN = SumOT_ActN;

                        oListMP.Add(mManPower);

                        if ((FlagInsert == 1) && (setDate >= EndYesterday) && (setDate <= dateEnd) && (_Type == "MPPS" || _Type == "MPQA"))
                        {

                            SqlCommand UpdateMNOT = new SqlCommand();
                            UpdateMNOT.CommandText = "Update  BC_MANPOWER  " +
                                    " set STD_MPDay ='" + MPCount_D + "',ACT_MPDay ='" + SumMP_ACTD + "' " +
                                    ",STD_MPNight ='" + MPCount_N + "',ACT_MPNight ='" + SumMP_ACTN + "' " +
                                    ",STD_OTDay ='" + MPCount_D + "',REQ_OTDay ='" + SumOT_ReqD + "',ACT_OTDay = '" + SumOT_ActD + "'" +
                                    ",STD_OTNight ='" + MPCount_N + "',REQ_OTNight ='" + SumOT_ReqN + "',ACT_OTNight = '" + SumOT_ActN + "'" +
                                    "where  Fiscal_year ='" + _Year + "' and Monthly ='" + _Month + "' and Daily ='" + i + "' and ProductType ='" + Txt_Type + "'";

                            oConn.SqlExecute(UpdateMNOT, "DBBCS");
                        }
                        else if ((FlagInsert == 0) && (Txt_Type == "MPPS" || Txt_Type == "MPQA"))
                        {

                            SqlCommand InsertMNOT = new SqlCommand();

                            InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                                ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                                ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                                " VALUES ('" + _Year + "','" + _Month + "','" + i + "','" + Txt_Type + "' " +
                                ",'" + MPCount_D + "','" + SumMP_ACTD + "' " +
                                ",'" + MPCount_N + "','" + SumMP_ACTN + "' " +
                                ",'" + MPCount_D + "','" + SumOT_ReqD + "','" + SumOT_ActD + "' " +
                                ",'" + MPCount_N + "','" + SumOT_ReqN + "','" + SumOT_ActN + "')";
                            //}           



                            oConn.SqlExecute(InsertMNOT, "DBBCS");


                        }
                    }
                    else if ((setDate > dateEnd) && ((_Type == "MPPS") || (_Type == "MPQA")))
                        
                    {

                        //*****  Data for MP, OT Req and Actual                  
                        MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                        //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                        DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);


                        // ** Man Power Attandance
                        mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                        mManPower.Xdate = i;

                        mManPower.SumMPD = 0;
                        mManPower.SumMPN = 0;

                        SumMP_ACTD += 0;
                        SumMP_ACTN += 0;

                        mManPower.SumMP_ACTD = 0;
                        mManPower.SumMP_ACTN = 0;
                            mManPower.SumMP_DIFFD = 0;
                            mManPower.SumMP_DIFFN = 0;

                        // ** OT Req,ACT

                        mManPower.SumOT_ReqD = 0;
                        mManPower.SumOT_ReqN = 0;
                        mManPower.SumOT_ActD = 0;
                        mManPower.SumOT_ActN = 0;

                        oListMP.Add(mManPower);


                    }


                    MPCount_D = 0;
                    MPCount_N = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;

                    SumMP_ACTN = 0;
                    SumOT_ReqD = 0;
                    SumOT_ReqN = 0;
                    SumOT_ActD = 0;
                    SumOT_ActN = 0;
                    MPFOLE_ALL = 0;

                    SumMP_ACTN = 0;
                    SumOT_ActD = 0;
                    SumOT_ActN = 0;
                    SUMMPD = 0;
                    SUMMPN = 0;
                    SUMOT_REQNN = 0;
                    SUMOT_REQDD = 0;
                    SUMOT_ACTD = 0;
                    SUMOT_ACTN = 0;
                    MPFOLE_D = 0;
                    MPFOLE_N = 0;
                    LECount_D = 0;
                    LECount_N = 0;
                    FOCount_D = 0;
                    FOCount_N = 0;
                    SumFOLE_ACTD = 0;
                    SumFOLE_ACTN = 0;
                    FlagInsert = 1;


                    //  }
                }
            }
            else
            {

                //------------------Not have data for  OT Req --------------------//

                int Xdate = 0;
                int Yester = 0;
                int SUMOT_REQD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
                int SUMOT_REQN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
                int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
                int SUMMP_SHIFT = 0, SUMACT_MP = 0;
                //int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;

                for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                {


                    foreach (DataRow item in dtMNOT.Rows)
                    {

                        if (i == Convert.ToInt16(item["Daily"].ToString()))
                        {
                            // ** Man Power Attandance
                            DatetoDay = i + ":" + setDate.DayOfWeek.ToString().Substring(0, 3);
                            Xdate = i;

                            //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                            //  mManPower.SumMP_STD = SUMACT_MP;
                            MPCount_D = Convert.ToInt16(item["STD_MPDay"].ToString());
                            MPCount_N = Convert.ToInt16(item["STD_MPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());
                            //SumMP_DIFFD = MPCount_D - SumMP_ACTD;
                            //SumMP_DIFFN = MPCount_N - SumMP_ACTN;


                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["REQ_OTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["REQ_OTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["ACT_OTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["ACT_OTNight"].ToString());
                        }
                    }





                    //*****  Data for MP, OT Req and Actual                  
                    MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                    // ** Man Power Attandance
                    mManPower.DatetoDay = DatetoDay;
                    mManPower.Xdate = Xdate;

                    mManPower.SumMPD = MPCount_D;
                    mManPower.SumMPN = MPCount_N;

                    //SumMP_ACTD += MPFOLE_D;
                    //SumMP_ACTN += MPFOLE_N;

                    mManPower.SumMP_ACTD = SumMP_ACTD;
                    mManPower.SumMP_ACTN = SumMP_ACTN;

                    if (SumMP_ACTD != 0)
                    {
                        mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                    }
                    else
                    {
                        mManPower.SumMP_DIFFD = 0;

                    }

                    if (SumMP_ACTN != 0)
                    {

                        mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                    }
                    else
                    {

                        mManPower.SumMP_DIFFN = 0;
                    }

                    // ** OT Req,ACT

               
                    mManPower.SumOT_ReqD = SumOT_ReqD;
                    mManPower.SumOT_ReqN = SumOT_ReqN;
                    mManPower.SumOT_ActD = SumOT_ActD;
                    mManPower.SumOT_ActN = SumOT_ActN;

                    oListMP.Add(mManPower);

                }

            }

        }
        else
        {

            //------------------ Man-Power Daily for New Record or Erase Record to Insert---------------//

            int idxMP = 0;
            //--------------- Get Employee working Time ---------------------
            DataTable dtempWorkingTime = new DataTable();

         
            //int SumOT1 = 0, OT1 = 0, OT15 = 0, OT2 = 0, OT3 = 0;
            int SUMMPD = 0, DOT1 = 0, DOT15 = 0, DOT2 = 0, DOT3 = 0, SDOT1 = 0, SDOT15 = 0, SDOT2 = 0, SDOT3 = 0;
            int SUMMPN = 0, HOT1 = 0, HOT15 = 0, HOT2 = 0, HOT3 = 0, SHOT1 = 0, SHOT15 = 0, SHOT2 = 0, SHOT3 = 0;
            int SUMMPH = 0, NOT1 = 0, NOT15 = 0, NOT2 = 0, NOT3 = 0, SNOT1 = 0, SNOT15 = 0, SNOT2 = 0, SNOT3 = 0;



            DataTable dtWorkTime = new DataTable();
            dtWorkTime.Columns.Add("Code", typeof(string));
            dtWorkTime.Columns.Add("WorkDate", typeof(string));
            dtWorkTime.Columns.Add("POSIT", typeof(string));
            dtWorkTime.Columns.Add("OT1", typeof(int));
            dtWorkTime.Columns.Add("OT15", typeof(int));
            dtWorkTime.Columns.Add("OT2", typeof(int));
            dtWorkTime.Columns.Add("OT3", typeof(int));
            dtWorkTime.Columns.Add("SUMOT", typeof(int));
            dtWorkTime.Columns.Add("REQDOT1", typeof(int));
            dtWorkTime.Columns.Add("REQDOT15", typeof(int));
            dtWorkTime.Columns.Add("REQDOT2", typeof(int));
            dtWorkTime.Columns.Add("REQDOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMDOTREQ", typeof(int));
            dtWorkTime.Columns.Add("SUMMPReqD", typeof(int));
            dtWorkTime.Columns.Add("DOT1", typeof(int));
            dtWorkTime.Columns.Add("DOT15", typeof(int));
            dtWorkTime.Columns.Add("DOT2", typeof(int));
            dtWorkTime.Columns.Add("DOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMDOT", typeof(int));
            dtWorkTime.Columns.Add("SUMMPD", typeof(int));

            dtWorkTime.Columns.Add("REQNOT1", typeof(int));
            dtWorkTime.Columns.Add("REQNOT15", typeof(int));
            dtWorkTime.Columns.Add("REQNOT2", typeof(int));
            dtWorkTime.Columns.Add("REQNOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMNOTREQ", typeof(int));
            dtWorkTime.Columns.Add("SUMMPReqN", typeof(int));
            dtWorkTime.Columns.Add("NOT1", typeof(int));
            dtWorkTime.Columns.Add("NOT15", typeof(int));
            dtWorkTime.Columns.Add("NOT2", typeof(int));
            dtWorkTime.Columns.Add("NOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMNOT", typeof(int));
            dtWorkTime.Columns.Add("SUMMPN", typeof(int));

            dtWorkTime.Columns.Add("REQHOT1", typeof(int));
            dtWorkTime.Columns.Add("REQHOT15", typeof(int));
            dtWorkTime.Columns.Add("REQHOT2", typeof(int));
            dtWorkTime.Columns.Add("REQHOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMHOTREQ", typeof(int));
            dtWorkTime.Columns.Add("SUMMPReqH", typeof(int));
            dtWorkTime.Columns.Add("HOT1", typeof(int));
            dtWorkTime.Columns.Add("HOT15", typeof(int));
            dtWorkTime.Columns.Add("HOT2", typeof(int));
            dtWorkTime.Columns.Add("HOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMHOT", typeof(int));
            dtWorkTime.Columns.Add("SUMMPH", typeof(int));


            //--------------- Get Employee working Time ---------------------
            //int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
            int FlagUdate = 0;
            //int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;
            //string DatetoDay = "";
            int Xdate = 0;
            int Yester = 0;
            int SUMOT_REQD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
            int SUMOT_REQN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
            int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
            int SUMMP_SHIFT = 0, SUMACT_MP = 0;
            //int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;

            for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
            {

                if (i >= 2)
                {
                    Yester = i - 1;
                    setyesterday = new DateTime(DateTime.Now.Year, setDate.Month, Yester);

                }
                setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);




                //----------------- Fillter Working Time -------------
                bool Working = false;
              

                sql.CommandText = "SELECT e.Posit,WorkShift,WorkType,otr.OTFROM ,[WCode],[WDate],[WTime],[WDoor],es.[WType],LTRIM(DATEDIFF(MINUTE, 0, otr.OT1)) as OT1,LTRIM(DATEDIFF(MINUTE, 0, otr.OT15)) as OT15 " +
  ",LTRIM(DATEDIFF(MINUTE, 0, otr.OT2)) as OT2,LTRIM(DATEDIFF(MINUTE, 0, otr.OT3)) as OT3 " +
  " FROM [dbDCI].[dbo].[EmployeeTimeStamp] es " +
  " LEFT JOIN [dbDCI].[dbo].[Employee] e ON es.WCode = e.CODE " +
  " LEFT JOIN [dbDCI].[dbo].[EmployeeWorkingTime] wt ON es.WCode = wt.Code " +
  " LEFT JOIN [dbDCI].[dbo].[EMP_OTRQ] otr ON es.WCode = otr.CODE AND es.WDate = otr.ODATE " +
  " WHERE WDate >= '" + setDate.ToString("yyyy-MM-dd") + "' AND WDate <= '" + setDate.ToString("yyyy-MM-dd") + "' AND es.WType = 'O' " +
  " And OTFROM != ''" +
  "	AND CONVERT(DATE, wt.SystemOUT) = WDate " +
" and (CostCenter =  " + txtCostCenter + " )" +
                    //   " And  ( " + txtAndon + "')" +
  " order by WDate  desc";


                DataTable dtt = oConn.SqlGet(sql, "DBDCI");
                if (dtt.Rows.Count > 0)
                {

                    //DataRow _row = dtWorkTime.NewRow();
                    //foreach (DataRow item in dtt.Rows)
                    //{

                    //    _row["Code"] = item["WCode"].ToString();
                    //    _row["WorkDate"] = Convert.ToDateTime(item["WDate"].ToString()).ToString("yyyy-MM-dd");
                    //    _row["POSIT"] = item["Posit"].ToString();


                    //    //-------------------- ActWork, OT REQ,ACT LE-FO -----------------------                                    
                    //    //if ((item["Posit"].ToString() == "LE") || (item["Posit"].ToString() == "FO"))
                    //    //{

                    //    if (item["WorkShift"].ToString() == "D")
                    //    {

                    //        if ((item["OTFROM"].ToString() != "06:05") && (item["OTFROM"].ToString() != "20:00"))
                    //        {

                    //            SUMOT_REQD += 1;

                    //            if (item["OT1"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                    //                {
                    //                    REQDOT1 += Convert.ToInt16(item["OT1"]);
                    //                    SREQDOT1 += 1;
                    //                }
                    //            }
                    //            if (item["OT15"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                    //                {
                    //                    REQDOT15 += Convert.ToInt16(item["OT15"]);
                    //                    SREQDOT15 += 1;
                    //                }
                    //            }
                    //            if (item["OT2"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                    //                {
                    //                    REQDOT2 += Convert.ToInt16(item["OT2"]);
                    //                    SREQDOT2 += 1;
                    //                }
                    //            }
                    //            if (item["OT3"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                    //                {
                    //                    REQDOT3 += Convert.ToInt16(item["OT3"]);
                    //                    SREQDOT3 += 1;
                    //                }
                    //            }

                    //            if (SREQDOT1 != 0 || SREQDOT15 != 0 || SREQDOT2 != 0 || SREQDOT3 != 0)
                    //            {
                    //                SUMOT_ACTD += 1;
                    //                SREQDOT1 = 0;
                    //                SREQDOT15 = 0;
                    //                SREQDOT2 = 0;
                    //                SREQDOT3 = 0;
                    //            }
                    //        }
                    //        else
                    //        {
                    //            SUMOT_REQD += 1;

                    //            if (item["OT1"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                    //                {
                    //                    DOT1 += Convert.ToInt16(item["OT1"]);
                    //                    SDOT1 += 1;
                    //                }
                    //            }
                    //            if (item["OT15"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                    //                {
                    //                    DOT15 += Convert.ToInt16(item["OT15"]);
                    //                    SDOT15 += 1;
                    //                }
                    //            }
                    //            if (item["OT2"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                    //                {
                    //                    DOT2 += Convert.ToInt16(item["OT2"]);
                    //                    SDOT2 += 1;
                    //                }
                    //            }
                    //            if (item["OT3"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                    //                {
                    //                    DOT3 += Convert.ToInt16(item["OT3"]);
                    //                    SDOT3 += 1;
                    //                }
                    //            }

                    //            if (SDOT1 != 0 || SDOT15 != 0 || SDOT2 != 0 || SDOT3 != 0)
                    //            {
                    //                SUMMPD += 1;
                    //                SDOT1 = 0;
                    //                SDOT15 = 0;
                    //                SDOT2 = 0;
                    //                SDOT3 = 0;
                    //            }

                    //        }

                    //    }
                    //    else if (item["WorkShift"].ToString() == "N")
                    //    {
                    //        if ((item["OTFROM"].ToString() == "06:05") || (item["OTFROM"].ToString() == "20:00"))
                    //        {
                    //            SUMOT_REQN += 1;
                    //            if (item["OT1"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                    //                {
                    //                    REQNOT1 += Convert.ToInt16(item["OT1"]);
                    //                    SREQNOT1 += 1;
                    //                }
                    //            }
                    //            if (item["OT15"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                    //                {
                    //                    REQNOT15 += Convert.ToInt16(item["OT15"]);
                    //                    SREQNOT15 += 1;
                    //                }
                    //            }
                    //            if (item["OT2"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                    //                {
                    //                    REQNOT2 += Convert.ToInt16(item["OT2"]);
                    //                    SREQNOT2 += 1;
                    //                }
                    //            }
                    //            if (item["OT3"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                    //                {
                    //                    REQNOT3 += Convert.ToInt16(item["OT3"]);
                    //                    SREQNOT3 += 1;
                    //                }
                    //            }
                    //            if (SREQNOT1 != 0 || SREQNOT15 != 0 || SREQNOT2 != 0 || SREQNOT3 != 0)
                    //            {
                    //                SUMOT_ACTN += 1;
                    //                SREQNOT1 = 0;
                    //                SREQNOT15 = 0;
                    //                SREQNOT2 = 0;
                    //                SREQNOT3 = 0;
                    //            }
                    //        }
                    //        else
                    //        {

                    //            SUMOT_REQN += 1;
                    //            if (item["OT1"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                    //                {
                    //                    NOT1 += Convert.ToInt16(item["OT1"]);
                    //                    SNOT1 += 1;
                    //                }
                    //            }
                    //            if (item["OT15"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                    //                {
                    //                    NOT15 += Convert.ToInt16(item["OT15"]);
                    //                    SNOT15 += 1;
                    //                }
                    //            }
                    //            if (item["OT2"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                    //                {
                    //                    NOT2 += Convert.ToInt16(item["OT2"]);
                    //                    SNOT2 += 1;
                    //                }
                    //            }
                    //            if (item["OT3"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                    //                {
                    //                    NOT3 += Convert.ToInt16(item["OT3"]);
                    //                    SNOT3 += 1;
                    //                }
                    //            }
                    //            if (SNOT1 != 0 || SNOT15 != 0 || SNOT2 != 0 || SNOT3 != 0)
                    //            {
                    //                SUMMPN += 1;
                    //                SNOT1 = 0;
                    //                SNOT15 = 0;
                    //                SNOT2 = 0;
                    //                SNOT3 = 0;
                    //            }
                    //        }
                    //    }
                    //    else if (item["WorkType"].ToString() == "H")
                    //    {
                    //        if (item["OT1"].ToString() != "")
                    //        {
                    //            if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                    //            {
                    //                HOT1 += Convert.ToInt16(item["OT1"]);
                    //                SHOT1 += 1;
                    //            }
                    //        }
                    //        if (item["OT15"].ToString() != "")
                    //        {
                    //            if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                    //            {
                    //                HOT15 += Convert.ToInt16(item["OT15"]);
                    //                SHOT15 += 1;
                    //            }
                    //        }
                    //        if (item["OT2"].ToString() != "")
                    //        {
                    //            if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                    //            {
                    //                HOT2 += Convert.ToInt16(item["OT2"]);
                    //                SHOT2 += 1;
                    //            }
                    //        }
                    //        if (item["OT3"].ToString() != "")
                    //        {
                    //            if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                    //            {
                    //                HOT3 += Convert.ToInt16(item["OT3"]);
                    //                SHOT3 += 1;
                    //            }
                    //        }
                    //        if (SHOT1 != 0 || SHOT15 != 0 || SHOT2 != 0 || SHOT3 != 0)
                    //        {
                    //            SUMMPH += 1;
                    //            SHOT1 = 0;
                    //            SHOT15 = 0;
                    //            SHOT2 = 0;
                    //            SHOT3 = 0;
                    //        }
                    //    }



                    //    string dataShift = "";
                    //    DataTable dtEMCL = new DataTable();
                    //    string StrEMCL = "SELECT YM, CODE, STSS, STSO " +
                    //        " FROM EMP_EMCL " +
                    //        " WHERE YM =@YM AND CODE=@CODE ";
                    //    SqlCommand cmdEMCL = new SqlCommand();
                    //    cmdEMCL.CommandText = StrEMCL;
                    //    cmdEMCL.Parameters.Add(new SqlParameter("YM", DateTime.Now.ToString("yyyyMM")));
                    //    cmdEMCL.Parameters.Add(new SqlParameter("CODE", item["WCode"].ToString()));
                    //    cmdEMCL.CommandTimeout = 180;
                    //    dtEMCL = oConDCI.Query(cmdEMCL);

                    //    if (dtEMCL.Rows.Count > 0)
                    //    {
                    //        if (DateTime.Now.Day < 5)
                    //        {
                    //            for (int k = DateTime.Now.Day; k <= 27; k++)
                    //            {
                    //                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(k - 1, 1);
                    //                if (dataShift == "T" || dataShift == "H")
                    //                { }
                    //                else { break; }
                    //            }
                    //        }
                    //        else if (DateTime.Now.Day > 20)
                    //        {
                    //            for (int k = DateTime.Now.Day; k >= 5; k--)
                    //            {
                    //                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(k - 1, 1);
                    //                if (dataShift == "T" || dataShift == "H")
                    //                { }
                    //                else { break; }
                    //            }
                    //        }
                    //        else
                    //        {
                    //            for (int k = DateTime.Now.Day; k <= 27; k++)
                    //            {
                    //                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(k - 1, 1);
                    //                if (dataShift == "T" || dataShift == "H")
                    //                { }
                    //                else { break; }
                    //            }
                    //        }
                    //    }//end if emcl data



                    //    if (dataShift == "D")
                    //    {
                    //        MPFOLE_D++;
                    //    }
                    //    else if (dataShift == "N")
                    //    {
                    //        MPFOLE_N++;
                    //    }

                    //    MPFOLE_ALL = MPFOLE_D + MPFOLE_N;
                    //}

                   
                    //------Actual ManPower by Line Day,Night
                    DataTable MPData3 = GetManPowerByLine_Direct(txtCostCenter);
                    MPCount_D += Convert.ToInt16(MPData3.Rows[0]["MP_D"]);
                    MPCount_N += Convert.ToInt16(MPData3.Rows[0]["MP_N"]);



                    //------Actual Work by Line Day,Night
                    SumFOLE_ACTD += GetWorkActByLineDayFOLE_Direct(txtCostCenter, setDate);
                    SumFOLE_ACTN += GetWorkActByLineNightFOLE_Direct(txtCostCenter, setDate);

                    //-------OT Req, Actual Day,Night

                    SumOT_ReqD += GetOTReqByLineDayFOLE_Direct(txtCostCenter, setDate);
                    SumOT_ReqN += GetOTReqByLineNightFOLE_Direct(txtCostCenter, setDate);
                    SumOT_ActD += GetOTActByLineDayFOLE_Direct(txtCostCenter, setDate);
                    SumOT_ActN += GetOTActByLineNightFOLE_Direct(txtCostCenter, setDate);

                }
                else
                {
                    DataTable MPData1 = GetManPowerByLine_Direct(txtCostCenter);
                    MPCount_D += Convert.ToInt16(MPData1.Rows[0]["MP_D"]);
                    MPCount_N += Convert.ToInt16(MPData1.Rows[0]["MP_N"]);



                    //------Actual Work by Line Day,Night
                    SumFOLE_ACTD += GetWorkActByLineDayFOLE_Direct(txtCostCenter, setDate);
                    SumFOLE_ACTN += GetWorkActByLineNightFOLE_Direct(txtCostCenter, setDate);

                    //-------OT Req, Actual Day,Night

                    SumOT_ReqD += GetOTReqByLineDayFOLE_Direct(txtCostCenter, setDate);
                    SumOT_ReqN += GetOTReqByLineNightFOLE_Direct(txtCostCenter, setDate);
                    SumOT_ActD += GetOTActByLineDayFOLE_Direct(txtCostCenter, setDate);
                    SumOT_ActN += GetOTActByLineNightFOLE_Direct(txtCostCenter, setDate);



                    foreach (DataRow item in dtMNOT.Rows)
                    {

                        if (i == Convert.ToInt16(item["Daily"].ToString()))
                        {
                            // ** Man Power Attandance
                            DatetoDay = i + ":" + setDate.DayOfWeek.ToString().Substring(0, 3);
                            Xdate = i;

                            //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                            //  mManPower.SumMP_STD = SUMACT_MP;
                            //  MPCount_D = Convert.ToInt16(item["STD_MPDay"].ToString());
                            //  MPCount_N = Convert.ToInt16(item["STD_MPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());
                            //SumMP_DIFFD = MPCount_D - SumMP_ACTD;
                            //SumMP_DIFFN = MPCount_N - SumMP_ACTN;


                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["REQ_OTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["REQ_OTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["ACT_OTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["ACT_OTNight"].ToString());
                        }
                    }


                }




                //*****  Data for MP, OT Req and Actual                  
                MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);
                //SUMMP_SHIFT = MPCountALL;
                //SUMACT_MP = SUMOT_REQD + SUMOT_REQN;


                // ** Man Power Attandance
                mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                mManPower.Xdate = i;

                //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                //  mManPower.SumMP_STD = SUMACT_MP;
                MPCount_D += LECount_D + FOCount_D;
                MPCount_N += LECount_N + FOCount_N;


                mManPower.SumMPD = MPCount_D;
                mManPower.SumMPN = MPCount_N;

                SumMP_ACTD += SumFOLE_ACTD;
                SumMP_ACTN += SumFOLE_ACTN;

                mManPower.SumMP_ACTD = SumMP_ACTD;
                mManPower.SumMP_ACTN = SumMP_ACTN;

                if (SumMP_ACTD != 0)
                {
                    mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                }
                else
                {
                    mManPower.SumMP_DIFFD = 0;

                }

                if (SumMP_ACTN != 0)
                {

                    mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                }
                else
                {

                    mManPower.SumMP_DIFFN = 0;
                }



                // ** OT Req,ACT

                //SumOT_ReqD += SUMOT_REQD;
                //SumOT_ReqN += SUMOT_REQN;
                //SumOT_ActD += SUMMPD;
                //SumOT_ActN += SUMMPN;

                mManPower.SumOT_ReqD = SumOT_ReqD;
                mManPower.SumOT_ReqN = SumOT_ReqN;
                mManPower.SumOT_ActD = SumOT_ActD;
                mManPower.SumOT_ActN = SumOT_ActN;



                //     mManPower.SumMPH = oItemMPP.SumMPH;
                //mManPower.SumMP = SUMOT_ACTN + SUMOT_ACTD;





                oListMP.Add(mManPower);



                //if (ii == MonthSelect)
                //{
                // *** Insert  Man Power Daily

                if (_Type == "MPPS" ||
                    _Type == "MPPSPrev" ||
                    _Type == "MPPSPrev2" ||
                    _Type == "MPPSPrev3" ||
                    _Type == "MPQA" ||
                    _Type == "MPQAPrev" ||
                    _Type == "MPQAPrev2" ||
                        _Type == "MPQAPrev3" )
                {
                    SqlCommand InsertMNOT = new SqlCommand();

                    InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                        ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                        ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                        " VALUES ('" + _Year + "','" + _Month + "','" + i + "','" + Txt_Type + "' " +
                        ",'" + MPCount_D + "','" + SumMP_ACTD + "' " +
                        ",'" + MPCount_N + "','" + SumMP_ACTN + "' " +
                        ",'" + MPCount_D + "','" + SumOT_ReqD + "','" + SumOT_ActD + "' " +
                        ",'" + MPCount_N + "','" + SumOT_ReqN + "','" + SumOT_ActN + "')";
                    //}           

                    oConn.SqlExecute(InsertMNOT, "DBBCS");
                }


                MPCount_D = 0;
                MPCount_N = 0;
                SumMP_ACTD = 0;
                SumMP_ACTN = 0;

                SumMP_ACTN = 0;
                SumOT_ReqD = 0;
                SumOT_ReqN = 0;
                SumOT_ActD = 0;
                SumOT_ActN = 0;
                MPFOLE_ALL = 0;

                SumMP_ACTN = 0;
                SumOT_ActD = 0;
                SumOT_ActN = 0;
                SUMMPD = 0;
                SUMMPN = 0;
                SUMOT_REQN = 0;
                SUMOT_REQD = 0;
                SUMOT_ACTD = 0;
                SUMOT_ACTN = 0;
                MPFOLE_D = 0;
                MPFOLE_N = 0;
                LECount_D = 0;
                LECount_N = 0;
                FOCount_D = 0;
                FOCount_N = 0;
                SumFOLE_ACTD = 0;
                SumFOLE_ACTN = 0;
            }

        }


        //   }




        PrdMonth = 0;
        SumPrdMonth = 0;
      
        accuOP1 = 0;
        accuOP15 = 0;
        accuOP2 = 0;
        accuOP3 = 0;

        accuLE1 = 0;
        accuLE15 = 0;
        accuLE2 = 0;
        accuLE3 = 0;

        accuFO1 = 0;
        accuFO15 = 0;
        accuFO2 = 0;
        accuFO3 = 0;

        accuSU1 = 0;
        accuSU15 = 0;
        accuSU2 = 0;
        accuSU3 = 0;

       


        CountMPOTREQD = 0;
        CountMPOTREQN = 0;
        //       CountMPD = 0;
        CountMPN = 0;
        CountMPH = 0;
        SumMP = 0;


        return oListMP;
    }
    public List<MMPInfo.MPAllChartInfo> GetChartMPDailybyInDirectSupport(int _Year,int _Month, DateTime _DataDate, string _Type)
    {

        List<MMPInfo.MPAllChartInfo> oListMP = new List<MMPInfo.MPAllChartInfo>();



        string[] ArryPrd = { "1YC", "2YC", "SCR", "1YC/3", "ODM" };
        //string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702", "4310", "4320", "4510", "4720", "8120" };
        string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702" };
        string[] ArryPrdFac1 = { "1101", "1102" };
        //string[] ArryPrdAndonFac1 = { "001", "049", "052", "054", "056", "057", "058", "062", "063", "065", "066", "069", "072", "074", "076", "077", "080", "083", "084", "089","090","093","095","098","103","106","107" };
        //string[] ArryPrdAndonFac2 = { "004", "005", "006", "007", "008", "009", "010", "011", "012", "013", "014", "015", "017", "018", "019", "020", "021", "022", "023", "026", "027", "028", "030", "031", "033", "034", "036", "037", "041", "043", "044", "045", "046", "051", "053", "059", "061", "068", "070", "071", "073" };
        string[] ArryPrdFac1M = { "1101" };
        string[] ArryPrdFac1A = { "1102" };
        string[] ArryPrdFac2 = { "1201", "1202", "1301", "1302", "1401", "1402" };
        string[] ArryPrdFac2M = { "1201" };
        string[] ArryPrdFac2A = { "1202" };
        string[] ArryPrdFac2Mo = { "1401" };
        string[] ArryPrdFac2MoA = { "1402" };
        string[] ArryPrdSCA = { "1301", "1302" };
        string[] ArryPrdSCRM = { "1301" };
        string[] ArryPrdSCRA = { "1302" };
        string[] ArryPrdFac3 = { "1701", "1702" };
        string[] ArryPrdFac3M = { "1701" };
        string[] ArryPrdFac3A = { "1702" };
        string[] ArryPrdODM = { "1501" };


        //* Maintenance 
        string[] ArryMT = { "4310", "4320", "4330", "4340" };
        string[] ArryMTM = { "4310" };
        string[] ArryMTA = { "4320" };
        string[] ArryMTPM = { "4330" };
        string[] ArryMTTPM = { "4340" };

        //* Engineer
        string[] ArryENALL = { "4410", "4420", "4430" };
        string[] ArryENA = { "4410" };
        string[] ArryENM = { "4420" };
        string[] ArryENMOT = { "4430" };


        //* IT & Env.
        string[] ArryITEC = { "7510", "4510", "4520" };
        string[] ArryECUT = { "4510", "4520" };
        string[] ArryIT = { "7510" };
        string[] ArryEC = { "4520" };
        string[] ArryUT = { "4510" };
        //* Procurement 
        string[] ArryProcurement = { "4110", "4120", "4130", "4910" };
        string[] ArryProPU = { "4110" };
        string[] ArryProPC = { "4120" };
        string[] ArryProSPU = { "4130" };
        //* Production Control and SCM
        string[] ArryPDSCM = { "4610", "4620", "4210", "4140" };
        string[] ArryIM = { "4610" };
        string[] ArryPN = { "4210" };
        string[] ArryPS = { "4620" };
        string[] ArryDC = { "4140" };
        string[] ArryWH = { "7610" };
        string[] ArrySP = { "4910" };

        //* QCQAQS
        string[] ArryQCQAQS = { "4710", "4720", "4830" };
        string[] ArryQC = { "4710" };
        string[] ArryQA = { "4720" };
        string[] ArryQS = { "4830" };

        //* Design and Development
        string[] ArryDDCD = { "4810", "4820" };
        string[] ArryDD = { "4810" };
        string[] ArryCD = { "4820" };

        //* S.G.A
        string[] ArrySGA = { "7110", "7210", "7220", "7230", "7240", "7250", "7260", "7270", "7310", "7410", "7710", "7720" };
        string[] ArryCC = { "7110" };
        string[] ArryHR = { "7210" };
        string[] ArryGA = { "7220" };
        string[] ArryAC = { "7230" };
        string[] ArryCB = { "7240" };
        string[] ArryTS = { "7250" };
        string[] ArryAudit = { "7260" };
        string[] ArryHRD = { "7270" };
        string[] ArrySF = { "7310" };
        string[] ArryLG = { "7410" };
        string[] ArryDCC = { "7710" };
        string[] ArryTD = { "7720" };



        string[] ArryPeriod = { "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod1 = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod2 = { "PRD_JAN", "PRD_FEB", "PRD_MAR", "PRD_APR", "PRD_MAY", "PRD_JUN", "PRD_JUL", "PRD_AUG", "PRD_SEP", "PRD_OCT", "PRD_NOV", "PRD_DEC" };

        int[] ArryDay = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 };
        int[] ArryMonth = { 4, 5, 6, 7, 8, 9, 10, 11, 12 };

        int[] ArryMonth1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };


        string pAccGroup = "EXP";
        string pBudgetType = "DI";
        string pYear = _DataDate.ToString("yyyy");
        string pMonth = _DataDate.ToString("MM");
        DateTime _LastYear = new DateTime();
        DateTime _Last2Year = new DateTime();
        DateTime _Last3Year = new DateTime();
        _LastYear = _DataDate.AddYears(-1);
        _Last2Year = _DataDate.AddYears(-2);
        _Last3Year = _DataDate.AddYears(-3);
        string pLastYear = _LastYear.ToString("yyyy");
        string pLast2Year = _Last2Year.ToString("yyyy");
        string pLast3Year = _Last3Year.ToString("yyyy");
        string TxtModel = " ";


        string Factory = "";
        string Txt_Type = "";


        #region init



        int[] _PrdActual = new int[12];

        string[] ArrySeires5 = new string[5];
        Decimal[] ArrySeiresValue5 = new Decimal[5];



        #endregion

        string[] ArryLoop = new string[0];
        string ProductType = "";
        string TargetType = "";




        DateTime strDate = new DateTime(DateTime.Now.Year, _Month, 1, 0, 0, 0);
        DateTime endDate = strDate.AddMonths(1).Date + new TimeSpan(0, 0, 0);

        DateTime strHr = DateTime.Today + new TimeSpan(08, 00, 00);
        DateTime dateEnd = DateTime.Today + new TimeSpan(20, 00, 00);
        DateTime Endtoday = DateTime.Now;
        DateTime EndYesterday = DateTime.Today - new TimeSpan(24, 00, 00);

        int MonthSelect = _Month;
        int MonthPresent = Endtoday.Month;
        int PrevMonth = _Month - 1;
        int NextMonth = _Month + 1;

        //------------- Create column header OT  -----------------


        DataTable dtBCPD = new DataTable();
        dtBCPD.Columns.Add("Fiscal_year", typeof(string));
        dtBCPD.Columns.Add("ProductType", typeof(string));
        dtBCPD.Columns.Add("PRD_JAN", typeof(string));
        dtBCPD.Columns.Add("PRD_FEB", typeof(string));
        dtBCPD.Columns.Add("PRD_MAR", typeof(string));
        dtBCPD.Columns.Add("PRD_APR", typeof(string));
        dtBCPD.Columns.Add("PRD_MAY", typeof(string));
        dtBCPD.Columns.Add("PRD_JUN", typeof(string));
        dtBCPD.Columns.Add("PRD_JUL", typeof(string));
        dtBCPD.Columns.Add("PRD_AUG", typeof(string));
        dtBCPD.Columns.Add("PRD_SEP", typeof(string));
        dtBCPD.Columns.Add("PRD_OCT", typeof(string));
        dtBCPD.Columns.Add("PRD_NOV", typeof(string));
        dtBCPD.Columns.Add("PRD_DEC", typeof(string));
        DateTime setDate1 = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sqlBCPD = new SqlCommand();
        sqlBCPD.CommandText = "SELECT Fiscal_year " +
            " ,ProductType,PRD_APR,PRD_MAY,PRD_JUN,PRD_JUL,PRD_AUG " +
            " ,PRD_SEP,PRD_OCT,PRD_NOV,PRD_DEC,PRD_JAN,PRD_FEB,PRD_MAR,Total_PRD " +
           " from BC_PRODUCTION " +
           " where [Fiscal_year] = " + setDate1.Year;


        // int LBCSPD = 0;
        double Prd = 0, Prd1 = 0, Prd2 = 0, Prd3 = 0, Prd4 = 0, Prd5 = 0, Prd6 = 0, Prd7 = 0;
        double Prd8 = 0, Prd9 = 0, Prd10 = 0, Prd11 = 0, Prd12 = 0, SumPrd = 0, SumPrdOverAll = 0, PrdMonth = 0, SumPrdMonth = 0;
        DataTable dt1 = oConn.SqlGet(sqlBCPD, "DBBCS");
        foreach (DataRow item in dt1.Rows)
        {
            DataRow _rowBCSPD = dtBCPD.NewRow();
            _rowBCSPD["Fiscal_year"] = item["Fiscal_year"].ToString();
            _rowBCSPD["ProductType"] = item["ProductType"].ToString();
            _rowBCSPD["PRD_JAN"] = item["PRD_JAN"];
            _rowBCSPD["PRD_FEB"] = item["PRD_FEB"];
            _rowBCSPD["PRD_MAR"] = item["PRD_MAR"];
            _rowBCSPD["PRD_APR"] = item["PRD_APR"];
            _rowBCSPD["PRD_MAY"] = item["PRD_MAY"];
            _rowBCSPD["PRD_JUN"] = item["PRD_JUN"];
            _rowBCSPD["PRD_JUL"] = item["PRD_JUL"];
            _rowBCSPD["PRD_AUG"] = item["PRD_AUG"];
            _rowBCSPD["PRD_SEP"] = item["PRD_SEP"];
            _rowBCSPD["PRD_OCT"] = item["PRD_OCT"];
            _rowBCSPD["PRD_NOV"] = item["PRD_NOV"];
            _rowBCSPD["PRD_DEC"] = item["PRD_DEC"];
            dtBCPD.Rows.Add(_rowBCSPD);
        }


        //---------------- Get Employeee of Line --------------


    

        DataTable dtEmp = new DataTable();
        dtEmp.Columns.Add("Code", typeof(string));
        dtEmp.Columns.Add("Position", typeof(string));
        dtEmp.Columns.Add("CostCenter", typeof(string));
        dtEmp.Columns.Add("WType", typeof(string));
        DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);




        //  DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);
        DateTime setyesterday = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sql = new SqlCommand();

        if ((_Type == "INFAC1") || (_Type == "INFAC1Prev") || (_Type == "INFAC1Prev2") || (_Type == "INFAC1Prev3") ||
           (_Type == "OTINFAC1") || (_Type == "OTINFAC1Prev") | (_Type == "OTINFAC1Prev2") || (_Type == "OTINFAC1Prev3"))
        {
            ArryLoop = ArryPrdFac1;
            txtCostCenter = ArryLoop[0] + " or COSTCENTER = " + ArryLoop[1];
            ProductType = "1YC";
            TargetType = "1YC";
            TxtModel = "1YC%";
            Factory = "1";
            Txt_Type = "INFAC1";

        }
        else if ((_Type == "INFAC2") || (_Type == "INFAC2Prev") || (_Type == "INFAC2Prev2") || (_Type == "INFAC2Prev3") ||
        (_Type == "OTINFAC2") || (_Type == "OTINFAC2Prev") | (_Type == "OTINFAC2Prev2") || (_Type == "OTINFAC2Prev3"))
        {
            ArryLoop = ArryPrdFac2;
            txtCostCenter = ArryLoop[0] + " or COSTCENTER = " + ArryLoop[1] + " or COSTCENTER = " + ArryLoop[2] + " or COSTCENTER = " + ArryLoop[3] + " or COSTCENTER = " + ArryLoop[4] + " or COSTCENTER = " + ArryLoop[5];
            ProductType = "2YC";
            TargetType = "2YC";
            TxtModel = "2YC%";
            Factory = "2";
            Txt_Type = "INFAC2";
        }
        else if ((_Type == "INFAC3") || (_Type == "INFAC3Prev") || (_Type == "INFAC3Prev2") || (_Type == "INFAC3Prev3") ||
       (_Type == "OTINFAC3") || (_Type == "OTINFAC3Prev") | (_Type == "OTINFAC3Prev2") || (_Type == "OTINFAC3Prev3"))
        {
            ArryLoop = ArryPrdFac3;
            txtCostCenter = ArryLoop[0] + " or COSTCENTER = " + ArryLoop[1];
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            TxtModel = "1YC%";
            Factory = "3";
            Txt_Type = "INFAC3";
        }
        else if ((_Type == "INODM") || (_Type == "INODMPrev") || (_Type == "INODMPrev2") || (_Type == "INODMPrev3") ||
          (_Type == "OTINODM") || (_Type == "OTINODMPrev") | (_Type == "OTINODMPrev2") || (_Type == "OTINODMPrev3"))
        {
            ArryLoop = ArryPrdODM;
            txtCostCenter = ArryLoop[0];
            ProductType = "ODM";
            TargetType = "ODM";
            Factory = "ODM";
            Txt_Type = "INODM";
        }
        //-----------------Procurement PU SPU PC ----------------
        else if (_Type == "INPU")
        {
            ArryLoop = ArryProPU;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INPU";

        }
        else if (_Type == "INPC")
        {
            ArryLoop = ArryProPC;
            txtCostCenter = ArryLoop[0];
            Txt_Type = "INPC";


        }
        else if (_Type == "INSPU")
        {
            ArryLoop = ArryProSPU;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INSPU";

        }

        //------------Production Control and SCM IM PN PS DS SP
        else if (_Type == "INIM")
        {
            ArryLoop = ArryIM;
            txtCostCenter = ArryLoop[0];
            Txt_Type = "INIM";
        }
        else if (_Type == "INPS")
        {
            ArryLoop = ArryPS;
            txtCostCenter = ArryLoop[0];
            Txt_Type = "INPS";
        }
        else if (_Type == "INDC")
        {
            ArryLoop = ArryDC;
            txtCostCenter = ArryLoop[0];
            Txt_Type = "INDC";

        }
        else if (_Type == "INPN")
        {
            ArryLoop = ArryPN;
            txtCostCenter = ArryLoop[0];
            Txt_Type = "INPN";

        }
        else if (_Type == "INWH")
        {
            ArryLoop = ArryWH;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INWH";

        }

              //------------------ ENGINEER-------------

        else if (_Type == "INENA")
        {
            ArryLoop = ArryENA;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INENA";

        }
        else if (_Type == "INENM")
        {
            ArryLoop = ArryENM;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INENM";

        }
        else if (_Type == "INENMOT")
        {
            ArryLoop = ArryENMOT;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INENMOT";
        }

        // All Maintenance
        if (_Type == "INMTALL" || _Type == "INMTALLPrev" || _Type == "INMTALLPrev2" || _Type == "INMTALLPrev3" ||
           _Type == "OTINMTALL" || _Type == "OTINMTALLPrev" || _Type == "OTINMTALLPrev2" || _Type == "OTINMTALLPrev3")
        {
            ArryLoop = ArryMT;

            txtCostCenter = ArryLoop[0] + " or COSTCENTER = " + ArryLoop[1];
            Txt_Type = "INMTALL";

        }
        else if (_Type == "INMTM" || _Type == "OTINMTM")
        {
            ArryLoop = ArryMTM;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INMTM";

        }
        else if (_Type == "INMTA" || _Type == "OTINMTA")
        {
            ArryLoop = ArryMTA;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INMTA";
        }
        else if (_Type == "INMTPM" || _Type == "OTINMTPM")
        {
            ArryLoop = ArryMTPM;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INMTPM";
        }
        else if (_Type == "INMTTPM" || _Type == "OTINMTTPM")
        {
            ArryLoop = ArryMTTPM;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INMTTPM";

        }

  //----------------------QCQAQS -- ----------------
        else if (_Type == "INQCQAQS" ||
            _Type == "OTINQCQAQS")
        {
            ArryLoop = ArryQCQAQS;

            txtCostCenter = ArryLoop[0] + " or COSTCENTER = " + ArryLoop[1] + " or COSTCENTER = " + ArryLoop[2];
            Txt_Type = "INQCQAQS";

        }
        else if (_Type == "INQC" ||
            _Type == "OTINQC")
        {
            ArryLoop = ArryQC;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INQC";

        }
        else if (_Type == "INQA" ||
       _Type == "OTINQA")
        {
            ArryLoop = ArryQA;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INQA";

        }
        else if (_Type == "INQS" ||
    _Type == "OTINQS")
        {
            ArryLoop = ArryQS;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INQS";

        }

       //--------------- Design and Development-----------------
        else if (_Type == "INDD" || _Type == "OTINDD")
        {
            ArryLoop = ArryDD;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INDD";

        }
        else if (_Type == "INCD" || _Type == "OTINCD")
        {
            ArryLoop = ArryCD;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INCD";

        }
        //--------------------- IT&EC-----------------

        else if (_Type == "INIT" || _Type == "OTINIT")
        {
            ArryLoop = ArryIT;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INIT";
        }
        else if (_Type == "INEC" || _Type == "OTINEC")
        {
            ArryLoop = ArryEC;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INEC";
        }
        else if (_Type == "INUT" || _Type == "OTINUT")
        {
            ArryLoop = ArryUT;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INUT";
        }
        else if (_Type == "INSGA" || _Type == "OTINSGA")
        {
            ArryLoop = ArrySGA;

            txtCostCenter = ArryLoop[0] + " or COSTCENTER = " + ArryLoop[1] + " or COSTCENTER = " + ArryLoop[2] +
                             ArryLoop[3] + " or COSTCENTER = " + ArryLoop[4] + " or COSTCENTER = " + ArryLoop[5] +
                              ArryLoop[6] + " or COSTCENTER = " + ArryLoop[7] + " or COSTCENTER = " + ArryLoop[8] +
                               ArryLoop[9] + " or COSTCENTER = " + ArryLoop[10] + " or COSTCENTER = " + ArryLoop[11];
            Txt_Type = "INSGA";
        }
        else if (_Type == "INHR" || _Type == "OTINHR")
        {
            ArryLoop = ArryHR;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INHR";
        }
        else if (_Type == "INAC" || _Type == "OTINAC")
        {
            ArryLoop = ArryAC;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INAC";
        }
        else if (_Type == "INGA" || _Type == "OTINGA")
        {
            ArryLoop = ArryGA;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INGA";
        }

        else if (_Type == "INCB" || _Type == "OTINCB")
        {
            ArryLoop = ArryCB;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INCB";
        }
        else if (_Type == "INTS" || _Type == "OTINTS")
        {
            ArryLoop = ArryTS;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INTS";
        }
        else if (_Type == "INAUDIT" || _Type == "OTINAUDIT")
        {
            ArryLoop = ArryAudit;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INAUDIT";
        }
        else if (_Type == "INHRD" || _Type == "OTINHRD")
        {
            ArryLoop = ArryHRD;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INHRD";
        }
        else if (_Type == "INHRD" || _Type == "OTINHRD")
        {
            ArryLoop = ArryHRD;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INHRD";
        }
        else if (_Type == "INSF" || _Type == "OTINSF")
        {
            ArryLoop = ArrySF;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INSF";
        }
        else if (_Type == "INLG" || _Type == "OTINLG")
        {
            ArryLoop = ArryLG;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INLG";
        }
        else if (_Type == "INTD" || _Type == "OTINTD")
        {
            ArryLoop = ArryTD;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INTD";
        }
        else if (_Type == "INSP" || _Type == "OTINSP")
        {
            ArryLoop = ArrySP;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INSP";
        }
        else if (_Type == "INCC" || _Type == "OTINCC")
        {
            ArryLoop = ArryCC;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INCC";
        }

        //-----


        sql.CommandText = "SELECT e.CODE, POSIT,COSTCENTER,WTYPE FROM [Employee] e " +
        " where RESIGN IS NULL and [COSTCENTER] = " + txtCostCenter + " ORDER BY COSTCENTER,e.POSIT";


        int ii = 0;
        DataTable dt = oConn.SqlGet(sql, "DBDCI");
        foreach (DataRow item in dt.Rows)
        {
            DataRow _rowEmp = dtEmp.NewRow();
            _rowEmp["Code"] = item["CODE"].ToString();
            _rowEmp["Position"] = item["POSIT"].ToString();
            _rowEmp["CostCenter"] = item["COSTCENTER"].ToString();
            _rowEmp["WTYPE"] = item["WTYPE"].ToString();
            dtEmp.Rows.Add(_rowEmp);
        }

        //  lbMP.Text = dtEmp.Rows.Count.ToString();
        //---------------- Get Employeee of Line --------------        

        //----------------- Create row content Manpower ------------------

        MMPInfo.MPAllChartInfo oItemMPP = new MMPInfo.MPAllChartInfo();

        int accuOP1 = 0, accuOP15 = 0, accuOP2 = 0, accuOP3 = 0, CountMPOP = 1, CountMPOP_D = 0, CountMPOP_N = 0, REQ_MPOP_D = 0, REQ_MPOP_N = 0;
        int accuLE1 = 0, accuLE15 = 0, accuLE2 = 0, accuLE3 = 0, CountMPLE = 1, CountMPLE_D = 0, CountMPLE_N = 0, REQ_MPLE_D = 0, REQ_MPLE_N = 0; ;
        int accuFO1 = 0, accuFO15 = 0, accuFO2 = 0, accuFO3 = 0, CountMPFO = 1, CountMPFO_D = 0, CountMPFO_N = 0, REQ_MPFO_D = 0, REQ_MPFO_N = 0;
        int accuSU1 = 0, accuSU15 = 0, accuSU2 = 0, accuSU3 = 0, CountMPSU = 1, CountMPSU_D = 0, CountMPSU_N = 0, REQ_MPSU_D = 0, REQ_MPSU_N = 0;
        int CountMPOTREQD = 1, CountMPOTREQN = 1, SumMPReqD = 1, SumMPReqN = 1, CountMPN = 1, CountMPH = 1, SumMP = 1;
        int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
        int SumFOLE_ACTD = 0, SumFOLE_ACTN = 0, SumLEOT_ReqD = 0, SumLEOT_ReqN = 0, SumLEOT_ActD = 0, SumLEOT_ActN = 0;

        double CostOverAllSum = 0;


        //---------------- Get Employeee of Line --------------
        DataTable dtMNOT = new DataTable();

        dtMNOT.Columns.Add("Fiscal_year", typeof(string));
        dtMNOT.Columns.Add("Monthly", typeof(string));
        dtMNOT.Columns.Add("Daily", typeof(string));
        dtMNOT.Columns.Add("ProductType", typeof(string));

        dtMNOT.Columns.Add("STD_MPDay", typeof(string));
        dtMNOT.Columns.Add("ACT_MPDay", typeof(string));
        dtMNOT.Columns.Add("STD_MPNight", typeof(string));
        dtMNOT.Columns.Add("ACT_MPNight", typeof(string));

        dtMNOT.Columns.Add("STD_OTDay", typeof(string));
        dtMNOT.Columns.Add("REQ_OTDay", typeof(string));
        dtMNOT.Columns.Add("ACT_OTDay", typeof(string));

        dtMNOT.Columns.Add("STD_OTNight", typeof(string));
        dtMNOT.Columns.Add("REQ_OTNight", typeof(string));
        dtMNOT.Columns.Add("ACT_OTNight", typeof(string));



        // DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sqlMNOT = new SqlCommand();


        sqlMNOT.CommandText = "SELECT Fiscal_year,Monthly,Daily,ProductType,STD_MPDay,ACT_MPDay" +
            " ,STD_MPNight,ACT_MPNight,STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight" +
           " FROM BC_MANPOWER where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + MonthSelect + "' and ProductType ='" + Txt_Type + "' " +
           " order by daily ";



        DataTable dtMOT = oConn.SqlGet(sqlMNOT, "DBBCS");

        if (dtMOT.Rows.Count > 0)
        {
            foreach (DataRow item in dtMOT.Rows)
            {
                DataRow _rowMNOT = dtMNOT.NewRow();
                _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                _rowMNOT["Monthly"] = item["Monthly"].ToString();
                _rowMNOT["Daily"] = item["Daily"].ToString();
                _rowMNOT["ProductType"] = item["ProductType"].ToString();
                _rowMNOT["STD_MPDay"] = item["STD_MPDay"].ToString();
                _rowMNOT["ACT_MPDay"] = item["ACT_MPDay"].ToString();
                _rowMNOT["STD_MPNight"] = item["STD_MPNight"].ToString();
                _rowMNOT["ACT_MPNight"] = item["ACT_MPNight"].ToString();
                _rowMNOT["STD_OTDay"] = item["STD_OTDay"].ToString();
                _rowMNOT["REQ_OTDay"] = item["REQ_OTDay"].ToString();
                _rowMNOT["ACT_OTDay"] = item["ACT_OTDay"].ToString();
                _rowMNOT["STD_OTNight"] = item["STD_OTNight"].ToString();
                _rowMNOT["REQ_OTNight"] = item["REQ_OTNight"].ToString();
                _rowMNOT["ACT_OTNight"] = item["ACT_OTNight"].ToString();

                dtMNOT.Rows.Add(_rowMNOT);
            }

        }


        //** Productivity End


      

        int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;
        int LECount_D = 0, LECount_N = 0, FOCount_D = 0, FOCount_N = 0; ;
        int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;
        string DatetoDay = "";

        if (dtMNOT.Rows.Count > 0)
        {
            if (MonthSelect == MonthPresent)

            //&& ((_Type == "INFAC1") || (_Type == "INFAC2") || (_Type == "INFAC3") || (_Type == "INMTALL") || (_Type == "OTINMTALL") || (_Type == "INQCQAQS") || (_Type == "OTINQCQAQS")
            //|| (_Type == "INECUT") || (_Type == "OTINECUT") || (_Type == "INQA") || (_Type == "OTINQA") || (_Type == "INQS") || (_Type == "OTINQS")))
            {

                //int idxMP = 0;
                //--------------- Get Employee working Time ---------------------
                DataTable dtempWorkingTime = new DataTable();

              
                //          string txtEndDate;
                //int SumOT1 = 0, OT1 = 0, OT15 = 0, OT2 = 0, OT3 = 0;
                int SUMMPD = 0, DOT1 = 0, DOT15 = 0, DOT2 = 0, DOT3 = 0, SDOT1 = 0, SDOT15 = 0, SDOT2 = 0, SDOT3 = 0;
                int SUMMPN = 0, HOT1 = 0, HOT15 = 0, HOT2 = 0, HOT3 = 0, SHOT1 = 0, SHOT15 = 0, SHOT2 = 0, SHOT3 = 0;
                int SUMMPH = 0, NOT1 = 0, NOT15 = 0, NOT2 = 0, NOT3 = 0, SNOT1 = 0, SNOT15 = 0, SNOT2 = 0, SNOT3 = 0;



                DataTable dtWorkTime = new DataTable();
                dtWorkTime.Columns.Add("Code", typeof(string));
                dtWorkTime.Columns.Add("WorkDate", typeof(string));
                dtWorkTime.Columns.Add("POSIT", typeof(string));
                dtWorkTime.Columns.Add("OT1", typeof(int));
                dtWorkTime.Columns.Add("OT15", typeof(int));
                dtWorkTime.Columns.Add("OT2", typeof(int));
                dtWorkTime.Columns.Add("OT3", typeof(int));
                dtWorkTime.Columns.Add("SUMOT", typeof(int));
                dtWorkTime.Columns.Add("REQDOT1", typeof(int));
                dtWorkTime.Columns.Add("REQDOT15", typeof(int));
                dtWorkTime.Columns.Add("REQDOT2", typeof(int));
                dtWorkTime.Columns.Add("REQDOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMDOTREQ", typeof(int));
                dtWorkTime.Columns.Add("SUMMPReqD", typeof(int));
                dtWorkTime.Columns.Add("DOT1", typeof(int));
                dtWorkTime.Columns.Add("DOT15", typeof(int));
                dtWorkTime.Columns.Add("DOT2", typeof(int));
                dtWorkTime.Columns.Add("DOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMDOT", typeof(int));
                dtWorkTime.Columns.Add("SUMMPD", typeof(int));

                dtWorkTime.Columns.Add("REQNOT1", typeof(int));
                dtWorkTime.Columns.Add("REQNOT15", typeof(int));
                dtWorkTime.Columns.Add("REQNOT2", typeof(int));
                dtWorkTime.Columns.Add("REQNOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMNOTREQ", typeof(int));
                dtWorkTime.Columns.Add("SUMMPReqN", typeof(int));
                dtWorkTime.Columns.Add("NOT1", typeof(int));
                dtWorkTime.Columns.Add("NOT15", typeof(int));
                dtWorkTime.Columns.Add("NOT2", typeof(int));
                dtWorkTime.Columns.Add("NOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMNOT", typeof(int));
                dtWorkTime.Columns.Add("SUMMPN", typeof(int));

                dtWorkTime.Columns.Add("REQHOT1", typeof(int));
                dtWorkTime.Columns.Add("REQHOT15", typeof(int));
                dtWorkTime.Columns.Add("REQHOT2", typeof(int));
                dtWorkTime.Columns.Add("REQHOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMHOTREQ", typeof(int));
                dtWorkTime.Columns.Add("SUMMPReqH", typeof(int));
                dtWorkTime.Columns.Add("HOT1", typeof(int));
                dtWorkTime.Columns.Add("HOT15", typeof(int));
                dtWorkTime.Columns.Add("HOT2", typeof(int));
                dtWorkTime.Columns.Add("HOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMHOT", typeof(int));
                dtWorkTime.Columns.Add("SUMMPH", typeof(int));


                //--------------- Get Employee working Time ---------------------
                //int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
                int FlagUdate = 0;
                //int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;

                int Xdate = 0;
                int Yester = 0;
                int SUMOT_REQD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
                int SUMOT_REQN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
                int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
                int SUMMP_SHIFT = 0, SUMACT_MP = 0;
                //int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;
                int FlagInsert = 1;


                for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                {
                    //------------------ Monthly Present Update --------------------//
                    if (i >= 2)
                    {
                        Yester = i - 1;
                        setyesterday = new DateTime(DateTime.Now.Year, setDate.Month, Yester);

                    }
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);




                  
                    if ((setDate >= EndYesterday) && (setDate <= dateEnd))
                    {
                        //if (setDate <= Endtoday)
                        //{
                        FlagUdate = 1;

                        //----------------- Fillter Working Time -------------
                        bool Working = false;
                     

                        sql.CommandText = "SELECT e.Posit,WorkShift,WorkType,otr.OTFROM ,[WCode],[WDate],[WTime],[WDoor],es.[WType],LTRIM(DATEDIFF(MINUTE, 0, otr.OT1)) as OT1,LTRIM(DATEDIFF(MINUTE, 0, otr.OT15)) as OT15 " +
          ",LTRIM(DATEDIFF(MINUTE, 0, otr.OT2)) as OT2,LTRIM(DATEDIFF(MINUTE, 0, otr.OT3)) as OT3 " +
          " FROM [dbDCI].[dbo].[EmployeeTimeStamp] es " +
          " LEFT JOIN [dbDCI].[dbo].[Employee] e ON es.WCode = e.CODE " +
          " LEFT JOIN [dbDCI].[dbo].[EmployeeWorkingTime] wt ON es.WCode = wt.Code " +
          " LEFT JOIN [dbDCI].[dbo].[EMP_OTRQ] otr ON es.WCode = otr.CODE AND es.WDate = otr.ODATE " +
          " WHERE WDate >= '" + setDate.ToString("yyyy-MM-dd") + "' AND WDate <= '" + setDate.ToString("yyyy-MM-dd") + "' AND es.WType = 'O' " +
          " And OTFROM != ''" +
          "	AND CONVERT(DATE, wt.SystemOUT) = WDate " +
          " and (CostCenter = " + txtCostCenter + " )" +
                            // " And  ( " + txtAndon + "')" +
          " order by WDate  desc";


                        DataTable dtt = oConn.SqlGet(sql, "DBDCI");
                        if (dtt.Rows.Count > 0)
                        {

                            //DataRow _row = dtWorkTime.NewRow();
                            //foreach (DataRow item in dtt.Rows)
                            //{

                            //    _row["Code"] = item["WCode"].ToString();
                            //    _row["WorkDate"] = Convert.ToDateTime(item["WDate"].ToString()).ToString("yyyy-MM-dd");
                            //    _row["POSIT"] = item["Posit"].ToString();


                            //    //-------------------- ActWork, OT REQ,ACT LE-FO -----------------------                                    
                            //    //if ((item["Posit"].ToString() == "LE") || (item["Posit"].ToString() == "FO"))
                            //    //{

                            //    if (item["WorkShift"].ToString() == "D")
                            //    {

                            //        if ((item["OTFROM"].ToString() != "06:05") && (item["OTFROM"].ToString() != "20:00"))
                            //        {

                            //            SumOT_ReqD += 1;

                            //            if (item["OT1"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                            //                {
                            //                    REQDOT1 += Convert.ToInt16(item["OT1"]);
                            //                    SREQDOT1 += 1;
                            //                }
                            //            }
                            //            if (item["OT15"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                            //                {
                            //                    REQDOT15 += Convert.ToInt16(item["OT15"]);
                            //                    SREQDOT15 += 1;
                            //                }
                            //            }
                            //            if (item["OT2"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                            //                {
                            //                    REQDOT2 += Convert.ToInt16(item["OT2"]);
                            //                    SREQDOT2 += 1;
                            //                }
                            //            }
                            //            if (item["OT3"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                            //                {
                            //                    REQDOT3 += Convert.ToInt16(item["OT3"]);
                            //                    SREQDOT3 += 1;
                            //                }
                            //            }

                            //            if (SREQDOT1 != 0 || SREQDOT15 != 0 || SREQDOT2 != 0 || SREQDOT3 != 0)
                            //            {
                            //                SUMOT_ACTD += 1;
                            //                SREQDOT1 = 0;
                            //                SREQDOT15 = 0;
                            //                SREQDOT2 = 0;
                            //                SREQDOT3 = 0;
                            //            }
                            //        }
                            //        else
                            //        {
                            //            SUMOT_REQD += 1;

                            //            if (item["OT1"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                            //                {
                            //                    DOT1 += Convert.ToInt16(item["OT1"]);
                            //                    SDOT1 += 1;
                            //                }
                            //            }
                            //            if (item["OT15"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                            //                {
                            //                    DOT15 += Convert.ToInt16(item["OT15"]);
                            //                    SDOT15 += 1;
                            //                }
                            //            }
                            //            if (item["OT2"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                            //                {
                            //                    DOT2 += Convert.ToInt16(item["OT2"]);
                            //                    SDOT2 += 1;
                            //                }
                            //            }
                            //            if (item["OT3"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                            //                {
                            //                    DOT3 += Convert.ToInt16(item["OT3"]);
                            //                    SDOT3 += 1;
                            //                }
                            //            }

                            //            if (SDOT1 != 0 || SDOT15 != 0 || SDOT2 != 0 || SDOT3 != 0)
                            //            {
                            //                SUMMPD += 1;
                            //                SDOT1 = 0;
                            //                SDOT15 = 0;
                            //                SDOT2 = 0;
                            //                SDOT3 = 0;
                            //            }

                            //        }

                            //    }
                            //    else if (item["WorkShift"].ToString() == "N")
                            //    {
                            //        if ((item["OTFROM"].ToString() == "06:05") || (item["OTFROM"].ToString() == "20:00"))
                            //        {
                            //            SUMOT_REQN += 1;
                            //            if (item["OT1"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                            //                {
                            //                    REQNOT1 += Convert.ToInt16(item["OT1"]);
                            //                    SREQNOT1 += 1;
                            //                }
                            //            }
                            //            if (item["OT15"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                            //                {
                            //                    REQNOT15 += Convert.ToInt16(item["OT15"]);
                            //                    SREQNOT15 += 1;
                            //                }
                            //            }
                            //            if (item["OT2"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                            //                {
                            //                    REQNOT2 += Convert.ToInt16(item["OT2"]);
                            //                    SREQNOT2 += 1;
                            //                }
                            //            }
                            //            if (item["OT3"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                            //                {
                            //                    REQNOT3 += Convert.ToInt16(item["OT3"]);
                            //                    SREQNOT3 += 1;
                            //                }
                            //            }
                            //            if (SREQNOT1 != 0 || SREQNOT15 != 0 || SREQNOT2 != 0 || SREQNOT3 != 0)
                            //            {
                            //                SUMOT_ACTN += 1;
                            //                SREQNOT1 = 0;
                            //                SREQNOT15 = 0;
                            //                SREQNOT2 = 0;
                            //                SREQNOT3 = 0;
                            //            }
                            //        }
                            //        else
                            //        {

                            //            SUMOT_REQN += 1;
                            //            if (item["OT1"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                            //                {
                            //                    NOT1 += Convert.ToInt16(item["OT1"]);
                            //                    SNOT1 += 1;
                            //                }
                            //            }
                            //            if (item["OT15"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                            //                {
                            //                    NOT15 += Convert.ToInt16(item["OT15"]);
                            //                    SNOT15 += 1;
                            //                }
                            //            }
                            //            if (item["OT2"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                            //                {
                            //                    NOT2 += Convert.ToInt16(item["OT2"]);
                            //                    SNOT2 += 1;
                            //                }
                            //            }
                            //            if (item["OT3"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                            //                {
                            //                    NOT3 += Convert.ToInt16(item["OT3"]);
                            //                    SNOT3 += 1;
                            //                }
                            //            }
                            //            if (SNOT1 != 0 || SNOT15 != 0 || SNOT2 != 0 || SNOT3 != 0)
                            //            {
                            //                SUMMPN += 1;
                            //                SNOT1 = 0;
                            //                SNOT15 = 0;
                            //                SNOT2 = 0;
                            //                SNOT3 = 0;
                            //            }
                            //        }
                            //    }
                            //    else if (item["WorkType"].ToString() == "H")
                            //    {
                            //        if (item["OT1"].ToString() != "")
                            //        {
                            //            if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                            //            {
                            //                HOT1 += Convert.ToInt16(item["OT1"]);
                            //                SHOT1 += 1;
                            //            }
                            //        }
                            //        if (item["OT15"].ToString() != "")
                            //        {
                            //            if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                            //            {
                            //                HOT15 += Convert.ToInt16(item["OT15"]);
                            //                SHOT15 += 1;
                            //            }
                            //        }
                            //        if (item["OT2"].ToString() != "")
                            //        {
                            //            if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                            //            {
                            //                HOT2 += Convert.ToInt16(item["OT2"]);
                            //                SHOT2 += 1;
                            //            }
                            //        }
                            //        if (item["OT3"].ToString() != "")
                            //        {
                            //            if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                            //            {
                            //                HOT3 += Convert.ToInt16(item["OT3"]);
                            //                SHOT3 += 1;
                            //            }
                            //        }
                            //        if (SHOT1 != 0 || SHOT15 != 0 || SHOT2 != 0 || SHOT3 != 0)
                            //        {
                            //            SUMMPH += 1;
                            //            SHOT1 = 0;
                            //            SHOT15 = 0;
                            //            SHOT2 = 0;
                            //            SHOT3 = 0;
                            //        }
                            //    }


                            //    // Get ManPower FOLE

                            //    string dataShift = "";
                            //    DataTable dtEMCL = new DataTable();
                            //    string StrEMCL = "SELECT YM, CODE, STSS, STSO " +
                            //        " FROM EMP_EMCL " +
                            //        " WHERE YM =@YM AND CODE=@CODE ";
                            //    SqlCommand cmdEMCL = new SqlCommand();
                            //    cmdEMCL.CommandText = StrEMCL;
                            //    cmdEMCL.Parameters.Add(new SqlParameter("YM", DateTime.Now.ToString("yyyyMM")));
                            //    cmdEMCL.Parameters.Add(new SqlParameter("CODE", item["WCode"].ToString()));
                            //    cmdEMCL.CommandTimeout = 180;
                            //    dtEMCL = oConDCI.Query(cmdEMCL);

                            //    if (dtEMCL.Rows.Count > 0)
                            //    {
                            //        if (DateTime.Now.Day < 5)
                            //        {
                            //            for (int k = DateTime.Now.Day; k <= 27; k++)
                            //            {
                            //                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(k - 1, 1);
                            //                if (dataShift == "T" || dataShift == "H")
                            //                { }
                            //                else { break; }
                            //            }
                            //        }
                            //        else if (DateTime.Now.Day > 20)
                            //        {
                            //            for (int k = DateTime.Now.Day; k >= 5; k--)
                            //            {
                            //                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(k - 1, 1);
                            //                if (dataShift == "T" || dataShift == "H")
                            //                { }
                            //                else { break; }
                            //            }
                            //        }
                            //        else
                            //        {
                            //            for (int k = DateTime.Now.Day; k <= 27; k++)
                            //            {
                            //                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(k - 1, 1);
                            //                if (dataShift == "T" || dataShift == "H")
                            //                { }
                            //                else { break; }
                            //            }
                            //        }
                            //    }//end if emcl data



                            //    if (dataShift == "D")
                            //    {
                            //        MPFOLE_D++;
                            //    }
                            //    else if (dataShift == "N")
                            //    {
                            //        MPFOLE_N++;
                            //    }

                            //    MPFOLE_ALL = MPFOLE_D + MPFOLE_N;


                            //    //  SumMP_ACTD += MPFOLE_D;


                            //    // SumMP_ACTN += MPFOLE_N;


                            //    //SumOT_ReqD += SUMOT_REQD;


                            //    //SumOT_ReqN += SUMOT_REQN;


                            //    //SumOT_ActD += SUMOT_ACTD;


                            //    //SumOT_ActN += SUMOT_ACTN;



                            //}  //-----  CHECK UPDATE 2 DAYS

                            //try
                            //{
                            //    MPFOLE_ALL = MPFOLE_D + MPFOLE_N;
                            //}
                            //catch { }

                        }

                      
                        DataTable MPData = GetManPowerByLine_INDirectSupport(txtCostCenter);
                        MPCount_D += Convert.ToInt16(MPData.Rows[0]["MP_D"]);
                        MPCount_N += Convert.ToInt16(MPData.Rows[0]["MP_N"]);


                        //------Actual Work by Line Day,Night
                        SumFOLE_ACTD += GetWorkActByLineDayFOLE_INDirectSupport(txtCostCenter, setDate);
                        SumFOLE_ACTN += GetWorkActByLineNightFOLE_INDirectSupport(txtCostCenter, setDate);

                        //-------OT Req, Actual Day,Night

                        SumOT_ReqD += GetOTReqByLineDayFOLE_INDirectSupport(txtCostCenter, setDate);
                        SumOT_ReqN += GetOTReqByLineNightFOLE_INDirectSupport(txtCostCenter, setDate);
                        SumOT_ActD += GetOTActByLineDayFOLE_INDirectSupport(txtCostCenter, setDate);
                        SumOT_ActN += GetOTActByLineNightFOLE_INDirectSupport(txtCostCenter, setDate);

                        SqlCommand sqlCheck = new SqlCommand();
                        sqlCheck.CommandText = "SELECT * FROM BC_ManPower WHERE ProductType = " +
                       " '" + Txt_Type + "' and Fiscal_year = '" + _Year + "'" +
                           " and Monthly = '" + _Month + "' and Daily ='" + i + "'";
                        DataTable dtCheck = oConBCS.Query(sqlCheck);
                        if (dtCheck.Rows.Count > 0)
                        {

                            FlagInsert = 1;

                        }
                        else
                        {
                            FlagInsert = 0;

                        }
                      

                    }
                    else
                    {
                       
                        DataTable MPData = GetManPowerByLine_INDirectSupport(txtCostCenter);
                        MPCount_D += Convert.ToInt16(MPData.Rows[0]["MP_D"]);
                        MPCount_N += Convert.ToInt16(MPData.Rows[0]["MP_N"]);


                        //------Actual Work by Line Day,Night
                        SumFOLE_ACTD += GetWorkActByLineDayFOLE_INDirectSupport(txtCostCenter, setDate);
                        SumFOLE_ACTN += GetWorkActByLineNightFOLE_INDirectSupport(txtCostCenter, setDate);

                        //-------OT Req, Actual Day,Night

                        SumOT_ReqD += GetOTReqByLineDayFOLE_INDirectSupport(txtCostCenter, setDate);
                        SumOT_ReqN += GetOTReqByLineNightFOLE_INDirectSupport(txtCostCenter, setDate);
                        SumOT_ActD += GetOTActByLineDayFOLE_INDirectSupport(txtCostCenter, setDate);
                        SumOT_ActN += GetOTActByLineNightFOLE_INDirectSupport(txtCostCenter, setDate);

                        SqlCommand sqlCheck = new SqlCommand();
                        sqlCheck.CommandText = "SELECT * FROM BC_ManPower WHERE ProductType = " +
                       " '" + Txt_Type + "' and Fiscal_year = '" + _Year + "'" +
                           " and Monthly = '" +_Month + "' and Daily ='" + i + "'";
                        DataTable dtCheck = oConBCS.Query(sqlCheck);
                        if (dtCheck.Rows.Count > 0)
                        {

                            FlagInsert = 1;

                        }
                        else
                        {
                            FlagInsert = 0;

                        }
                     

                    }

                    if ((setDate <= dateEnd) && (_Type == "INPU" ||
           _Type == "INSPU" ||
           _Type == "INPC" ||
              _Type == "INSP" ||

                 //----------------------QCQAQS -- ----------------
           _Type == "INQC" ||
           _Type == "INQS" ||


           //------------Production Control and SCM IM PN PS DS SP
           _Type == "INIM" ||

           _Type == "INDC" ||
           _Type == "INPN" ||
            _Type == "INWH" ||

             //------------------ ENGINEER-------------
           _Type == "INENA" ||
           _Type == "INENM" ||
           _Type == "INENMOT" ||

              //--------------- Design and Development-----------------
           _Type == "INDD" ||
           _Type == "INCD" ||

            //----------------------------------------------------//
                        //                     S.G.A GROUP                    //
                        //---------------------------------------------------//
                        //----------------------- IT-----------------
           _Type == "INIT" ||
                        //--------------------- IT&EC-----------------
           _Type == "INUT" ||
            _Type == "INEC" ||


             //-------------------ADMINISTRATION---------------

           _Type == "INSGA" ||
           _Type == "INHR" ||
           _Type == "INAC" ||
           _Type == "INCC" ||
           _Type == "INCB" ||
           _Type == "INGA" ||
           _Type == "INTS" ||
           _Type == "INAUDIT" ||
           _Type == "INHRD" ||
           _Type == "INSF" ||
           _Type == "INLG" ||
           _Type == "INDCC" ||
           _Type == "INTD" ||


           _Type == "INMTALL" ||
            _Type == "INMTM" ||
            _Type == "INMTA" ||
            _Type == "INMTPM" ||
            _Type == "INMTTPM"))
                    {

                        //*****  Data for MP, OT Req and Actual                  
                        MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                        //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                        DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);

                        // ** Man Power Attandance
                        mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                        mManPower.Xdate = i;

                      
                        mManPower.SumMPD = MPCount_D;
                        mManPower.SumMPN = MPCount_N;

                        SumMP_ACTD += SumFOLE_ACTD;
                        SumMP_ACTN += SumFOLE_ACTN;

                        mManPower.SumMP_ACTD = SumMP_ACTD;
                        mManPower.SumMP_ACTN = SumMP_ACTN;

                        if (SumMP_ACTD != 0)
                        {
                            mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                        }
                        else
                        {
                            mManPower.SumMP_DIFFD = 0;

                        }

                        if (SumMP_ACTN != 0)
                        {

                            mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                        }
                        else
                        {

                            mManPower.SumMP_DIFFN = 0;
                        }



                        // ** OT Req,ACT

                        mManPower.SumOT_ReqD = SumOT_ReqD;
                        mManPower.SumOT_ReqN = SumOT_ReqN;
                        mManPower.SumOT_ActD = SumOT_ActD;
                        mManPower.SumOT_ActN = SumOT_ActN;

                        oListMP.Add(mManPower);

                        if ((FlagInsert == 1) && (setDate >= EndYesterday) && (setDate <= dateEnd) && (_Type == "INPU" ||
               _Type == "INSPU" ||
               _Type == "INPC" ||
                  _Type == "INSP" ||

                     //----------------------QCQAQS -- ----------------
               _Type == "INQC" ||
               _Type == "INQS" ||


               //------------Production Control and SCM IM PN PS DS SP
               _Type == "INIM" ||

               _Type == "INDC" ||
               _Type == "INPN" ||
                _Type == "INWH" ||

                 //------------------ ENGINEER-------------
               _Type == "INENA" ||
               _Type == "INENM" ||
               _Type == "INENMOT" ||

                  //--------------- Design and Development-----------------
               _Type == "INDD" ||
               _Type == "INCD" ||

                //----------------------------------------------------//
                            //                     S.G.A GROUP                    //
                            //---------------------------------------------------//
                            //----------------------- IT-----------------
               _Type == "INIT" ||
                            //--------------------- IT&EC-----------------
               _Type == "INUT" ||
                _Type == "INEC" ||


                 //-------------------ADMINISTRATION---------------

               _Type == "INSGA" ||
               _Type == "INHR" ||
               _Type == "INAC" ||
               _Type == "INCC" ||
               _Type == "INCB" ||
               _Type == "INGA" ||
               _Type == "INTS" ||
               _Type == "INAUDIT" ||
               _Type == "INHRD" ||
               _Type == "INSF" ||
               _Type == "INLG" ||
               _Type == "INDCC" ||
               _Type == "INTD" ||


               _Type == "INMTALL" ||
                _Type == "INMTM" ||
                _Type == "INMTA" ||
                _Type == "INMTPM" ||
                _Type == "INMTTPM"))
                        {

                            SqlCommand UpdateMNOT = new SqlCommand();
                            UpdateMNOT.CommandText = "Update  BC_MANPOWER  " +
                                    " set STD_MPDay ='" + MPCount_D + "',ACT_MPDay ='" + SumMP_ACTD + "' " +
                                    ",STD_MPNight ='" + MPCount_N + "',ACT_MPNight ='" + SumMP_ACTN + "' " +
                                    ",STD_OTDay ='" + MPCount_D + "',REQ_OTDay ='" + SumOT_ReqD + "',ACT_OTDay = '" + SumOT_ActD + "'" +
                                    ",STD_OTNight ='" + MPCount_N + "',REQ_OTNight ='" + SumOT_ReqN + "',ACT_OTNight = '" + SumOT_ActN + "'" +
                                    "where  Fiscal_year ='" + _Year + "' and Monthly ='" + _Month + "' and Daily ='" + i + "' and ProductType ='" + Txt_Type + "'";

                            oConn.SqlExecute(UpdateMNOT, "DBBCS");
                        }
                        else if ((FlagInsert == 0) && (_Type == "INPU" ||
               _Type == "INSPU" ||
               _Type == "INPC" ||
                  _Type == "INSP" ||

                     //----------------------QCQAQS -- ----------------
               _Type == "INQC" ||
               _Type == "INQS" ||


               //------------Production Control and SCM IM PN PS DS SP
               _Type == "INIM" ||

               _Type == "INDC" ||
               _Type == "INPN" ||
                _Type == "INWH" ||

                 //------------------ ENGINEER-------------
               _Type == "INENA" ||
               _Type == "INENM" ||
               _Type == "INENMOT" ||

                  //--------------- Design and Development-----------------
               _Type == "INDD" ||
               _Type == "INCD" ||

                //----------------------------------------------------//
                            //                     S.G.A GROUP                    //
                            //---------------------------------------------------//
                            //----------------------- IT-----------------
               _Type == "INIT" ||
                            //--------------------- IT&EC-----------------
               _Type == "INUT" ||
                _Type == "INEC" ||


                 //-------------------ADMINISTRATION---------------

               _Type == "INSGA" ||
               _Type == "INHR" ||
               _Type == "INAC" ||
               _Type == "INCC" ||
               _Type == "INCB" ||
               _Type == "INGA" ||
               _Type == "INTS" ||
               _Type == "INAUDIT" ||
               _Type == "INHRD" ||
               _Type == "INSF" ||
               _Type == "INLG" ||
               _Type == "INDCC" ||
               _Type == "INTD" ||


               _Type == "INMTALL" ||
                _Type == "INMTM" ||
                _Type == "INMTA" ||
                _Type == "INMTPM" ||
                _Type == "INMTTPM"))
                        {

                            SqlCommand InsertMNOT = new SqlCommand();

                            InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                                ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                                ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                                " VALUES ('" + _Year + "','" + _Month + "','" + i + "','" + Txt_Type + "' " +
                                ",'" + MPCount_D + "','" + SumMP_ACTD + "' " +
                                ",'" + MPCount_N + "','" + SumMP_ACTN + "' " +
                                ",'" + MPCount_D + "','" + SumOT_ReqD + "','" + SumOT_ActD + "' " +
                                ",'" + MPCount_N + "','" + SumOT_ReqN + "','" + SumOT_ActN + "')";
                            //}           



                            oConn.SqlExecute(InsertMNOT, "DBBCS");


                        }
                    }
                    else if ((setDate > dateEnd) && (_Type == "INPU" ||
         _Type == "INSPU" ||
         _Type == "INPC" ||
            _Type == "INSP" ||

               //----------------------QCQAQS -- ----------------
         _Type == "INQC" ||
         _Type == "INQS" ||


         //------------Production Control and SCM IM PN PS DS SP
         _Type == "INIM" ||

         _Type == "INDC" ||
         _Type == "INPN" ||
          _Type == "INWH" ||

           //------------------ ENGINEER-------------
         _Type == "INENA" ||
         _Type == "INENM" ||
         _Type == "INENMOT" ||

            //--------------- Design and Development-----------------
         _Type == "INDD" ||
         _Type == "INCD" ||

          //----------------------------------------------------//
                        //                     S.G.A GROUP                    //
                        //---------------------------------------------------//
                        //----------------------- IT-----------------
         _Type == "INIT" ||
                        //--------------------- IT&EC-----------------
         _Type == "INUT" ||
          _Type == "INEC" ||


           //-------------------ADMINISTRATION---------------

         _Type == "INSGA" ||
         _Type == "INHR" ||
         _Type == "INAC" ||
         _Type == "INCC" ||
         _Type == "INCB" ||
         _Type == "INGA" ||
         _Type == "INTS" ||
         _Type == "INAUDIT" ||
         _Type == "INHRD" ||
         _Type == "INSF" ||
         _Type == "INLG" ||
         _Type == "INDCC" ||
         _Type == "INTD" ||


         _Type == "INMTALL" ||
          _Type == "INMTM" ||
          _Type == "INMTA" ||
          _Type == "INMTPM" ||
          _Type == "INMTTPM"))
                    {
                        //*****  Data for MP, OT Req and Actual                  
                        MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                        //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                        DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);


                        // ** Man Power Attandance
                        mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                        mManPower.Xdate = i;

                        mManPower.SumMPD = 0;
                        mManPower.SumMPN = 0;

                        SumMP_ACTD += 0;
                        SumMP_ACTN += 0;

                        mManPower.SumMP_ACTD = 0;
                        mManPower.SumMP_ACTN = 0;
                        mManPower.SumMP_DIFFD = 0;
                        mManPower.SumMP_DIFFN = 0;
                        mManPower.SumOT_ReqD = 0;
                        mManPower.SumOT_ReqN = 0;
                        mManPower.SumOT_ActD = 0;
                        mManPower.SumOT_ActN = 0;

                        oListMP.Add(mManPower);
                    }

                    MPCount_D = 0;
                    MPCount_N = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;

                    SumMP_ACTN = 0;
                    SumOT_ReqD = 0;
                    SumOT_ReqN = 0;
                    SumOT_ActD = 0;
                    SumOT_ActN = 0;
                    MPFOLE_ALL = 0;

                    SumMP_ACTN = 0;
                    SumOT_ActD = 0;
                    SumOT_ActN = 0;
                    SUMMPD = 0;
                    SUMMPN = 0;
                    SUMOT_REQN = 0;
                    SUMOT_REQD = 0;
                    SUMOT_ACTD = 0;
                    SUMOT_ACTN = 0;
                    MPFOLE_D = 0;
                    MPFOLE_N = 0;
                    LECount_D = 0;
                    LECount_N = 0;
                    FOCount_D = 0;
                    FOCount_N = 0;
                    SumFOLE_ACTD = 0;
                    SumFOLE_ACTN = 0;
                    FlagInsert = 1;


                }
            }
            else
            {

                //------------------Not have data for  OT Req --------------------//

                int Xdate = 0;
                int Yester = 0;
                int SUMOT_REQD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
                int SUMOT_REQN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
                int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
                int SUMMP_SHIFT = 0, SUMACT_MP = 0;
                //int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;

                for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                {


                    foreach (DataRow item in dtMNOT.Rows)
                    {

                        if (i == Convert.ToInt16(item["Daily"].ToString()))
                        {
                            // ** Man Power Attandance
                            DatetoDay = i + ":" + setDate.DayOfWeek.ToString().Substring(0, 3);
                            Xdate = i;

                            //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                            //  mManPower.SumMP_STD = SUMACT_MP;
                            MPCount_D = Convert.ToInt16(item["STD_MPDay"].ToString());
                            MPCount_N = Convert.ToInt16(item["STD_MPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());
                            //SumMP_DIFFD = MPCount_D - SumMP_ACTD;
                            //SumMP_DIFFN = MPCount_N - SumMP_ACTN;


                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["REQ_OTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["REQ_OTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["ACT_OTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["ACT_OTNight"].ToString());
                        }
                    }





                    //*****  Data for MP, OT Req and Actual                  
                    MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                    // ** Man Power Attandance
                    mManPower.DatetoDay = DatetoDay;
                    mManPower.Xdate = Xdate;
                    mManPower.SumMPD = MPCount_D;
                    mManPower.SumMPN = MPCount_N;

                    mManPower.SumMP_ACTD = SumMP_ACTD;
                    mManPower.SumMP_ACTN = SumMP_ACTN;

                    if (SumMP_ACTD != 0)
                    {
                        mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                    }
                    else
                    {
                        mManPower.SumMP_DIFFD = 0;

                    }

                    if (SumMP_ACTN != 0)
                    {

                        mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                    }
                    else
                    {

                        mManPower.SumMP_DIFFN = 0;
                    }



                    // ** OT Req,ACT

               
                    mManPower.SumOT_ReqD = SumOT_ReqD;
                    mManPower.SumOT_ReqN = SumOT_ReqN;
                    mManPower.SumOT_ActD = SumOT_ActD;
                    mManPower.SumOT_ActN = SumOT_ActN;


                    oListMP.Add(mManPower);

                }

            }

        }
        else
        {

            //------------------ Man-Power Daily for New Record or Erase Record to Insert---------------//

            int idxMP = 0;
            //--------------- Get Employee working Time ---------------------
            DataTable dtempWorkingTime = new DataTable();

           
            int SUMMPD = 0, DOT1 = 0, DOT15 = 0, DOT2 = 0, DOT3 = 0, SDOT1 = 0, SDOT15 = 0, SDOT2 = 0, SDOT3 = 0;
            int SUMMPN = 0, HOT1 = 0, HOT15 = 0, HOT2 = 0, HOT3 = 0, SHOT1 = 0, SHOT15 = 0, SHOT2 = 0, SHOT3 = 0;
            int SUMMPH = 0, NOT1 = 0, NOT15 = 0, NOT2 = 0, NOT3 = 0, SNOT1 = 0, SNOT15 = 0, SNOT2 = 0, SNOT3 = 0;



            DataTable dtWorkTime = new DataTable();
            dtWorkTime.Columns.Add("Code", typeof(string));
            dtWorkTime.Columns.Add("WorkDate", typeof(string));
            dtWorkTime.Columns.Add("POSIT", typeof(string));
            dtWorkTime.Columns.Add("OT1", typeof(int));
            dtWorkTime.Columns.Add("OT15", typeof(int));
            dtWorkTime.Columns.Add("OT2", typeof(int));
            dtWorkTime.Columns.Add("OT3", typeof(int));
            dtWorkTime.Columns.Add("SUMOT", typeof(int));
            dtWorkTime.Columns.Add("REQDOT1", typeof(int));
            dtWorkTime.Columns.Add("REQDOT15", typeof(int));
            dtWorkTime.Columns.Add("REQDOT2", typeof(int));
            dtWorkTime.Columns.Add("REQDOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMDOTREQ", typeof(int));
            dtWorkTime.Columns.Add("SUMMPReqD", typeof(int));
            dtWorkTime.Columns.Add("DOT1", typeof(int));
            dtWorkTime.Columns.Add("DOT15", typeof(int));
            dtWorkTime.Columns.Add("DOT2", typeof(int));
            dtWorkTime.Columns.Add("DOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMDOT", typeof(int));
            dtWorkTime.Columns.Add("SUMMPD", typeof(int));

            dtWorkTime.Columns.Add("REQNOT1", typeof(int));
            dtWorkTime.Columns.Add("REQNOT15", typeof(int));
            dtWorkTime.Columns.Add("REQNOT2", typeof(int));
            dtWorkTime.Columns.Add("REQNOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMNOTREQ", typeof(int));
            dtWorkTime.Columns.Add("SUMMPReqN", typeof(int));
            dtWorkTime.Columns.Add("NOT1", typeof(int));
            dtWorkTime.Columns.Add("NOT15", typeof(int));
            dtWorkTime.Columns.Add("NOT2", typeof(int));
            dtWorkTime.Columns.Add("NOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMNOT", typeof(int));
            dtWorkTime.Columns.Add("SUMMPN", typeof(int));

            dtWorkTime.Columns.Add("REQHOT1", typeof(int));
            dtWorkTime.Columns.Add("REQHOT15", typeof(int));
            dtWorkTime.Columns.Add("REQHOT2", typeof(int));
            dtWorkTime.Columns.Add("REQHOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMHOTREQ", typeof(int));
            dtWorkTime.Columns.Add("SUMMPReqH", typeof(int));
            dtWorkTime.Columns.Add("HOT1", typeof(int));
            dtWorkTime.Columns.Add("HOT15", typeof(int));
            dtWorkTime.Columns.Add("HOT2", typeof(int));
            dtWorkTime.Columns.Add("HOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMHOT", typeof(int));
            dtWorkTime.Columns.Add("SUMMPH", typeof(int));


            //--------------- Get Employee working Time ---------------------
            //int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
            int FlagUdate = 0;
            //int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;
            //string DatetoDay = "";
            int Xdate = 0;
            int Yester = 0;
            int SUMOT_REQD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
            int SUMOT_REQN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
            int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
            int SUMMP_SHIFT = 0, SUMACT_MP = 0;
            //int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;

            for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
            {

                if (i >= 2)
                {
                    Yester = i - 1;
                    setyesterday = new DateTime(DateTime.Now.Year, setDate.Month, Yester);

                }
                setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);


                //----------------- Fillter Working Time -------------
                bool Working = false;
               

                sql.CommandText = "SELECT e.Posit,WorkShift,WorkType,otr.OTFROM ,[WCode],[WDate],[WTime],[WDoor],es.[WType],LTRIM(DATEDIFF(MINUTE, 0, otr.OT1)) as OT1,LTRIM(DATEDIFF(MINUTE, 0, otr.OT15)) as OT15 " +
  ",LTRIM(DATEDIFF(MINUTE, 0, otr.OT2)) as OT2,LTRIM(DATEDIFF(MINUTE, 0, otr.OT3)) as OT3 " +
  " FROM [dbDCI].[dbo].[EmployeeTimeStamp] es " +
  " LEFT JOIN [dbDCI].[dbo].[Employee] e ON es.WCode = e.CODE " +
  " LEFT JOIN [dbDCI].[dbo].[EmployeeWorkingTime] wt ON es.WCode = wt.Code " +
  " LEFT JOIN [dbDCI].[dbo].[EMP_OTRQ] otr ON es.WCode = otr.CODE AND es.WDate = otr.ODATE " +
  " WHERE WDate >= '" + setDate.ToString("yyyy-MM-dd") + "' AND WDate <= '" + setDate.ToString("yyyy-MM-dd") + "' AND es.WType = 'O' " +
  " And OTFROM != ''" +
  "	AND CONVERT(DATE, wt.SystemOUT) = WDate " +
" and (CostCenter =  " + txtCostCenter + " )" +
                    //   " And  ( " + txtAndon + "')" +
  " order by WDate  desc";


                DataTable dtt = oConn.SqlGet(sql, "DBDCI");
                if (dtt.Rows.Count > 0)
                {

                    //DataRow _row = dtWorkTime.NewRow();
                    //foreach (DataRow item in dtt.Rows)
                    //{

                    //    _row["Code"] = item["WCode"].ToString();
                    //    _row["WorkDate"] = Convert.ToDateTime(item["WDate"].ToString()).ToString("yyyy-MM-dd");
                    //    _row["POSIT"] = item["Posit"].ToString();


                    //    //-------------------- ActWork, OT REQ,ACT LE-FO -----------------------                                    
                    //    //if ((item["Posit"].ToString() == "LE") || (item["Posit"].ToString() == "FO"))
                    //    //{

                    //    if (item["WorkShift"].ToString() == "D")
                    //    {

                    //        if ((item["OTFROM"].ToString() != "06:05") && (item["OTFROM"].ToString() != "20:00"))
                    //        {

                    //            SUMOT_REQD += 1;

                    //            if (item["OT1"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                    //                {
                    //                    REQDOT1 += Convert.ToInt16(item["OT1"]);
                    //                    SREQDOT1 += 1;
                    //                }
                    //            }
                    //            if (item["OT15"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                    //                {
                    //                    REQDOT15 += Convert.ToInt16(item["OT15"]);
                    //                    SREQDOT15 += 1;
                    //                }
                    //            }
                    //            if (item["OT2"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                    //                {
                    //                    REQDOT2 += Convert.ToInt16(item["OT2"]);
                    //                    SREQDOT2 += 1;
                    //                }
                    //            }
                    //            if (item["OT3"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                    //                {
                    //                    REQDOT3 += Convert.ToInt16(item["OT3"]);
                    //                    SREQDOT3 += 1;
                    //                }
                    //            }

                    //            if (SREQDOT1 != 0 || SREQDOT15 != 0 || SREQDOT2 != 0 || SREQDOT3 != 0)
                    //            {
                    //                SUMOT_ACTD += 1;
                    //                SREQDOT1 = 0;
                    //                SREQDOT15 = 0;
                    //                SREQDOT2 = 0;
                    //                SREQDOT3 = 0;
                    //            }
                    //        }
                    //        else
                    //        {
                    //            SUMOT_REQD += 1;

                    //            if (item["OT1"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                    //                {
                    //                    DOT1 += Convert.ToInt16(item["OT1"]);
                    //                    SDOT1 += 1;
                    //                }
                    //            }
                    //            if (item["OT15"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                    //                {
                    //                    DOT15 += Convert.ToInt16(item["OT15"]);
                    //                    SDOT15 += 1;
                    //                }
                    //            }
                    //            if (item["OT2"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                    //                {
                    //                    DOT2 += Convert.ToInt16(item["OT2"]);
                    //                    SDOT2 += 1;
                    //                }
                    //            }
                    //            if (item["OT3"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                    //                {
                    //                    DOT3 += Convert.ToInt16(item["OT3"]);
                    //                    SDOT3 += 1;
                    //                }
                    //            }

                    //            if (SDOT1 != 0 || SDOT15 != 0 || SDOT2 != 0 || SDOT3 != 0)
                    //            {
                    //                SUMMPD += 1;
                    //                SDOT1 = 0;
                    //                SDOT15 = 0;
                    //                SDOT2 = 0;
                    //                SDOT3 = 0;
                    //            }

                    //        }

                    //    }
                    //    else if (item["WorkShift"].ToString() == "N")
                    //    {
                    //        if ((item["OTFROM"].ToString() == "06:05") || (item["OTFROM"].ToString() == "20:00"))
                    //        {
                    //            SUMOT_REQN += 1;
                    //            if (item["OT1"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                    //                {
                    //                    REQNOT1 += Convert.ToInt16(item["OT1"]);
                    //                    SREQNOT1 += 1;
                    //                }
                    //            }
                    //            if (item["OT15"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                    //                {
                    //                    REQNOT15 += Convert.ToInt16(item["OT15"]);
                    //                    SREQNOT15 += 1;
                    //                }
                    //            }
                    //            if (item["OT2"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                    //                {
                    //                    REQNOT2 += Convert.ToInt16(item["OT2"]);
                    //                    SREQNOT2 += 1;
                    //                }
                    //            }
                    //            if (item["OT3"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                    //                {
                    //                    REQNOT3 += Convert.ToInt16(item["OT3"]);
                    //                    SREQNOT3 += 1;
                    //                }
                    //            }
                    //            if (SREQNOT1 != 0 || SREQNOT15 != 0 || SREQNOT2 != 0 || SREQNOT3 != 0)
                    //            {
                    //                SUMOT_ACTN += 1;
                    //                SREQNOT1 = 0;
                    //                SREQNOT15 = 0;
                    //                SREQNOT2 = 0;
                    //                SREQNOT3 = 0;
                    //            }
                    //        }
                    //        else
                    //        {

                    //            SUMOT_REQN += 1;
                    //            if (item["OT1"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                    //                {
                    //                    NOT1 += Convert.ToInt16(item["OT1"]);
                    //                    SNOT1 += 1;
                    //                }
                    //            }
                    //            if (item["OT15"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                    //                {
                    //                    NOT15 += Convert.ToInt16(item["OT15"]);
                    //                    SNOT15 += 1;
                    //                }
                    //            }
                    //            if (item["OT2"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                    //                {
                    //                    NOT2 += Convert.ToInt16(item["OT2"]);
                    //                    SNOT2 += 1;
                    //                }
                    //            }
                    //            if (item["OT3"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                    //                {
                    //                    NOT3 += Convert.ToInt16(item["OT3"]);
                    //                    SNOT3 += 1;
                    //                }
                    //            }
                    //            if (SNOT1 != 0 || SNOT15 != 0 || SNOT2 != 0 || SNOT3 != 0)
                    //            {
                    //                SUMMPN += 1;
                    //                SNOT1 = 0;
                    //                SNOT15 = 0;
                    //                SNOT2 = 0;
                    //                SNOT3 = 0;
                    //            }
                    //        }
                    //    }
                    //    else if (item["WorkType"].ToString() == "H")
                    //    {
                    //        if (item["OT1"].ToString() != "")
                    //        {
                    //            if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                    //            {
                    //                HOT1 += Convert.ToInt16(item["OT1"]);
                    //                SHOT1 += 1;
                    //            }
                    //        }
                    //        if (item["OT15"].ToString() != "")
                    //        {
                    //            if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                    //            {
                    //                HOT15 += Convert.ToInt16(item["OT15"]);
                    //                SHOT15 += 1;
                    //            }
                    //        }
                    //        if (item["OT2"].ToString() != "")
                    //        {
                    //            if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                    //            {
                    //                HOT2 += Convert.ToInt16(item["OT2"]);
                    //                SHOT2 += 1;
                    //            }
                    //        }
                    //        if (item["OT3"].ToString() != "")
                    //        {
                    //            if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                    //            {
                    //                HOT3 += Convert.ToInt16(item["OT3"]);
                    //                SHOT3 += 1;
                    //            }
                    //        }
                    //        if (SHOT1 != 0 || SHOT15 != 0 || SHOT2 != 0 || SHOT3 != 0)
                    //        {
                    //            SUMMPH += 1;
                    //            SHOT1 = 0;
                    //            SHOT15 = 0;
                    //            SHOT2 = 0;
                    //            SHOT3 = 0;
                    //        }
                    //    }



                    //    string dataShift = "";
                    //    DataTable dtEMCL = new DataTable();
                    //    string StrEMCL = "SELECT YM, CODE, STSS, STSO " +
                    //        " FROM EMP_EMCL " +
                    //        " WHERE YM =@YM AND CODE=@CODE ";
                    //    SqlCommand cmdEMCL = new SqlCommand();
                    //    cmdEMCL.CommandText = StrEMCL;
                    //    cmdEMCL.Parameters.Add(new SqlParameter("YM", DateTime.Now.ToString("yyyyMM")));
                    //    cmdEMCL.Parameters.Add(new SqlParameter("CODE", item["WCode"].ToString()));
                    //    cmdEMCL.CommandTimeout = 180;
                    //    dtEMCL = oConDCI.Query(cmdEMCL);

                    //    if (dtEMCL.Rows.Count > 0)
                    //    {
                    //        if (DateTime.Now.Day < 5)
                    //        {
                    //            for (int k = DateTime.Now.Day; k <= 27; k++)
                    //            {
                    //                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(k - 1, 1);
                    //                if (dataShift == "T" || dataShift == "H")
                    //                { }
                    //                else { break; }
                    //            }
                    //        }
                    //        else if (DateTime.Now.Day > 20)
                    //        {
                    //            for (int k = DateTime.Now.Day; k >= 5; k--)
                    //            {
                    //                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(k - 1, 1);
                    //                if (dataShift == "T" || dataShift == "H")
                    //                { }
                    //                else { break; }
                    //            }
                    //        }
                    //        else
                    //        {
                    //            for (int k = DateTime.Now.Day; k <= 27; k++)
                    //            {
                    //                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(k - 1, 1);
                    //                if (dataShift == "T" || dataShift == "H")
                    //                { }
                    //                else { break; }
                    //            }
                    //        }
                    //    }//end if emcl data



                    //    if (dataShift == "D")
                    //    {
                    //        MPFOLE_D++;
                    //    }
                    //    else if (dataShift == "N")
                    //    {
                    //        MPFOLE_N++;
                    //    }

                    //    MPFOLE_ALL = MPFOLE_D + MPFOLE_N;


                    //    //  SumMP_ACTD += MPFOLE_D;


                    //    // SumMP_ACTN += MPFOLE_N;


                    //    //    SumOT_ReqD += SUMOT_REQD;


                    //    //  SumOT_ReqN += SUMOT_REQN;


                    //    //SumOT_ActD += SUMMPD;


                    //    //SumOT_ActN += SUMMPN;



                    //    // }

                    //    //try
                    //    //{
                    //    //    MPFOLE_ALL = MPFOLE_D + MPFOLE_N;
                    //    //}
                    //    //catch { }

                    //}

                    // }


                 
                    //------Actual ManPower by Line Day,Night
                    DataTable MPData = GetManPowerByLine_INDirectSupport(txtCostCenter);
                    MPCount_D += Convert.ToInt16(MPData.Rows[0]["MP_D"]);
                    MPCount_N += Convert.ToInt16(MPData.Rows[0]["MP_N"]);



                    //------Actual Work by Line Day,Night
                    SumFOLE_ACTD += GetWorkActByLineDayFOLE_INDirectSupport(txtCostCenter, setDate);
                    SumFOLE_ACTN += GetWorkActByLineNightFOLE_INDirectSupport(txtCostCenter, setDate);

                    //-------OT Req, Actual Day,Night

                    SumOT_ReqD += GetOTReqByLineDayFOLE_INDirectSupport(txtCostCenter, setDate);
                    SumOT_ReqN += GetOTReqByLineNightFOLE_INDirectSupport(txtCostCenter, setDate);
                    SumOT_ActD += GetOTActByLineDayFOLE_INDirectSupport(txtCostCenter, setDate);
                    SumOT_ActN += GetOTActByLineNightFOLE_INDirectSupport(txtCostCenter, setDate);

                  

                }
                else
                {

               
                    DataTable MPData = GetManPowerByLine_INDirectSupport(txtCostCenter);
                    MPCount_D += Convert.ToInt16(MPData.Rows[0]["MP_D"]);
                    MPCount_N += Convert.ToInt16(MPData.Rows[0]["MP_N"]);



                    //------Actual Work by Line Day,Night
                    SumFOLE_ACTD += GetWorkActByLineDayFOLE_INDirectSupport(txtCostCenter, setDate);
                    SumFOLE_ACTN += GetWorkActByLineNightFOLE_INDirectSupport(txtCostCenter, setDate);

                    //-------OT Req, Actual Day,Night

                    SumOT_ReqD += GetOTReqByLineDayFOLE_INDirectSupport(txtCostCenter, setDate);
                    SumOT_ReqN += GetOTReqByLineNightFOLE_INDirectSupport(txtCostCenter, setDate);
                    SumOT_ActD += GetOTActByLineDayFOLE_INDirectSupport(txtCostCenter, setDate);
                    SumOT_ActN += GetOTActByLineNightFOLE_INDirectSupport(txtCostCenter, setDate);



                    foreach (DataRow item in dtMNOT.Rows)
                    {

                        if (i == Convert.ToInt16(item["Daily"].ToString()))
                        {
                            // ** Man Power Attandance
                            DatetoDay = i + ":" + setDate.DayOfWeek.ToString().Substring(0, 3);
                            Xdate = i;

                       
                            SumMP_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());
                            //SumMP_DIFFD = MPCount_D - SumMP_ACTD;
                            //SumMP_DIFFN = MPCount_N - SumMP_ACTN;


                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["REQ_OTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["REQ_OTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["ACT_OTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["ACT_OTNight"].ToString());
                        }
                    }


                }




                //*****  Data for MP, OT Req and Actual                  
                MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);
                //SUMMP_SHIFT = MPCountALL;
                //SUMACT_MP = SUMOT_REQD + SUMOT_REQN;


                // ** Man Power Attandance
                mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                mManPower.Xdate = i;

                //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                //  mManPower.SumMP_STD = SUMACT_MP;
                MPCount_D += LECount_D + FOCount_D;
                MPCount_N += LECount_N + FOCount_N;


                mManPower.SumMPD = MPCount_D;
                mManPower.SumMPN = MPCount_N;

                SumMP_ACTD += SumFOLE_ACTD;
                SumMP_ACTN += SumFOLE_ACTN;

                mManPower.SumMP_ACTD = SumMP_ACTD;
                mManPower.SumMP_ACTN = SumMP_ACTN;

                if (SumMP_ACTD != 0)
                {
                    mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                }
                else
                {
                    mManPower.SumMP_DIFFD = 0;

                }

                if (SumMP_ACTN != 0)
                {

                    mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                }
                else
                {

                    mManPower.SumMP_DIFFN = 0;
                }



                // ** OT Req,ACT

       

                mManPower.SumOT_ReqD = SumOT_ReqD;
                mManPower.SumOT_ReqN = SumOT_ReqN;
                mManPower.SumOT_ActD = SumOT_ActD;
                mManPower.SumOT_ActN = SumOT_ActN;

                oListMP.Add(mManPower);

                if (_Type == "INPU" ||
           _Type == "INSPU" ||
           _Type == "INPC" ||
              _Type == "INSP" ||

                 //----------------------QCQAQS -- ----------------
           _Type == "INQC" ||
           _Type == "INQS" ||


           //------------Production Control and SCM IM PN PS DS SP
           _Type == "INIM" ||

           _Type == "INDC" ||
           _Type == "INPN" ||
            _Type == "INWH" ||

             //------------------ ENGINEER-------------
           _Type == "INENA" ||
           _Type == "INENM" ||
           _Type == "INENMOT" ||

              //--------------- Design and Development-----------------
           _Type == "INDD" ||
           _Type == "INCD" ||

            //----------------------------------------------------//
                    //                     S.G.A GROUP                    //
                    //---------------------------------------------------//
                    //----------------------- IT-----------------
           _Type == "INIT" ||
                    //--------------------- IT&EC-----------------
           _Type == "INUT" ||
            _Type == "INEC" ||


             //-------------------ADMINISTRATION---------------

           _Type == "INSGA" ||
           _Type == "INHR" ||
           _Type == "INAC" ||
           _Type == "INCC" ||
           _Type == "INCB" ||
           _Type == "INGA" ||
           _Type == "INTS" ||
           _Type == "INAUDIT" ||
           _Type == "INHRD" ||
           _Type == "INSF" ||
           _Type == "INLG" ||
           _Type == "INDCC" ||
           _Type == "INTD" ||


           _Type == "INMTALL" ||
            _Type == "INMTM" ||
            _Type == "INMTA" ||
            _Type == "INMTPM" ||
            _Type == "INMTTPM")
                {
                    // *** Insert  Man Power Daily
                    SqlCommand InsertMNOT = new SqlCommand();

                    InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                        ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                        ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                        " VALUES ('" + _Year + "','" + _Month + "','" + i + "','" + Txt_Type + "' " +
                        ",'" + MPCount_D + "','" + SumMP_ACTD + "' " +
                        ",'" + MPCount_N + "','" + SumMP_ACTN + "' " +
                        ",'" + MPCount_D + "','" + SumOT_ReqD + "','" + SumOT_ActD + "' " +
                        ",'" + MPCount_N + "','" + SumOT_ReqN + "','" + SumOT_ActN + "')";
                    //}           



                    oConn.SqlExecute(InsertMNOT, "DBBCS");
                }


                MPCount_D = 0;
                MPCount_N = 0;
                SumMP_ACTD = 0;
                SumMP_ACTN = 0;

                SumMP_ACTN = 0;
                SumOT_ReqD = 0;
                SumOT_ReqN = 0;
                SumOT_ActD = 0;
                SumOT_ActN = 0;
                MPFOLE_ALL = 0;

                SumMP_ACTN = 0;
                SumOT_ActD = 0;
                SumOT_ActN = 0;
                SUMMPD = 0;
                SUMMPN = 0;
                SUMOT_REQN = 0;
                SUMOT_REQD = 0;
                SUMOT_ACTD = 0;
                SUMOT_ACTN = 0;
                MPFOLE_D = 0;
                MPFOLE_N = 0;
                LECount_D = 0;
                LECount_N = 0;
                FOCount_D = 0;
                FOCount_N = 0;
                SumFOLE_ACTD = 0;
                SumFOLE_ACTN = 0;
            }

        }


        //   }




        PrdMonth = 0;
        SumPrdMonth = 0;
      
        accuOP1 = 0;
        accuOP15 = 0;
        accuOP2 = 0;
        accuOP3 = 0;

        accuLE1 = 0;
        accuLE15 = 0;
        accuLE2 = 0;
        accuLE3 = 0;

        accuFO1 = 0;
        accuFO15 = 0;
        accuFO2 = 0;
        accuFO3 = 0;

        accuSU1 = 0;
        accuSU15 = 0;
        accuSU2 = 0;
        accuSU3 = 0;

        CountMPOTREQD = 0;
        CountMPOTREQN = 0;
        CountMPN = 0;
        CountMPH = 0;
        SumMP = 0;


        return oListMP;
    }
    public List<MMPInfo.MPAllChartInfo> GetChartMPDailybyInDirect(int _Year,int _Month, DateTime _DataDate, string _Type)
    {

        List<MMPInfo.MPAllChartInfo> oListMP = new List<MMPInfo.MPAllChartInfo>();



        string[] ArryPrd = { "1YC", "2YC", "SCR", "1YC/3", "ODM" };
        //string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702", "4310", "4320", "4510", "4720", "8120" };
        string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702" };
        string[] ArryPrdFac1 = { "1101", "1102" };
        //string[] ArryPrdAndonFac1 = { "001", "049", "052", "054", "056", "057", "058", "062", "063", "065", "066", "069", "072", "074", "076", "077", "080", "083", "084", "089","090","093","095","098","103","106","107" };
        //string[] ArryPrdAndonFac2 = { "004", "005", "006", "007", "008", "009", "010", "011", "012", "013", "014", "015", "017", "018", "019", "020", "021", "022", "023", "026", "027", "028", "030", "031", "033", "034", "036", "037", "041", "043", "044", "045", "046", "051", "053", "059", "061", "068", "070", "071", "073" };
        string[] ArryPrdFac1M = { "1101" };
        string[] ArryPrdFac1A = { "1102" };
        string[] ArryPrdFac2 = { "1201", "1202", "1301", "1302", "1401", "1402" };
        string[] ArryPrdFac2M = { "1201" };
        string[] ArryPrdFac2A = { "1202" };
        string[] ArryPrdFac2Mo = { "1401" };
        string[] ArryPrdFac2MoA = { "1402" };
        string[] ArryPrdSCA = { "1301", "1302" };
        string[] ArryPrdSCRM = { "1301" };
        string[] ArryPrdSCRA = { "1302" };
        string[] ArryPrdFac3 = { "1701", "1702" };
        string[] ArryPrdFac3M = { "1701" };
        string[] ArryPrdFac3A = { "1702" };
        string[] ArryPrdODM = { "1501" };


        //* Maintenance 
        string[] ArryMT = { "4310", "4320" };
        string[] ArryMTM = { "4310" };
        string[] ArryMTA = { "4320" };

        //* Engineer
        string[] ArryENALL = { "4410", "4420", "4430" };
        string[] ArryENA = { "4410" };
        string[] ArryENM = { "4420" };
        string[] ArryENMOT = { "4430" };


        //* IT & Env.
        string[] ArryITEC = { "7510", "4510", "4520" };
        string[] ArryECUT = { "4510", "4520" };
        string[] ArryIT = { "7510" };
        string[] ArryEC = { "4520" };
        string[] ArryUT = { "4510" };
        //* Procurement 
        string[] ArryProcurement = { "4110", "4120", "4130" };
        string[] ArryProPU = { "4110" };
        string[] ArryProPC = { "4120" };
        string[] ArryProSPU = { "4130" };
        //* Production Control and SCM
        string[] ArryPDSCM = { "4610", "4620", "4210", "4140" };
        string[] ArryIM = { "4610" };
        string[] ArryPN = { "4210" };
        string[] ArryPS = { "4620" };
        string[] ArryIE = { "4630" };
        string[] ArryDC = { "4140" };
        string[] ArryWH = { "7610" };


        //* QCQAQS
        string[] ArryQCQAQS = { "4710", "4720", "4830" };
        string[] ArryQC = { "4720" };
        string[] ArryQA = { "4710" };
        string[] ArryQS = { "4830" };

        //* Design and Development
        string[] ArryDDCD = { "4810", "4820" };
        string[] ArryDD = { "4810" };
        string[] ArryCD = { "4820" };

        //* 
        string[] ArrySP = { "4910" };

        string[] ArryManage = { "8120" };



        string[] ArryPeriod = { "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod1 = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod2 = { "PRD_JAN", "PRD_FEB", "PRD_MAR", "PRD_APR", "PRD_MAY", "PRD_JUN", "PRD_JUL", "PRD_AUG", "PRD_SEP", "PRD_OCT", "PRD_NOV", "PRD_DEC" };

        int[] ArryDay = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 };
        int[] ArryMonth = { 4, 5, 6, 7, 8, 9, 10, 11, 12 };

        int[] ArryMonth1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };


        string pAccGroup = "EXP";
        string pBudgetType = "DI";
        string pYear = _DataDate.ToString("yyyy");
        string pMonth = _DataDate.ToString("MM");
        DateTime _LastYear = new DateTime();
        DateTime _Last2Year = new DateTime();
        DateTime _Last3Year = new DateTime();
        _LastYear = _DataDate.AddYears(-1);
        _Last2Year = _DataDate.AddYears(-2);
        _Last3Year = _DataDate.AddYears(-3);
        string pLastYear = _LastYear.ToString("yyyy");
        string pLast2Year = _Last2Year.ToString("yyyy");
        string pLast3Year = _Last3Year.ToString("yyyy");
        string TxtModel = " ";


        string Factory = "";
        string Txt_Type = "";


        #region init



        int[] _PrdActual = new int[12];

        string[] ArrySeires5 = new string[5];
        Decimal[] ArrySeiresValue5 = new Decimal[5];



        #endregion

        string[] ArryLoop = new string[0];
        string ProductType = "";
        string TargetType = "";




        DateTime strDate = new DateTime(DateTime.Now.Year, _Month, 1, 0, 0, 0);
        DateTime endDate = strDate.AddMonths(1).Date + new TimeSpan(0, 0, 0);

        DateTime strHr = DateTime.Today + new TimeSpan(08, 00, 00);
        DateTime dateEnd = DateTime.Today + new TimeSpan(20, 00, 00);
        DateTime Endtoday = DateTime.Now;
        DateTime EndYesterday = DateTime.Today - new TimeSpan(24, 00, 00);

        int MonthSelect = _Month;
        int MonthPresent = Endtoday.Month;
        int PrevMonth = _Month - 1;
        int NextMonth = _Month + 1;



        //DataTable dtWorkingHour = new DataTable();
        //dtWorkingHour.Columns.Add("Position", typeof(string));
        //dtWorkingHour.Columns.Add("OT1", typeof(string));
        //dtWorkingHour.Columns.Add("OT15", typeof(string));
        //dtWorkingHour.Columns.Add("OT2", typeof(string));
        //dtWorkingHour.Columns.Add("OT3", typeof(string));
        //string[] arrPotition = { "OP", "LE", "FO", "SU" };
        //foreach (string item in arrPotition)
        //{
        //    dtWorkingHour.Rows.Add(item, "", "", "", "");
        //}


        //------------- Create column header OT  -----------------


        DataTable dtBCPD = new DataTable();
        dtBCPD.Columns.Add("Fiscal_year", typeof(string));
        dtBCPD.Columns.Add("ProductType", typeof(string));
        dtBCPD.Columns.Add("PRD_JAN", typeof(string));
        dtBCPD.Columns.Add("PRD_FEB", typeof(string));
        dtBCPD.Columns.Add("PRD_MAR", typeof(string));
        dtBCPD.Columns.Add("PRD_APR", typeof(string));
        dtBCPD.Columns.Add("PRD_MAY", typeof(string));
        dtBCPD.Columns.Add("PRD_JUN", typeof(string));
        dtBCPD.Columns.Add("PRD_JUL", typeof(string));
        dtBCPD.Columns.Add("PRD_AUG", typeof(string));
        dtBCPD.Columns.Add("PRD_SEP", typeof(string));
        dtBCPD.Columns.Add("PRD_OCT", typeof(string));
        dtBCPD.Columns.Add("PRD_NOV", typeof(string));
        dtBCPD.Columns.Add("PRD_DEC", typeof(string));
        DateTime setDate1 = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sqlBCPD = new SqlCommand();
        sqlBCPD.CommandText = "SELECT Fiscal_year " +
            " ,ProductType,PRD_APR,PRD_MAY,PRD_JUN,PRD_JUL,PRD_AUG " +
            " ,PRD_SEP,PRD_OCT,PRD_NOV,PRD_DEC,PRD_JAN,PRD_FEB,PRD_MAR,Total_PRD " +
           " from BC_PRODUCTION " +
           " where [Fiscal_year] = " + setDate1.Year;


        // int LBCSPD = 0;
        double Prd = 0, Prd1 = 0, Prd2 = 0, Prd3 = 0, Prd4 = 0, Prd5 = 0, Prd6 = 0, Prd7 = 0;
        double Prd8 = 0, Prd9 = 0, Prd10 = 0, Prd11 = 0, Prd12 = 0, SumPrd = 0, SumPrdOverAll = 0, PrdMonth = 0, SumPrdMonth = 0;
        DataTable dt1 = oConn.SqlGet(sqlBCPD, "DBBCS");
        foreach (DataRow item in dt1.Rows)
        {
            DataRow _rowBCSPD = dtBCPD.NewRow();
            _rowBCSPD["Fiscal_year"] = item["Fiscal_year"].ToString();
            _rowBCSPD["ProductType"] = item["ProductType"].ToString();
            _rowBCSPD["PRD_JAN"] = item["PRD_JAN"];
            _rowBCSPD["PRD_FEB"] = item["PRD_FEB"];
            _rowBCSPD["PRD_MAR"] = item["PRD_MAR"];
            _rowBCSPD["PRD_APR"] = item["PRD_APR"];
            _rowBCSPD["PRD_MAY"] = item["PRD_MAY"];
            _rowBCSPD["PRD_JUN"] = item["PRD_JUN"];
            _rowBCSPD["PRD_JUL"] = item["PRD_JUL"];
            _rowBCSPD["PRD_AUG"] = item["PRD_AUG"];
            _rowBCSPD["PRD_SEP"] = item["PRD_SEP"];
            _rowBCSPD["PRD_OCT"] = item["PRD_OCT"];
            _rowBCSPD["PRD_NOV"] = item["PRD_NOV"];
            _rowBCSPD["PRD_DEC"] = item["PRD_DEC"];
            dtBCPD.Rows.Add(_rowBCSPD);
        }


        //---------------- Get Employeee of Line --------------


        //DataTable dtAndon = new DataTable();
        //dtAndon.Columns.Add("LineCode", typeof(string));
        //dtAndon.Columns.Add("LineName", typeof(string));
        //dtAndon.Columns.Add("BoardId", typeof(string));
        //dtAndon.Columns.Add("LineGroup", typeof(string));

        DataTable dtEmp = new DataTable();
        dtEmp.Columns.Add("Code", typeof(string));
        dtEmp.Columns.Add("Position", typeof(string));
        dtEmp.Columns.Add("CostCenter", typeof(string));
        dtEmp.Columns.Add("WType", typeof(string));
        DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);




        //  DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);
        DateTime setyesterday = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sql = new SqlCommand();
        if (_Type == "INMAN" || _Type == "OTINMAN")
        {
            ArryLoop = ArryManage;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INMAN";

        }
        if (_Type == "INIE" || _Type == "OTINIE")
        {
            ArryLoop = ArryIE;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INIE";

        }
        if ((_Type == "INFAC1") || (_Type == "INFAC1Prev") || (_Type == "INFAC1Prev2") || (_Type == "INFAC1Prev3") ||
           (_Type == "OTINFAC1") || (_Type == "OTINFAC1Prev") | (_Type == "OTINFAC1Prev2") || (_Type == "OTINFAC1Prev3"))
        {
            ArryLoop = ArryPrdFac1;
            txtCostCenter = ArryLoop[0] + " or COSTCENTER = " + ArryLoop[1];
            ProductType = "1YC";
            TargetType = "1YC";
            TxtModel = "1YC%";
            Factory = "1";
            Txt_Type = "INFAC1";

        }
        else if ((_Type == "INFAC2") || (_Type == "INFAC2Prev") || (_Type == "INFAC2Prev2") || (_Type == "INFAC2Prev3") ||
        (_Type == "OTINFAC2") || (_Type == "OTINFAC2Prev") | (_Type == "OTINFAC2Prev2") || (_Type == "OTINFAC2Prev3"))
        {
            ArryLoop = ArryPrdFac2;
            txtCostCenter = ArryLoop[0] + " or COSTCENTER = " + ArryLoop[1] + " or COSTCENTER = " + ArryLoop[2] + " or COSTCENTER = " + ArryLoop[3] + " or COSTCENTER = " + ArryLoop[4] + " or COSTCENTER = " + ArryLoop[5];
            ProductType = "2YC";
            TargetType = "2YC";
            TxtModel = "2YC%";
            Factory = "2";
            Txt_Type = "INFAC2";
        }
        else if ((_Type == "INFAC3") || (_Type == "INFAC3Prev") || (_Type == "INFAC3Prev2") || (_Type == "INFAC3Prev3") ||
       (_Type == "OTINFAC3") || (_Type == "OTINFAC3Prev") | (_Type == "OTINFAC3Prev2") || (_Type == "OTINFAC3Prev3"))
        {
            ArryLoop = ArryPrdFac3;
            txtCostCenter = ArryLoop[0] + " or COSTCENTER = " + ArryLoop[1];
            ProductType = "1YC/3";
            TargetType = "1YC/3";
            TxtModel = "1YC%";
            Factory = "3";
            Txt_Type = "INFAC3";
        }
        else if ((_Type == "INODM") || (_Type == "INODMPrev") || (_Type == "INODMPrev2") || (_Type == "INODMPrev3") ||
          (_Type == "OTINODM") || (_Type == "OTINODMPrev") | (_Type == "OTINODMPrev2") || (_Type == "OTINODMPrev3"))
        {
            ArryLoop = ArryPrdODM;
            txtCostCenter = ArryLoop[0];
            ProductType = "ODM";
            TargetType = "ODM";
            Factory = "ODM";
            Txt_Type = "INODM";
        }
        //-----------------Procurement PU SPU PC ----------------
        else if (_Type == "INPU")
        {
            ArryLoop = ArryProPU;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INPU";

        }
        else if (_Type == "INPC")
        {
            ArryLoop = ArryProPC;
            txtCostCenter = ArryLoop[0];
            Txt_Type = "INPC";


        }
        else if (_Type == "INSPU")
        {
            ArryLoop = ArryProSPU;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INSPU";

        }

        //------------Production Control and SCM IM PN PS DS SP
        else if (_Type == "INIM")
        {
            ArryLoop = ArryIM;
            txtCostCenter = ArryLoop[0];
            Txt_Type = "INIM";
        }
        else if (_Type == "INPS")
        {
            ArryLoop = ArryPS;
            txtCostCenter = ArryLoop[0];
            Txt_Type = "INPS";
        }
        else if (_Type == "INDC")
        {
            ArryLoop = ArryDC;
            txtCostCenter = ArryLoop[0];
            Txt_Type = "INDC";

        }
        else if (_Type == "INPN")
        {
            ArryLoop = ArryPN;
            txtCostCenter = ArryLoop[0];
            Txt_Type = "INPN";

        }
        else if (_Type == "INIE")
        {
            ArryLoop = ArryIE;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INIE";

        }
        else if (_Type == "INWH")
        {
            ArryLoop = ArryWH;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INWH";

        }

              //------------------ ENGINEER-------------

        else if (_Type == "INENA")
        {
            ArryLoop = ArryENA;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INENA";

        }
        else if (_Type == "INENM")
        {
            ArryLoop = ArryENM;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INENM";

        }
        else if (_Type == "INENMOT")
        {
            ArryLoop = ArryENMOT;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INENMOT";
        }
        // All Maintenance
        if (_Type == "INMTALL" || _Type == "INMTALLPrev" || _Type == "INMTALLPrev2" || _Type == "INMTALLPrev3" ||
           _Type == "OTINMTALL" || _Type == "OTINMTALLPrev" || _Type == "OTINMTALLPrev2" || _Type == "OTINMTALLPrev3")
        {
            ArryLoop = ArryMT;

            txtCostCenter = ArryLoop[0] + " or COSTCENTER = " + ArryLoop[1];
            Txt_Type = "INMTALL";

        }
        else if (_Type == "INMTM")
        {
            ArryLoop = ArryMTM;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INMTM";

        }
        else if (_Type == "INMTA")
        {
            ArryLoop = ArryMTA;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INMTA";


        }


        else if (_Type == "MPPS")
        {
            ArryLoop = ArryPS;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "PS";

        }
        else if (_Type == "MPDC")
        {
            ArryLoop = ArryDC;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "DC";

        }

        //----------------------QCQAQS -- ----------------
        else if (_Type == "INQCQAQS" || _Type == "INQCQAQSPrev" || _Type == "INQCQAQSPrev2" || _Type == "INQCQAQSPrev3" ||
            _Type == "OTINQCQAQS" || _Type == "OTINQCQAQSPrev" || _Type == "OTINQCQAQSPrev2" || _Type == "OTINQCQAQSPrev3")
        {
            ArryLoop = ArryQCQAQS;

            txtCostCenter = ArryLoop[0] + " or COSTCENTER = " + ArryLoop[1] + " or COSTCENTER = " + ArryLoop[2];
            Txt_Type = "INQCQAQS";

        }
        else if (_Type == "INQC" || _Type == "INQCPrev" || _Type == "INQCPrev2" || _Type == "INQCPrev3" ||
            _Type == "OTINQC" || _Type == "OTINQCPrev" || _Type == "OTINQCPrev2" || _Type == "OTINQCPrev3")
        {
            ArryLoop = ArryQC;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INQC";

        }
        else if (_Type == "INQA")
        {
            ArryLoop = ArryQA;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INQA";

        }
        else if (_Type == "INQS")
        {
            ArryLoop = ArryQS;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INQS";

        }

               //--------------- Design and Development-----------------
        else if (_Type == "INDD")
        {
            ArryLoop = ArryDD;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INDD";

        }
        else if (_Type == "INCD")
        {
            ArryLoop = ArryCD;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INCD";

        }
        //--------------------- IT&EC-----------------

        else if (_Type == "INIT")
        {
            ArryLoop = ArryIT;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INIT";
        }
        else if (_Type == "INEC")
        {
            ArryLoop = ArryEC;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INEC";
        }
        else if (_Type == "INUT")
        {
            ArryLoop = ArryUT;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INUT";
        }
        else if (_Type == "INSP")
        {
            ArryLoop = ArrySP;

            txtCostCenter = ArryLoop[0];
            Txt_Type = "INSP";
        }



        sql.CommandText = "SELECT e.CODE, POSIT,COSTCENTER,WTYPE FROM [Employee] e " +
        " where RESIGN IS NULL and [COSTCENTER] = " + txtCostCenter + " ORDER BY COSTCENTER,e.POSIT";


        int ii = 0;
        DataTable dt = oConn.SqlGet(sql, "DBDCI");
        foreach (DataRow item in dt.Rows)
        {
            DataRow _rowEmp = dtEmp.NewRow();
            _rowEmp["Code"] = item["CODE"].ToString();
            _rowEmp["Position"] = item["POSIT"].ToString();
            _rowEmp["CostCenter"] = item["COSTCENTER"].ToString();
            _rowEmp["WTYPE"] = item["WTYPE"].ToString();
            dtEmp.Rows.Add(_rowEmp);
        }



     

        //  lbMP.Text = dtEmp.Rows.Count.ToString();
        //---------------- Get Employeee of Line --------------        

        //----------------- Create row content Manpower ------------------

        MMPInfo.MPAllChartInfo oItemMPP = new MMPInfo.MPAllChartInfo();

        int accuOP1 = 0, accuOP15 = 0, accuOP2 = 0, accuOP3 = 0, CountMPOP = 1, CountMPOP_D = 0, CountMPOP_N = 0, REQ_MPOP_D = 0, REQ_MPOP_N = 0;
        int accuLE1 = 0, accuLE15 = 0, accuLE2 = 0, accuLE3 = 0, CountMPLE = 1, CountMPLE_D = 0, CountMPLE_N = 0, REQ_MPLE_D = 0, REQ_MPLE_N = 0; ;
        int accuFO1 = 0, accuFO15 = 0, accuFO2 = 0, accuFO3 = 0, CountMPFO = 1, CountMPFO_D = 0, CountMPFO_N = 0, REQ_MPFO_D = 0, REQ_MPFO_N = 0;
        int accuSU1 = 0, accuSU15 = 0, accuSU2 = 0, accuSU3 = 0, CountMPSU = 1, CountMPSU_D = 0, CountMPSU_N = 0, REQ_MPSU_D = 0, REQ_MPSU_N = 0;
        int CountMPOTREQD = 1, CountMPOTREQN = 1, SumMPReqD = 1, SumMPReqN = 1, CountMPN = 1, CountMPH = 1, SumMP = 1;
        int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
        int SumFOLE_ACTD = 0, SumFOLE_ACTN = 0, SumLEOT_ReqD = 0, SumLEOT_ReqN = 0, SumLEOT_ActD = 0, SumLEOT_ActN = 0;

        double CostOverAllSum = 0;


        //---------------- Get Employeee of Line --------------
        DataTable dtMNOT = new DataTable();

        dtMNOT.Columns.Add("Fiscal_year", typeof(string));
        dtMNOT.Columns.Add("Monthly", typeof(string));
        dtMNOT.Columns.Add("Daily", typeof(string));
        dtMNOT.Columns.Add("ProductType", typeof(string));

        dtMNOT.Columns.Add("STD_MPDay", typeof(string));
        dtMNOT.Columns.Add("ACT_MPDay", typeof(string));
        dtMNOT.Columns.Add("STD_MPNight", typeof(string));
        dtMNOT.Columns.Add("ACT_MPNight", typeof(string));

        dtMNOT.Columns.Add("STD_OTDay", typeof(string));
        dtMNOT.Columns.Add("REQ_OTDay", typeof(string));
        dtMNOT.Columns.Add("ACT_OTDay", typeof(string));

        dtMNOT.Columns.Add("STD_OTNight", typeof(string));
        dtMNOT.Columns.Add("REQ_OTNight", typeof(string));
        dtMNOT.Columns.Add("ACT_OTNight", typeof(string));



        // DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sqlMNOT = new SqlCommand();


        sqlMNOT.CommandText = "SELECT Fiscal_year,Monthly,Daily,ProductType,STD_MPDay,ACT_MPDay" +
            " ,STD_MPNight,ACT_MPNight,STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight" +
           " FROM BC_MANPOWER where Fiscal_year = '" + _Year + "' and  Monthly = '" + _Month + "' and ProductType ='" + Txt_Type + "' " +
           " order by daily ";



        DataTable dtMOT = oConn.SqlGet(sqlMNOT, "DBBCS");

        if (dtMOT.Rows.Count > 0)
        {
            foreach (DataRow item in dtMOT.Rows)
            {
                DataRow _rowMNOT = dtMNOT.NewRow();
                _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                _rowMNOT["Monthly"] = item["Monthly"].ToString();
                _rowMNOT["Daily"] = item["Daily"].ToString();
                _rowMNOT["ProductType"] = item["ProductType"].ToString();
                _rowMNOT["STD_MPDay"] = item["STD_MPDay"].ToString();
                _rowMNOT["ACT_MPDay"] = item["ACT_MPDay"].ToString();
                _rowMNOT["STD_MPNight"] = item["STD_MPNight"].ToString();
                _rowMNOT["ACT_MPNight"] = item["ACT_MPNight"].ToString();
                _rowMNOT["STD_OTDay"] = item["STD_OTDay"].ToString();
                _rowMNOT["REQ_OTDay"] = item["REQ_OTDay"].ToString();
                _rowMNOT["ACT_OTDay"] = item["ACT_OTDay"].ToString();
                _rowMNOT["STD_OTNight"] = item["STD_OTNight"].ToString();
                _rowMNOT["REQ_OTNight"] = item["REQ_OTNight"].ToString();
                _rowMNOT["ACT_OTNight"] = item["ACT_OTNight"].ToString();

                dtMNOT.Rows.Add(_rowMNOT);
            }

        }


        //** Productivity End


        //   string InsertDD;

       

        int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;
        int LECount_D = 0, LECount_N = 0, FOCount_D = 0, FOCount_N = 0; ;
        int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;
        string DatetoDay = "";

        if (dtMNOT.Rows.Count > 0)
        {
            if ((MonthSelect == MonthPresent) && ((_Type == "INFAC1") || (_Type == "INFAC2") || (_Type == "INFAC3") || (_Type == "INMTALL") || (_Type == "OTINMTALL") || (_Type == "INQCQAQS") || (_Type == "OTINQCQAQS")
               || (_Type == "INECUT") || (_Type == "OTINECUT") || (_Type == "INQA") || (_Type == "OTINQA") || (_Type == "INQS") || (_Type == "OTINQS")))
            {

                //int idxMP = 0;
                //--------------- Get Employee working Time ---------------------
                DataTable dtempWorkingTime = new DataTable();
                int SUMMPD = 0, DOT1 = 0, DOT15 = 0, DOT2 = 0, DOT3 = 0, SDOT1 = 0, SDOT15 = 0, SDOT2 = 0, SDOT3 = 0;
                int SUMMPN = 0, HOT1 = 0, HOT15 = 0, HOT2 = 0, HOT3 = 0, SHOT1 = 0, SHOT15 = 0, SHOT2 = 0, SHOT3 = 0;
                int SUMMPH = 0, NOT1 = 0, NOT15 = 0, NOT2 = 0, NOT3 = 0, SNOT1 = 0, SNOT15 = 0, SNOT2 = 0, SNOT3 = 0;



                DataTable dtWorkTime = new DataTable();
                dtWorkTime.Columns.Add("Code", typeof(string));
                dtWorkTime.Columns.Add("WorkDate", typeof(string));
                dtWorkTime.Columns.Add("POSIT", typeof(string));
                dtWorkTime.Columns.Add("OT1", typeof(int));
                dtWorkTime.Columns.Add("OT15", typeof(int));
                dtWorkTime.Columns.Add("OT2", typeof(int));
                dtWorkTime.Columns.Add("OT3", typeof(int));
                dtWorkTime.Columns.Add("SUMOT", typeof(int));
                dtWorkTime.Columns.Add("REQDOT1", typeof(int));
                dtWorkTime.Columns.Add("REQDOT15", typeof(int));
                dtWorkTime.Columns.Add("REQDOT2", typeof(int));
                dtWorkTime.Columns.Add("REQDOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMDOTREQ", typeof(int));
                dtWorkTime.Columns.Add("SUMMPReqD", typeof(int));
                dtWorkTime.Columns.Add("DOT1", typeof(int));
                dtWorkTime.Columns.Add("DOT15", typeof(int));
                dtWorkTime.Columns.Add("DOT2", typeof(int));
                dtWorkTime.Columns.Add("DOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMDOT", typeof(int));
                dtWorkTime.Columns.Add("SUMMPD", typeof(int));

                dtWorkTime.Columns.Add("REQNOT1", typeof(int));
                dtWorkTime.Columns.Add("REQNOT15", typeof(int));
                dtWorkTime.Columns.Add("REQNOT2", typeof(int));
                dtWorkTime.Columns.Add("REQNOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMNOTREQ", typeof(int));
                dtWorkTime.Columns.Add("SUMMPReqN", typeof(int));
                dtWorkTime.Columns.Add("NOT1", typeof(int));
                dtWorkTime.Columns.Add("NOT15", typeof(int));
                dtWorkTime.Columns.Add("NOT2", typeof(int));
                dtWorkTime.Columns.Add("NOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMNOT", typeof(int));
                dtWorkTime.Columns.Add("SUMMPN", typeof(int));

                dtWorkTime.Columns.Add("REQHOT1", typeof(int));
                dtWorkTime.Columns.Add("REQHOT15", typeof(int));
                dtWorkTime.Columns.Add("REQHOT2", typeof(int));
                dtWorkTime.Columns.Add("REQHOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMHOTREQ", typeof(int));
                dtWorkTime.Columns.Add("SUMMPReqH", typeof(int));
                dtWorkTime.Columns.Add("HOT1", typeof(int));
                dtWorkTime.Columns.Add("HOT15", typeof(int));
                dtWorkTime.Columns.Add("HOT2", typeof(int));
                dtWorkTime.Columns.Add("HOT3", typeof(int));
                dtWorkTime.Columns.Add("SUMHOT", typeof(int));
                dtWorkTime.Columns.Add("SUMMPH", typeof(int));


                //--------------- Get Employee working Time ---------------------
                //int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
                int FlagUdate = 0;
                //int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;

                int Xdate = 0;
                int Yester = 0;
                int SUMOT_REQDD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
                int SUMOT_REQNN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
                int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
                int SUMMP_SHIFT = 0, SUMACT_MP = 0;
                //int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;
                int FlagInsert = 1;


                for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                {
                    //------------------ Monthly Present Update --------------------//
                    if (i >= 2)
                    {
                        Yester = i - 1;
                        setyesterday = new DateTime(DateTime.Now.Year, setDate.Month, Yester);

                    }
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);




                  
                    if ((setDate >= EndYesterday) && (setDate <= dateEnd))
                    {
                        //if (setDate <= Endtoday)
                        //{
                        FlagUdate = 1;

                        //----------------- Fillter Working Time -------------
                        bool Working = false;

                        sql.CommandText = "SELECT e.Posit,WorkShift,WorkType,otr.OTFROM ,[WCode],[WDate],[WTime],[WDoor],es.[WType],LTRIM(DATEDIFF(MINUTE, 0, otr.OT1)) as OT1,LTRIM(DATEDIFF(MINUTE, 0, otr.OT15)) as OT15 " +
          ",LTRIM(DATEDIFF(MINUTE, 0, otr.OT2)) as OT2,LTRIM(DATEDIFF(MINUTE, 0, otr.OT3)) as OT3 " +
          " FROM [dbDCI].[dbo].[EmployeeTimeStamp] es " +
          " LEFT JOIN [dbDCI].[dbo].[Employee] e ON es.WCode = e.CODE " +
          " LEFT JOIN [dbDCI].[dbo].[EmployeeWorkingTime] wt ON es.WCode = wt.Code " +
          " LEFT JOIN [dbDCI].[dbo].[EMP_OTRQ] otr ON es.WCode = otr.CODE AND es.WDate = otr.ODATE " +
          " WHERE WDate >= '" + setDate.ToString("yyyy-MM-dd") + "' AND WDate <= '" + setDate.ToString("yyyy-MM-dd") + "' AND es.WType = 'O' " +
          " And OTFROM != ''" +
          "	AND CONVERT(DATE, wt.SystemOUT) = WDate " +
          " and (CostCenter = " + txtCostCenter + " )" +
                            // " And  ( " + txtAndon + "')" +
          " order by WDate  desc";


                        DataTable dtt = oConn.SqlGet(sql, "DBDCI");
                        if (dtt.Rows.Count > 0)
                        {

                            //DataRow _row = dtWorkTime.NewRow();
                            //foreach (DataRow item in dtt.Rows)
                            //{

                            //    _row["Code"] = item["WCode"].ToString();
                            //    _row["WorkDate"] = Convert.ToDateTime(item["WDate"].ToString()).ToString("yyyy-MM-dd");
                            //    _row["POSIT"] = item["Posit"].ToString();


                            //    //-------------------- ActWork, OT REQ,ACT LE-FO -----------------------                                    
                            //    //if ((item["Posit"].ToString() == "LE") || (item["Posit"].ToString() == "FO"))
                            //    //{

                            //    if (item["WorkShift"].ToString() == "D")
                            //    {

                            //        if ((item["OTFROM"].ToString() != "06:05") && (item["OTFROM"].ToString() != "20:00"))
                            //        {

                            //            SUMOT_REQDD += 1;

                            //            if (item["OT1"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                            //                {
                            //                    REQDOT1 += Convert.ToInt16(item["OT1"]);
                            //                    SREQDOT1 += 1;
                            //                }
                            //            }
                            //            if (item["OT15"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                            //                {
                            //                    REQDOT15 += Convert.ToInt16(item["OT15"]);
                            //                    SREQDOT15 += 1;
                            //                }
                            //            }
                            //            if (item["OT2"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                            //                {
                            //                    REQDOT2 += Convert.ToInt16(item["OT2"]);
                            //                    SREQDOT2 += 1;
                            //                }
                            //            }
                            //            if (item["OT3"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                            //                {
                            //                    REQDOT3 += Convert.ToInt16(item["OT3"]);
                            //                    SREQDOT3 += 1;
                            //                }
                            //            }

                            //            if (SREQDOT1 != 0 || SREQDOT15 != 0 || SREQDOT2 != 0 || SREQDOT3 != 0)
                            //            {
                            //                SUMOT_ACTD += 1;
                            //                SREQDOT1 = 0;
                            //                SREQDOT15 = 0;
                            //                SREQDOT2 = 0;
                            //                SREQDOT3 = 0;
                            //            }
                            //        }
                            //        else
                            //        {
                            //            SUMOT_REQDD += 1;

                            //            if (item["OT1"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                            //                {
                            //                    DOT1 += Convert.ToInt16(item["OT1"]);
                            //                    SDOT1 += 1;
                            //                }
                            //            }
                            //            if (item["OT15"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                            //                {
                            //                    DOT15 += Convert.ToInt16(item["OT15"]);
                            //                    SDOT15 += 1;
                            //                }
                            //            }
                            //            if (item["OT2"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                            //                {
                            //                    DOT2 += Convert.ToInt16(item["OT2"]);
                            //                    SDOT2 += 1;
                            //                }
                            //            }
                            //            if (item["OT3"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                            //                {
                            //                    DOT3 += Convert.ToInt16(item["OT3"]);
                            //                    SDOT3 += 1;
                            //                }
                            //            }

                            //            if (SDOT1 != 0 || SDOT15 != 0 || SDOT2 != 0 || SDOT3 != 0)
                            //            {
                            //                SUMMPD += 1;
                            //                SDOT1 = 0;
                            //                SDOT15 = 0;
                            //                SDOT2 = 0;
                            //                SDOT3 = 0;
                            //            }

                            //        }

                            //    }
                            //    else if (item["WorkShift"].ToString() == "N")
                            //    {
                            //        if ((item["OTFROM"].ToString() == "06:05") || (item["OTFROM"].ToString() == "20:00"))
                            //        {
                            //            SUMOT_REQNN += 1;
                            //            if (item["OT1"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                            //                {
                            //                    REQNOT1 += Convert.ToInt16(item["OT1"]);
                            //                    SREQNOT1 += 1;
                            //                }
                            //            }
                            //            if (item["OT15"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                            //                {
                            //                    REQNOT15 += Convert.ToInt16(item["OT15"]);
                            //                    SREQNOT15 += 1;
                            //                }
                            //            }
                            //            if (item["OT2"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                            //                {
                            //                    REQNOT2 += Convert.ToInt16(item["OT2"]);
                            //                    SREQNOT2 += 1;
                            //                }
                            //            }
                            //            if (item["OT3"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                            //                {
                            //                    REQNOT3 += Convert.ToInt16(item["OT3"]);
                            //                    SREQNOT3 += 1;
                            //                }
                            //            }
                            //            if (SREQNOT1 != 0 || SREQNOT15 != 0 || SREQNOT2 != 0 || SREQNOT3 != 0)
                            //            {
                            //                SUMOT_ACTN += 1;
                            //                SREQNOT1 = 0;
                            //                SREQNOT15 = 0;
                            //                SREQNOT2 = 0;
                            //                SREQNOT3 = 0;
                            //            }
                            //        }
                            //        else
                            //        {

                            //            SUMOT_REQNN += 1;
                            //            if (item["OT1"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                            //                {
                            //                    NOT1 += Convert.ToInt16(item["OT1"]);
                            //                    SNOT1 += 1;
                            //                }
                            //            }
                            //            if (item["OT15"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                            //                {
                            //                    NOT15 += Convert.ToInt16(item["OT15"]);
                            //                    SNOT15 += 1;
                            //                }
                            //            }
                            //            if (item["OT2"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                            //                {
                            //                    NOT2 += Convert.ToInt16(item["OT2"]);
                            //                    SNOT2 += 1;
                            //                }
                            //            }
                            //            if (item["OT3"].ToString() != "")
                            //            {
                            //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                            //                {
                            //                    NOT3 += Convert.ToInt16(item["OT3"]);
                            //                    SNOT3 += 1;
                            //                }
                            //            }
                            //            if (SNOT1 != 0 || SNOT15 != 0 || SNOT2 != 0 || SNOT3 != 0)
                            //            {
                            //                SUMMPN += 1;
                            //                SNOT1 = 0;
                            //                SNOT15 = 0;
                            //                SNOT2 = 0;
                            //                SNOT3 = 0;
                            //            }
                            //        }
                            //    }
                            //    else if (item["WorkType"].ToString() == "H")
                            //    {
                            //        if (item["OT1"].ToString() != "")
                            //        {
                            //            if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                            //            {
                            //                HOT1 += Convert.ToInt16(item["OT1"]);
                            //                SHOT1 += 1;
                            //            }
                            //        }
                            //        if (item["OT15"].ToString() != "")
                            //        {
                            //            if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                            //            {
                            //                HOT15 += Convert.ToInt16(item["OT15"]);
                            //                SHOT15 += 1;
                            //            }
                            //        }
                            //        if (item["OT2"].ToString() != "")
                            //        {
                            //            if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                            //            {
                            //                HOT2 += Convert.ToInt16(item["OT2"]);
                            //                SHOT2 += 1;
                            //            }
                            //        }
                            //        if (item["OT3"].ToString() != "")
                            //        {
                            //            if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                            //            {
                            //                HOT3 += Convert.ToInt16(item["OT3"]);
                            //                SHOT3 += 1;
                            //            }
                            //        }
                            //        if (SHOT1 != 0 || SHOT15 != 0 || SHOT2 != 0 || SHOT3 != 0)
                            //        {
                            //            SUMMPH += 1;
                            //            SHOT1 = 0;
                            //            SHOT15 = 0;
                            //            SHOT2 = 0;
                            //            SHOT3 = 0;
                            //        }
                            //    }


                            //    // Get ManPower FOLE

                            //    string dataShift = "";
                            //    DataTable dtEMCL = new DataTable();
                            //    string StrEMCL = "SELECT YM, CODE, STSS, STSO " +
                            //        " FROM EMP_EMCL " +
                            //        " WHERE YM =@YM AND CODE=@CODE ";
                            //    SqlCommand cmdEMCL = new SqlCommand();
                            //    cmdEMCL.CommandText = StrEMCL;
                            //    cmdEMCL.Parameters.Add(new SqlParameter("YM", DateTime.Now.ToString("yyyyMM")));
                            //    cmdEMCL.Parameters.Add(new SqlParameter("CODE", item["WCode"].ToString()));
                            //    cmdEMCL.CommandTimeout = 180;
                            //    dtEMCL = oConDCI.Query(cmdEMCL);

                            //    if (dtEMCL.Rows.Count > 0)
                            //    {
                            //        if (DateTime.Now.Day < 5)
                            //        {
                            //            for (int k = DateTime.Now.Day; k <= 27; k++)
                            //            {
                            //                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(k - 1, 1);
                            //                if (dataShift == "T" || dataShift == "H")
                            //                { }
                            //                else { break; }
                            //            }
                            //        }
                            //        else if (DateTime.Now.Day > 20)
                            //        {
                            //            for (int k = DateTime.Now.Day; k >= 5; k--)
                            //            {
                            //                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(k - 1, 1);
                            //                if (dataShift == "T" || dataShift == "H")
                            //                { }
                            //                else { break; }
                            //            }
                            //        }
                            //        else
                            //        {
                            //            for (int k = DateTime.Now.Day; k <= 27; k++)
                            //            {
                            //                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(k - 1, 1);
                            //                if (dataShift == "T" || dataShift == "H")
                            //                { }
                            //                else { break; }
                            //            }
                            //        }
                            //    }//end if emcl data



                            //    if (dataShift == "D")
                            //    {
                            //        MPFOLE_D++;
                            //    }
                            //    else if (dataShift == "N")
                            //    {
                            //        MPFOLE_N++;
                            //    }

                            //    MPFOLE_ALL = MPFOLE_D + MPFOLE_N;


                            //    //  SumMP_ACTD += MPFOLE_D;


                            //    // SumMP_ACTN += MPFOLE_N;


                            //    //SumOT_ReqD += SUMOT_REQD;


                            //    //SumOT_ReqN += SUMOT_REQN;


                            //    //SumOT_ActD += SUMOT_ACTD;


                            //    //SumOT_ActN += SUMOT_ACTN;



                            //}  //-----  CHECK UPDATE 2 DAYS

                            //try
                            //{
                            //    MPFOLE_ALL = MPFOLE_D + MPFOLE_N;
                            //}
                            //catch { }

                        }

                        DataTable MPData = GetManPowerByLine_INDirect(txtCostCenter);
                        MPCount_D += Convert.ToInt16(MPData.Rows[0]["MP_D"]);
                        MPCount_N += Convert.ToInt16(MPData.Rows[0]["MP_N"]);


                        //------Actual Work by Line Day,Night
                        SumFOLE_ACTD += GetWorkActByLineDayFOLE_INDirect(txtCostCenter, setDate);
                        SumFOLE_ACTN += GetWorkActByLineNightFOLE_INDirect(txtCostCenter, setDate);

                        //-------OT Req, Actual Day,Night

                        SumOT_ReqD += GetOTReqByLineDayFOLE_INDirect(txtCostCenter, setDate);
                        SumOT_ReqN += GetOTReqByLineNightFOLE_INDirect(txtCostCenter, setDate);
                        SumOT_ActD += GetOTActByLineDayFOLE_INDirect(txtCostCenter, setDate);
                        SumOT_ActN += GetOTActByLineNightFOLE_INDirect(txtCostCenter, setDate);

                        SqlCommand sqlCheck = new SqlCommand();
                        sqlCheck.CommandText = "SELECT * FROM BC_ManPower WHERE ProductType = " +
                       " '" + Txt_Type + "' and Fiscal_year = '" + _Year + "'" +
                           " and Monthly = '" + _Month + "' and Daily ='" + i + "'";
                        DataTable dtCheck = oConBCS.Query(sqlCheck);
                        if (dtCheck.Rows.Count > 0)
                        {

                            FlagInsert = 1;

                        }
                        else
                        {
                            FlagInsert = 0;

                        }

                    }
                    else
                    {
                       
                        DataTable MPData = GetManPowerByLine_INDirect(txtCostCenter);
                        MPCount_D += Convert.ToInt16(MPData.Rows[0]["MP_D"]);
                        MPCount_N += Convert.ToInt16(MPData.Rows[0]["MP_N"]);


                        //------Actual Work by Line Day,Night
                        SumFOLE_ACTD += GetWorkActByLineDayFOLE_INDirect(txtCostCenter, setDate);
                        SumFOLE_ACTN += GetWorkActByLineNightFOLE_INDirect(txtCostCenter, setDate);

                        //-------OT Req, Actual Day,Night

                        SumOT_ReqD += GetOTReqByLineDayFOLE_INDirect(txtCostCenter, setDate);
                        SumOT_ReqN += GetOTReqByLineNightFOLE_INDirect(txtCostCenter, setDate);
                        SumOT_ActD += GetOTActByLineDayFOLE_INDirect(txtCostCenter, setDate);
                        SumOT_ActN += GetOTActByLineNightFOLE_INDirect(txtCostCenter, setDate);

                        SqlCommand sqlCheck = new SqlCommand();
                        sqlCheck.CommandText = "SELECT * FROM BC_ManPower WHERE ProductType = " +
                       " '" + Txt_Type + "' and Fiscal_year = '" + _Year + "'" +
                           " and Monthly = '" + _Month + "' and Daily ='" + i + "'";
                        DataTable dtCheck = oConBCS.Query(sqlCheck);
                        if (dtCheck.Rows.Count > 0)
                        {

                            FlagInsert = 1;

                        }
                        else
                        {
                            FlagInsert = 0;

                        }
                      


                    }


                    if (((setDate <= dateEnd) && (_Type == "INMAN" ||
                      _Type == "INFAC1" ||
                           _Type == "INFAC2" ||
                           _Type == "INFAC3" ||
                            _Type == "INODM" ||
                          _Type == "INQA" ||
                          _Type == "INIE" ||
                          _Type == "INPS")))
                    {


                        //*****  Data for MP, OT Req and Actual                  
                        MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                        //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                        DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);

                        // ** Man Power Attandance
                        mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                        mManPower.Xdate = i;

                        mManPower.SumMPD = MPCount_D;
                        mManPower.SumMPN = MPCount_N;

                        SumMP_ACTD += SumFOLE_ACTD;
                        SumMP_ACTN += SumFOLE_ACTN;

                        mManPower.SumMP_ACTD = SumMP_ACTD;
                        mManPower.SumMP_ACTN = SumMP_ACTN;

                        if (SumMP_ACTD != 0)
                        {
                            mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                        }
                        else
                        {
                            mManPower.SumMP_DIFFD = 0;

                        }

                        if (SumMP_ACTN != 0)
                        {

                            mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                        }
                        else
                        {

                            mManPower.SumMP_DIFFN = 0;
                        }

                        // ** OT Req,ACT

                        mManPower.SumOT_ReqD = SumOT_ReqD;
                        mManPower.SumOT_ReqN = SumOT_ReqN;
                        mManPower.SumOT_ActD = SumOT_ActD;
                        mManPower.SumOT_ActN = SumOT_ActN;
                        oListMP.Add(mManPower);

                        if ((FlagInsert == 1) && (setDate >= EndYesterday) && (setDate <= dateEnd) && (_Type == "INMAN" ||
                            _Type == "INFAC1" ||
                                 _Type == "INFAC2" ||
                                 _Type == "INFAC3" ||
                                  _Type == "INODM" ||
                                _Type == "INQA" ||
                                _Type == "INIE" ||
                                _Type == "INPS"))
                        {

                            SqlCommand UpdateMNOT = new SqlCommand();
                            UpdateMNOT.CommandText = "Update  BC_MANPOWER  " +
                                    " set STD_MPDay ='" + MPCount_D + "',ACT_MPDay ='" + SumMP_ACTD + "' " +
                                    ",STD_MPNight ='" + MPCount_N + "',ACT_MPNight ='" + SumMP_ACTN + "' " +
                                    ",STD_OTDay ='" + MPCount_D + "',REQ_OTDay ='" + SumOT_ReqD + "',ACT_OTDay = '" + SumOT_ActD + "'" +
                                    ",STD_OTNight ='" + MPCount_N + "',REQ_OTNight ='" + SumOT_ReqN + "',ACT_OTNight = '" + SumOT_ActN + "'" +
                                    "where  Fiscal_year ='" + _Year + "' and Monthly ='" + _Month + "' and Daily ='" + i + "' and ProductType ='" + Txt_Type + "'";

                            oConn.SqlExecute(UpdateMNOT, "DBBCS");
                        }
                        else if ((FlagInsert == 0) && (_Type == "INMAN" ||
                            _Type == "INFAC1" ||
                              _Type == "INFAC2" ||
                              _Type == "INFAC3" ||
                              _Type == "INODM" ||
                               _Type == "INQA" ||
                               _Type == "INIE" ||
                                _Type == "INPS"))
                        {

                            SqlCommand InsertMNOT = new SqlCommand();

                            InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                                ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                                ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                                " VALUES ('" + _Year + "','" + _Month + "','" + i + "','" + Txt_Type + "' " +
                                ",'" + MPCount_D + "','" + SumMP_ACTD + "' " +
                                ",'" + MPCount_N + "','" + SumMP_ACTN + "' " +
                                ",'" + MPCount_D + "','" + SumOT_ReqD + "','" + SumOT_ActD + "' " +
                                ",'" + MPCount_N + "','" + SumOT_ReqN + "','" + SumOT_ActN + "')";
                            //}           



                            oConn.SqlExecute(InsertMNOT, "DBBCS");


                        }
                    }
                    else if (((setDate > dateEnd) && (_Type == "INMAN" ||
                   _Type == "INFAC1" ||
                        _Type == "INFAC2" ||
                        _Type == "INFAC3" ||
                         _Type == "INODM" ||
                       _Type == "INQA" ||
                       _Type == "INIE" ||
                       _Type == "INPS")))
                    {
                        //*****  Data for MP, OT Req and Actual                  
                        MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                        //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                        DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);

                        // ** Man Power Attandance
                        mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                        mManPower.Xdate = i;

                        mManPower.SumMPD = 0;
                        mManPower.SumMPN = 0;

                        SumMP_ACTD += 0;
                        SumMP_ACTN += 0;

                        mManPower.SumMP_ACTD = 0;
                        mManPower.SumMP_ACTN = 0;
                        mManPower.SumMP_DIFFD = 0;
                        mManPower.SumMP_DIFFN = 0;

                        // ** OT Req,ACT

                        mManPower.SumOT_ReqD = 0;
                        mManPower.SumOT_ReqN = 0;
                        mManPower.SumOT_ActD = 0;
                        mManPower.SumOT_ActN = 0;
                        oListMP.Add(mManPower);

                    }

                    MPCount_D = 0;
                    MPCount_N = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;

                    SumMP_ACTN = 0;
                    SumOT_ReqD = 0;
                    SumOT_ReqN = 0;
                    SumOT_ActD = 0;
                    SumOT_ActN = 0;
                    MPFOLE_ALL = 0;

                    SumMP_ACTN = 0;
                    SumOT_ActD = 0;
                    SumOT_ActN = 0;
                    SUMMPD = 0;
                    SUMMPN = 0;
                    SUMOT_REQNN = 0;
                    SUMOT_REQDD = 0;
                    SUMOT_ACTD = 0;
                    SUMOT_ACTN = 0;
                    MPFOLE_D = 0;
                    MPFOLE_N = 0;
                    LECount_D = 0;
                    LECount_N = 0;
                    FOCount_D = 0;
                    FOCount_N = 0;
                    SumFOLE_ACTD = 0;
                    SumFOLE_ACTN = 0;
                    FlagInsert = 1;


                    //  }
                }
            }
            else
            {

                //------------------Not have data for  OT Req --------------------//

                int Xdate = 0;
                int Yester = 0;
                int SUMOT_REQD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
                int SUMOT_REQN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
                int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
                int SUMMP_SHIFT = 0, SUMACT_MP = 0;
                //int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;

                for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                {


                    foreach (DataRow item in dtMNOT.Rows)
                    {

                        if (i == Convert.ToInt16(item["Daily"].ToString()))
                        {
                            // ** Man Power Attandance
                            DatetoDay = i + ":" + setDate.DayOfWeek.ToString().Substring(0, 3);
                            Xdate = i;

                            //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                            //  mManPower.SumMP_STD = SUMACT_MP;
                            MPCount_D = Convert.ToInt16(item["STD_MPDay"].ToString());
                            MPCount_N = Convert.ToInt16(item["STD_MPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());
                            //SumMP_DIFFD = MPCount_D - SumMP_ACTD;
                            //SumMP_DIFFN = MPCount_N - SumMP_ACTN;


                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["REQ_OTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["REQ_OTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["ACT_OTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["ACT_OTNight"].ToString());
                        }
                    }





                    //*****  Data for MP, OT Req and Actual                  
                    MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                    //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                    //    DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);
                    //SUMMP_SHIFT = MPCountALL;
                    //SUMACT_MP = SUMOT_REQD + SUMOT_REQN;


                    // ** Man Power Attandance
                    mManPower.DatetoDay = DatetoDay;
                    mManPower.Xdate = Xdate;

                    //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                    //  mManPower.SumMP_STD = SUMACT_MP;
                    //MPCount_D += MPFOLE_D;
                    //MPCount_N += MPFOLE_N;


                    mManPower.SumMPD = MPCount_D;
                    mManPower.SumMPN = MPCount_N;

                    //SumMP_ACTD += MPFOLE_D;
                    //SumMP_ACTN += MPFOLE_N;

                    mManPower.SumMP_ACTD = SumMP_ACTD;
                    mManPower.SumMP_ACTN = SumMP_ACTN;

                    if (SumMP_ACTD != 0)
                    {
                        mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                    }
                    else
                    {
                        mManPower.SumMP_DIFFD = 0;

                    }

                    if (SumMP_ACTN != 0)
                    {

                        mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                    }
                    else
                    {

                        mManPower.SumMP_DIFFN = 0;
                    }



                    // ** OT Req,ACT

                    //SumOT_ReqD += SUMOT_REQD;
                    //SumOT_ReqN += SUMOT_REQN;
                    //SumOT_ActD += SUMMPD;
                    //SumOT_ActN += SUMMPN;

                    mManPower.SumOT_ReqD = SumOT_ReqD;
                    mManPower.SumOT_ReqN = SumOT_ReqN;
                    mManPower.SumOT_ActD = SumOT_ActD;
                    mManPower.SumOT_ActN = SumOT_ActN;



                    //     mManPower.SumMPH = oItemMPP.SumMPH;
                    //mManPower.SumMP = SUMOT_ACTN + SUMOT_ACTD;





                    oListMP.Add(mManPower);

                }

            }

        }
        else
        {

            //------------------ Man-Power Daily for New Record or Erase Record to Insert---------------//

            int idxMP = 0;
            //--------------- Get Employee working Time ---------------------
            DataTable dtempWorkingTime = new DataTable();

            int SUMMPD = 0, DOT1 = 0, DOT15 = 0, DOT2 = 0, DOT3 = 0, SDOT1 = 0, SDOT15 = 0, SDOT2 = 0, SDOT3 = 0;
            int SUMMPN = 0, HOT1 = 0, HOT15 = 0, HOT2 = 0, HOT3 = 0, SHOT1 = 0, SHOT15 = 0, SHOT2 = 0, SHOT3 = 0;
            int SUMMPH = 0, NOT1 = 0, NOT15 = 0, NOT2 = 0, NOT3 = 0, SNOT1 = 0, SNOT15 = 0, SNOT2 = 0, SNOT3 = 0;



            DataTable dtWorkTime = new DataTable();
            dtWorkTime.Columns.Add("Code", typeof(string));
            dtWorkTime.Columns.Add("WorkDate", typeof(string));
            dtWorkTime.Columns.Add("POSIT", typeof(string));
            dtWorkTime.Columns.Add("OT1", typeof(int));
            dtWorkTime.Columns.Add("OT15", typeof(int));
            dtWorkTime.Columns.Add("OT2", typeof(int));
            dtWorkTime.Columns.Add("OT3", typeof(int));
            dtWorkTime.Columns.Add("SUMOT", typeof(int));
            dtWorkTime.Columns.Add("REQDOT1", typeof(int));
            dtWorkTime.Columns.Add("REQDOT15", typeof(int));
            dtWorkTime.Columns.Add("REQDOT2", typeof(int));
            dtWorkTime.Columns.Add("REQDOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMDOTREQ", typeof(int));
            dtWorkTime.Columns.Add("SUMMPReqD", typeof(int));
            dtWorkTime.Columns.Add("DOT1", typeof(int));
            dtWorkTime.Columns.Add("DOT15", typeof(int));
            dtWorkTime.Columns.Add("DOT2", typeof(int));
            dtWorkTime.Columns.Add("DOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMDOT", typeof(int));
            dtWorkTime.Columns.Add("SUMMPD", typeof(int));

            dtWorkTime.Columns.Add("REQNOT1", typeof(int));
            dtWorkTime.Columns.Add("REQNOT15", typeof(int));
            dtWorkTime.Columns.Add("REQNOT2", typeof(int));
            dtWorkTime.Columns.Add("REQNOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMNOTREQ", typeof(int));
            dtWorkTime.Columns.Add("SUMMPReqN", typeof(int));
            dtWorkTime.Columns.Add("NOT1", typeof(int));
            dtWorkTime.Columns.Add("NOT15", typeof(int));
            dtWorkTime.Columns.Add("NOT2", typeof(int));
            dtWorkTime.Columns.Add("NOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMNOT", typeof(int));
            dtWorkTime.Columns.Add("SUMMPN", typeof(int));

            dtWorkTime.Columns.Add("REQHOT1", typeof(int));
            dtWorkTime.Columns.Add("REQHOT15", typeof(int));
            dtWorkTime.Columns.Add("REQHOT2", typeof(int));
            dtWorkTime.Columns.Add("REQHOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMHOTREQ", typeof(int));
            dtWorkTime.Columns.Add("SUMMPReqH", typeof(int));
            dtWorkTime.Columns.Add("HOT1", typeof(int));
            dtWorkTime.Columns.Add("HOT15", typeof(int));
            dtWorkTime.Columns.Add("HOT2", typeof(int));
            dtWorkTime.Columns.Add("HOT3", typeof(int));
            dtWorkTime.Columns.Add("SUMHOT", typeof(int));
            dtWorkTime.Columns.Add("SUMMPH", typeof(int));


            //--------------- Get Employee working Time ---------------------
            //int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
            int FlagUdate = 0;
            //int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;
            //string DatetoDay = "";
            int Xdate = 0;
            int Yester = 0;
            int SUMOT_REQDD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
            int SUMOT_REQNN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
            int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
            int SUMMP_SHIFT = 0, SUMACT_MP = 0;
            //int MPFOLE_ALL = 0, MPFOLE_D = 0, MPFOLE_N = 0;

            for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
            {

                if (i >= 2)
                {
                    Yester = i - 1;
                    setyesterday = new DateTime(DateTime.Now.Year, setDate.Month, Yester);

                }
                setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);

                //----------------- Fillter Working Time -------------
                bool Working = false;

                sql.CommandText = "SELECT e.Posit,WorkShift,WorkType,otr.OTFROM ,[WCode],[WDate],[WTime],[WDoor],es.[WType],LTRIM(DATEDIFF(MINUTE, 0, otr.OT1)) as OT1,LTRIM(DATEDIFF(MINUTE, 0, otr.OT15)) as OT15 " +
  ",LTRIM(DATEDIFF(MINUTE, 0, otr.OT2)) as OT2,LTRIM(DATEDIFF(MINUTE, 0, otr.OT3)) as OT3 " +
  " FROM [dbDCI].[dbo].[EmployeeTimeStamp] es " +
  " LEFT JOIN [dbDCI].[dbo].[Employee] e ON es.WCode = e.CODE " +
  " LEFT JOIN [dbDCI].[dbo].[EmployeeWorkingTime] wt ON es.WCode = wt.Code " +
  " LEFT JOIN [dbDCI].[dbo].[EMP_OTRQ] otr ON es.WCode = otr.CODE AND es.WDate = otr.ODATE " +
  " WHERE WDate >= '" + setDate.ToString("yyyy-MM-dd") + "' AND WDate <= '" + setDate.ToString("yyyy-MM-dd") + "' AND es.WType = 'O' " +
  " And OTFROM != ''" +
  "	AND CONVERT(DATE, wt.SystemOUT) = WDate " +
" and (CostCenter =  " + txtCostCenter + " )" +
                    //   " And  ( " + txtAndon + "')" +
  " order by WDate  desc";


                DataTable dtt = oConn.SqlGet(sql, "DBDCI");
                if (dtt.Rows.Count > 0)
                {

                    //DataRow _row = dtWorkTime.NewRow();
                    //foreach (DataRow item in dtt.Rows)
                    //{

                    //    _row["Code"] = item["WCode"].ToString();
                    //    _row["WorkDate"] = Convert.ToDateTime(item["WDate"].ToString()).ToString("yyyy-MM-dd");
                    //    _row["POSIT"] = item["Posit"].ToString();


                    //    //-------------------- ActWork, OT REQ,ACT LE-FO -----------------------                                    
                    //    //if ((item["Posit"].ToString() == "LE") || (item["Posit"].ToString() == "FO"))
                    //    //{

                    //    if (item["WorkShift"].ToString() == "D")
                    //    {

                    //        if ((item["OTFROM"].ToString() != "06:05") && (item["OTFROM"].ToString() != "20:00"))
                    //        {

                    //            SUMOT_REQDD += 1;

                    //            if (item["OT1"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                    //                {
                    //                    REQDOT1 += Convert.ToInt16(item["OT1"]);
                    //                    SREQDOT1 += 1;
                    //                }
                    //            }
                    //            if (item["OT15"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                    //                {
                    //                    REQDOT15 += Convert.ToInt16(item["OT15"]);
                    //                    SREQDOT15 += 1;
                    //                }
                    //            }
                    //            if (item["OT2"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                    //                {
                    //                    REQDOT2 += Convert.ToInt16(item["OT2"]);
                    //                    SREQDOT2 += 1;
                    //                }
                    //            }
                    //            if (item["OT3"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                    //                {
                    //                    REQDOT3 += Convert.ToInt16(item["OT3"]);
                    //                    SREQDOT3 += 1;
                    //                }
                    //            }

                    //            if (SREQDOT1 != 0 || SREQDOT15 != 0 || SREQDOT2 != 0 || SREQDOT3 != 0)
                    //            {
                    //                SUMOT_ACTD += 1;
                    //                SREQDOT1 = 0;
                    //                SREQDOT15 = 0;
                    //                SREQDOT2 = 0;
                    //                SREQDOT3 = 0;
                    //            }
                    //        }
                    //        else
                    //        {
                    //            SUMOT_REQDD += 1;

                    //            if (item["OT1"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                    //                {
                    //                    DOT1 += Convert.ToInt16(item["OT1"]);
                    //                    SDOT1 += 1;
                    //                }
                    //            }
                    //            if (item["OT15"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                    //                {
                    //                    DOT15 += Convert.ToInt16(item["OT15"]);
                    //                    SDOT15 += 1;
                    //                }
                    //            }
                    //            if (item["OT2"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                    //                {
                    //                    DOT2 += Convert.ToInt16(item["OT2"]);
                    //                    SDOT2 += 1;
                    //                }
                    //            }
                    //            if (item["OT3"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                    //                {
                    //                    DOT3 += Convert.ToInt16(item["OT3"]);
                    //                    SDOT3 += 1;
                    //                }
                    //            }

                    //            if (SDOT1 != 0 || SDOT15 != 0 || SDOT2 != 0 || SDOT3 != 0)
                    //            {
                    //                SUMMPD += 1;
                    //                SDOT1 = 0;
                    //                SDOT15 = 0;
                    //                SDOT2 = 0;
                    //                SDOT3 = 0;
                    //            }

                    //        }

                    //    }
                    //    else if (item["WorkShift"].ToString() == "N")
                    //    {
                    //        if ((item["OTFROM"].ToString() == "06:05") || (item["OTFROM"].ToString() == "20:00"))
                    //        {
                    //            SUMOT_REQNN += 1;
                    //            if (item["OT1"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                    //                {
                    //                    REQNOT1 += Convert.ToInt16(item["OT1"]);
                    //                    SREQNOT1 += 1;
                    //                }
                    //            }
                    //            if (item["OT15"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                    //                {
                    //                    REQNOT15 += Convert.ToInt16(item["OT15"]);
                    //                    SREQNOT15 += 1;
                    //                }
                    //            }
                    //            if (item["OT2"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                    //                {
                    //                    REQNOT2 += Convert.ToInt16(item["OT2"]);
                    //                    SREQNOT2 += 1;
                    //                }
                    //            }
                    //            if (item["OT3"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                    //                {
                    //                    REQNOT3 += Convert.ToInt16(item["OT3"]);
                    //                    SREQNOT3 += 1;
                    //                }
                    //            }
                    //            if (SREQNOT1 != 0 || SREQNOT15 != 0 || SREQNOT2 != 0 || SREQNOT3 != 0)
                    //            {
                    //                SUMOT_ACTN += 1;
                    //                SREQNOT1 = 0;
                    //                SREQNOT15 = 0;
                    //                SREQNOT2 = 0;
                    //                SREQNOT3 = 0;
                    //            }
                    //        }
                    //        else
                    //        {

                    //            SUMOT_REQNN += 1;
                    //            if (item["OT1"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                    //                {
                    //                    NOT1 += Convert.ToInt16(item["OT1"]);
                    //                    SNOT1 += 1;
                    //                }
                    //            }
                    //            if (item["OT15"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                    //                {
                    //                    NOT15 += Convert.ToInt16(item["OT15"]);
                    //                    SNOT15 += 1;
                    //                }
                    //            }
                    //            if (item["OT2"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                    //                {
                    //                    NOT2 += Convert.ToInt16(item["OT2"]);
                    //                    SNOT2 += 1;
                    //                }
                    //            }
                    //            if (item["OT3"].ToString() != "")
                    //            {
                    //                if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                    //                {
                    //                    NOT3 += Convert.ToInt16(item["OT3"]);
                    //                    SNOT3 += 1;
                    //                }
                    //            }
                    //            if (SNOT1 != 0 || SNOT15 != 0 || SNOT2 != 0 || SNOT3 != 0)
                    //            {
                    //                SUMMPN += 1;
                    //                SNOT1 = 0;
                    //                SNOT15 = 0;
                    //                SNOT2 = 0;
                    //                SNOT3 = 0;
                    //            }
                    //        }
                    //    }
                    //    else if (item["WorkType"].ToString() == "H")
                    //    {
                    //        if (item["OT1"].ToString() != "")
                    //        {
                    //            if (Convert.ToInt16(item["OT1"].ToString()) != 0)
                    //            {
                    //                HOT1 += Convert.ToInt16(item["OT1"]);
                    //                SHOT1 += 1;
                    //            }
                    //        }
                    //        if (item["OT15"].ToString() != "")
                    //        {
                    //            if (Convert.ToInt16(item["OT15"].ToString()) != 0)
                    //            {
                    //                HOT15 += Convert.ToInt16(item["OT15"]);
                    //                SHOT15 += 1;
                    //            }
                    //        }
                    //        if (item["OT2"].ToString() != "")
                    //        {
                    //            if (Convert.ToInt16(item["OT2"].ToString()) != 0)
                    //            {
                    //                HOT2 += Convert.ToInt16(item["OT2"]);
                    //                SHOT2 += 1;
                    //            }
                    //        }
                    //        if (item["OT3"].ToString() != "")
                    //        {
                    //            if (Convert.ToInt16(item["OT3"].ToString()) != 0)
                    //            {
                    //                HOT3 += Convert.ToInt16(item["OT3"]);
                    //                SHOT3 += 1;
                    //            }
                    //        }
                    //        if (SHOT1 != 0 || SHOT15 != 0 || SHOT2 != 0 || SHOT3 != 0)
                    //        {
                    //            SUMMPH += 1;
                    //            SHOT1 = 0;
                    //            SHOT15 = 0;
                    //            SHOT2 = 0;
                    //            SHOT3 = 0;
                    //        }
                    //    }



                    //    string dataShift = "";
                    //    DataTable dtEMCL = new DataTable();
                    //    string StrEMCL = "SELECT YM, CODE, STSS, STSO " +
                    //        " FROM EMP_EMCL " +
                    //        " WHERE YM =@YM AND CODE=@CODE ";
                    //    SqlCommand cmdEMCL = new SqlCommand();
                    //    cmdEMCL.CommandText = StrEMCL;
                    //    cmdEMCL.Parameters.Add(new SqlParameter("YM", DateTime.Now.ToString("yyyyMM")));
                    //    cmdEMCL.Parameters.Add(new SqlParameter("CODE", item["WCode"].ToString()));
                    //    cmdEMCL.CommandTimeout = 180;
                    //    dtEMCL = oConDCI.Query(cmdEMCL);

                    //    if (dtEMCL.Rows.Count > 0)
                    //    {
                    //        if (DateTime.Now.Day < 5)
                    //        {
                    //            for (int k = DateTime.Now.Day; k <= 27; k++)
                    //            {
                    //                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(k - 1, 1);
                    //                if (dataShift == "T" || dataShift == "H")
                    //                { }
                    //                else { break; }
                    //            }
                    //        }
                    //        else if (DateTime.Now.Day > 20)
                    //        {
                    //            for (int k = DateTime.Now.Day; k >= 5; k--)
                    //            {
                    //                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(k - 1, 1);
                    //                if (dataShift == "T" || dataShift == "H")
                    //                { }
                    //                else { break; }
                    //            }
                    //        }
                    //        else
                    //        {
                    //            for (int k = DateTime.Now.Day; k <= 27; k++)
                    //            {
                    //                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(k - 1, 1);
                    //                if (dataShift == "T" || dataShift == "H")
                    //                { }
                    //                else { break; }
                    //            }
                    //        }
                    //    }//end if emcl data



                    //    if (dataShift == "D")
                    //    {
                    //        MPFOLE_D++;
                    //    }
                    //    else if (dataShift == "N")
                    //    {
                    //        MPFOLE_N++;
                    //    }

                    //    MPFOLE_ALL = MPFOLE_D + MPFOLE_N;


                    //    //  SumMP_ACTD += MPFOLE_D;


                    //    // SumMP_ACTN += MPFOLE_N;


                    //    //    SumOT_ReqD += SUMOT_REQD;


                    //    //  SumOT_ReqN += SUMOT_REQN;


                    //    //SumOT_ActD += SUMMPD;


                    //    //SumOT_ActN += SUMMPN;



                    //    // }

                    //    //try
                    //    //{
                    //    //    MPFOLE_ALL = MPFOLE_D + MPFOLE_N;
                    //    //}
                    //    //catch { }

                    //}

                    // }


                    //------Actual ManPower by Line Day,Night
                    DataTable MPData = GetManPowerByLine_INDirect(txtCostCenter);
                    MPCount_D += Convert.ToInt16(MPData.Rows[0]["MP_D"]);
                    MPCount_N += Convert.ToInt16(MPData.Rows[0]["MP_N"]);

                    //------Actual Work by Line Day,Night
                    SumFOLE_ACTD += GetWorkActByLineDayFOLE_INDirect(txtCostCenter, setDate);
                    SumFOLE_ACTN += GetWorkActByLineNightFOLE_INDirect(txtCostCenter, setDate);

                    //-------OT Req, Actual Day,Night

                    SumOT_ReqD += GetOTReqByLineDayFOLE_INDirect(txtCostCenter, setDate);
                    SumOT_ReqN += GetOTReqByLineNightFOLE_INDirect(txtCostCenter, setDate);
                    SumOT_ActD += GetOTActByLineDayFOLE_INDirect(txtCostCenter, setDate);
                    SumOT_ActN += GetOTActByLineNightFOLE_INDirect(txtCostCenter, setDate);

                }
                else
                {

                    //SUMMP_SHIFT = MPCountALL;
                    //SUMACT_MP = SUMOT_REQD + SUMOT_REQN;
                    DataTable MPData = GetManPowerByLine_INDirect(txtCostCenter);
                    MPCount_D += Convert.ToInt16(MPData.Rows[0]["MP_D"]);
                    MPCount_N += Convert.ToInt16(MPData.Rows[0]["MP_N"]);



                    //------Actual Work by Line Day,Night
                    SumFOLE_ACTD += GetWorkActByLineDayFOLE_INDirect(txtCostCenter, setDate);
                    SumFOLE_ACTN += GetWorkActByLineNightFOLE_INDirect(txtCostCenter, setDate);

                    //-------OT Req, Actual Day,Night

                    SumOT_ReqD += GetOTReqByLineDayFOLE_INDirect(txtCostCenter, setDate);
                    SumOT_ReqN += GetOTReqByLineNightFOLE_INDirect(txtCostCenter, setDate);
                    SumOT_ActD += GetOTActByLineDayFOLE_INDirect(txtCostCenter, setDate);
                    SumOT_ActN += GetOTActByLineNightFOLE_INDirect(txtCostCenter, setDate);



                    foreach (DataRow item in dtMNOT.Rows)
                    {

                        if (i == Convert.ToInt16(item["Daily"].ToString()))
                        {
                            // ** Man Power Attandance
                            DatetoDay = i + ":" + setDate.DayOfWeek.ToString().Substring(0, 3);
                            Xdate = i;
                            SumMP_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());

                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["REQ_OTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["REQ_OTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["ACT_OTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["ACT_OTNight"].ToString());
                        }
                    }


                }




                //*****  Data for MP, OT Req and Actual                  
                MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);
                //SUMMP_SHIFT = MPCountALL;
                //SUMACT_MP = SUMOT_REQD + SUMOT_REQN;


                // ** Man Power Attandance
                mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                mManPower.Xdate = i;

                //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                //  mManPower.SumMP_STD = SUMACT_MP;
                MPCount_D += LECount_D + FOCount_D;
                MPCount_N += LECount_N + FOCount_N;


                mManPower.SumMPD = MPCount_D;
                mManPower.SumMPN = MPCount_N;

                SumMP_ACTD += SumFOLE_ACTD;
                SumMP_ACTN += SumFOLE_ACTN;

                mManPower.SumMP_ACTD = SumMP_ACTD;
                mManPower.SumMP_ACTN = SumMP_ACTN;

                if (SumMP_ACTD != 0)
                {
                    mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                }
                else
                {
                    mManPower.SumMP_DIFFD = 0;

                }

                if (SumMP_ACTN != 0)
                {

                    mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                }
                else
                {

                    mManPower.SumMP_DIFFN = 0;
                }



                // ** OT Req,ACT

                mManPower.SumOT_ReqD = SumOT_ReqD;
                mManPower.SumOT_ReqN = SumOT_ReqN;
                mManPower.SumOT_ActD = SumOT_ActD;
                mManPower.SumOT_ActN = SumOT_ActN;


                oListMP.Add(mManPower);



                //if (ii == MonthSelect)
                //{
                // *** Insert  Man Power Daily

                if (_Type == "INMAN" ||
                    _Type == "INFAC1" ||
                            _Type == "INFAC2" ||
                            _Type == "INFAC3" ||
                            _Type == "INODM" ||
                             _Type == "INQA" ||
                             _Type == "INIE" ||
                              _Type == "INPS")
                {
                    SqlCommand InsertMNOT = new SqlCommand();

                    InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                        ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                        ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                        " VALUES ('" + _Year + "','" + _Month + "','" + i + "','" + Txt_Type + "' " +
                        ",'" + MPCount_D + "','" + SumMP_ACTD + "' " +
                        ",'" + MPCount_N + "','" + SumMP_ACTN + "' " +
                        ",'" + MPCount_D + "','" + SumOT_ReqD + "','" + SumOT_ActD + "' " +
                        ",'" + MPCount_N + "','" + SumOT_ReqN + "','" + SumOT_ActN + "')";
                    //}           
                    oConn.SqlExecute(InsertMNOT, "DBBCS");
                }


                MPCount_D = 0;
                MPCount_N = 0;
                SumMP_ACTD = 0;
                SumMP_ACTN = 0;

                SumMP_ACTN = 0;
                SumOT_ReqD = 0;
                SumOT_ReqN = 0;
                SumOT_ActD = 0;
                SumOT_ActN = 0;
                MPFOLE_ALL = 0;

                SumMP_ACTN = 0;
                SumOT_ActD = 0;
                SumOT_ActN = 0;
                SUMMPD = 0;
                SUMMPN = 0;
                SUMOT_REQNN = 0;
                SUMOT_REQDD = 0;
                SUMOT_ACTD = 0;
                SUMOT_ACTN = 0;
                MPFOLE_D = 0;
                MPFOLE_N = 0;
                LECount_D = 0;
                LECount_N = 0;
                FOCount_D = 0;
                FOCount_N = 0;
                SumFOLE_ACTD = 0;
                SumFOLE_ACTN = 0;
            }

        }


        //   }




        PrdMonth = 0;
        SumPrdMonth = 0;
        accuOP1 = 0;
        accuOP15 = 0;
        accuOP2 = 0;
        accuOP3 = 0;

        accuLE1 = 0;
        accuLE15 = 0;
        accuLE2 = 0;
        accuLE3 = 0;

        accuFO1 = 0;
        accuFO15 = 0;
        accuFO2 = 0;
        accuFO3 = 0;

        accuSU1 = 0;
        accuSU15 = 0;
        accuSU2 = 0;
        accuSU3 = 0;

        CountMPOTREQD = 0;
        CountMPOTREQN = 0;
        CountMPN = 0;
        CountMPH = 0;
        SumMP = 0;


        return oListMP;
    }
    public List<MMPInfo.MPAllChartInfo> GetChartMPALL(int _Month, DateTime _DataDate, string _Type)
    {

        List<MMPInfo.MPAllChartInfo> oListMP = new List<MMPInfo.MPAllChartInfo>();


        string[] ArryPrd = { "1YC", "2YC", "SCR", "1YC/3", "ODM" };
        //string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702", "4310", "4320", "4510", "4720", "8120" };
        string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702" };
        string[] ArryPrdFac1 = { "1101", "1102" };
        string[] ArryPrdFac1M = { "1101" };
        string[] ArryPrdFac1A = { "1102" };
        string[] ArryPrdFac2 = { "1201", "1202", "1301", "1302", "1401", "1402" };
        string[] ArryPrdFac2M = { "1201" };
        string[] ArryPrdFac2A = { "1202" };
        string[] ArryPrdFac2Mo = { "1401" };
        string[] ArryPrdFac2MoA = { "1402" };
        string[] ArryPrdSCA = { "1301", "1302" };
        string[] ArryPrdSCRM = { "1301" };
        string[] ArryPrdSCRA = { "1302" };
        string[] ArryPrdFac3 = { "1701", "1702" };
        string[] ArryPrdFac3M = { "1701" };
        string[] ArryPrdFac3A = { "1702" };
        string[] ArryPrdODM = { "1501" };

        string[] ArryPeriod = { "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod1 = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod2 = { "PRD_JAN", "PRD_FEB", "PRD_MAR", "PRD_APR", "PRD_MAY", "PRD_JUN", "PRD_JUL", "PRD_AUG", "PRD_SEP", "PRD_OCT", "PRD_NOV", "PRD_DEC" };
        int[] ArryMonth = { 4, 5, 6, 7, 8, 9, 10, 11, 12 };
        int[] ArryMonth1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };


        string pAccGroup = "EXP";
        string pBudgetType = "DI";
        string pYear = _DataDate.ToString("yyyy");
        string pMonth = _DataDate.ToString("MM");
        DateTime _LastYear = new DateTime();
        DateTime _Last2Year = new DateTime();
        DateTime _Last3Year = new DateTime();
        _LastYear = _DataDate.AddYears(-1);
        _Last2Year = _DataDate.AddYears(-2);
        _Last3Year = _DataDate.AddYears(-3);
        string pLastYear = _LastYear.ToString("yyyy");
        string pLast2Year = _Last2Year.ToString("yyyy");
        string pLast3Year = _Last3Year.ToString("yyyy");
        string TxtModel = " ";

        #region init



        int[] _PrdActual = new int[12];

        string[] ArrySeires5 = new string[5];
        Decimal[] ArrySeiresValue5 = new Decimal[5];



        #endregion

        string[] ArryLoop = new string[0];
        string ProductType = "";
        string TargetType = "";
        if (_Type == "ALL")
        {
            ArryLoop = ArryPrdALL;
            TargetType = "DCI";
        }


        DateTime strDate = new DateTime(DateTime.Now.Year, _Month, 1, 0, 0, 0);
        DateTime endDate = strDate.AddMonths(1).Date + new TimeSpan(0, 0, 0);

        DateTime strHr = DateTime.Today + new TimeSpan(08, 00, 00);
        DateTime dateEnd = DateTime.Today + new TimeSpan(20, 00, 00);
        DateTime Endtoday = DateTime.Now;


        int MonthSelect = _Month;
        int PrevMonth = _Month - 1;
        int NextMonth = _Month + 1;


        //------------- Create column header OT  -----------------


        DataTable dtBCPD = new DataTable();
        dtBCPD.Columns.Add("Fiscal_year", typeof(string));
        dtBCPD.Columns.Add("ProductType", typeof(string));
        dtBCPD.Columns.Add("PRD_JAN", typeof(string));
        dtBCPD.Columns.Add("PRD_FEB", typeof(string));
        dtBCPD.Columns.Add("PRD_MAR", typeof(string));
        dtBCPD.Columns.Add("PRD_APR", typeof(string));
        dtBCPD.Columns.Add("PRD_MAY", typeof(string));
        dtBCPD.Columns.Add("PRD_JUN", typeof(string));
        dtBCPD.Columns.Add("PRD_JUL", typeof(string));
        dtBCPD.Columns.Add("PRD_AUG", typeof(string));
        dtBCPD.Columns.Add("PRD_SEP", typeof(string));
        dtBCPD.Columns.Add("PRD_OCT", typeof(string));
        dtBCPD.Columns.Add("PRD_NOV", typeof(string));
        dtBCPD.Columns.Add("PRD_DEC", typeof(string));
        DateTime setDate1 = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sqlBCPD = new SqlCommand();
        sqlBCPD.CommandText = "SELECT Fiscal_year " +
            " ,ProductType,PRD_APR,PRD_MAY,PRD_JUN,PRD_JUL,PRD_AUG " +
            " ,PRD_SEP,PRD_OCT,PRD_NOV,PRD_DEC,PRD_JAN,PRD_FEB,PRD_MAR,Total_PRD " +
           " from BC_PRODUCTION " +
           " where [Fiscal_year] = " + setDate1.Year;


        // int LBCSPD = 0;
        double Prd = 0, Prd1 = 0, Prd2 = 0, Prd3 = 0, Prd4 = 0, Prd5 = 0, Prd6 = 0, Prd7 = 0;
        double Prd8 = 0, Prd9 = 0, Prd10 = 0, Prd11 = 0, Prd12 = 0, SumPrd = 0, SumPrdOverAll = 0, PrdMonth = 0, SumPrdMonth = 0;
        DataTable dt1 = oConn.SqlGet(sqlBCPD, "DBBCS");
        foreach (DataRow item in dt1.Rows)
        {
            DataRow _rowBCSPD = dtBCPD.NewRow();
            _rowBCSPD["Fiscal_year"] = item["Fiscal_year"].ToString();
            _rowBCSPD["ProductType"] = item["ProductType"].ToString();
            _rowBCSPD["PRD_JAN"] = item["PRD_JAN"];
            _rowBCSPD["PRD_FEB"] = item["PRD_FEB"];
            _rowBCSPD["PRD_MAR"] = item["PRD_MAR"];
            _rowBCSPD["PRD_APR"] = item["PRD_APR"];
            _rowBCSPD["PRD_MAY"] = item["PRD_MAY"];
            _rowBCSPD["PRD_JUN"] = item["PRD_JUN"];
            _rowBCSPD["PRD_JUL"] = item["PRD_JUL"];
            _rowBCSPD["PRD_AUG"] = item["PRD_AUG"];
            _rowBCSPD["PRD_SEP"] = item["PRD_SEP"];
            _rowBCSPD["PRD_OCT"] = item["PRD_OCT"];
            _rowBCSPD["PRD_NOV"] = item["PRD_NOV"];
            _rowBCSPD["PRD_DEC"] = item["PRD_DEC"];
            dtBCPD.Rows.Add(_rowBCSPD);
        }


        //---------------- Get Employeee of Line --------------
        //DataTable dtEmp = new DataTable();
        //dtEmp.Columns.Add("Fiscal_year", typeof(string));
        //dtEmp.Columns.Add("ProductType", typeof(string));
        //dtEmp.Columns.Add("Monthly", typeof(string));
        //dtEmp.Columns.Add("WType", typeof(string));
        DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sql = new SqlCommand();

        if (_Type == "ALL")
        {

            txtCostCenter = " = " + ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1] +
              " or [COSTCENTER] = " + ArryLoop[2] + " or [COSTCENTER] = " + ArryLoop[3] +
               " or [COSTCENTER] = " + ArryLoop[4] + " or [COSTCENTER] = " + ArryLoop[5] +
               " or [COSTCENTER] = " + ArryLoop[6] + " or [COSTCENTER] = " + ArryLoop[7] +
            " or [COSTCENTER] = " + ArryLoop[8] + " or [COSTCENTER] = " + ArryLoop[9] +
            " or [COSTCENTER] = " + ArryLoop[10];



        }










        /*  foreach (DataRow item in dt.Rows)
          {
              DataRow _rowEmp = dtEmp.NewRow();
              _rowEmp["Code"] = item["CODE"].ToString();
              _rowEmp["Position"] = item["POSIT"].ToString();
              _rowEmp["CostCenter"] = item["COSTCENTER"].ToString();
              _rowEmp["WType"] = item["WTYPE"].ToString();
              dtEmp.Rows.Add(_rowEmp);
          }*/
        //  lbMP.Text = dtEmp.Rows.Count.ToString();
        //---------------- Get Employeee of Line --------------        

        //----------------- Create row content Manpower ------------------

        MMPInfo.MPAllChartInfo oItemMPP = new MMPInfo.MPAllChartInfo();
        int ii = 0;

        double accuOP1 = 0, accuOP15 = 0, accuOP2 = 0, accuOP3 = 0, CountMPOP = 1;
        double accuLE1 = 0, accuLE15 = 0, accuLE2 = 0, accuLE3 = 0, CountMPLE = 1;
        double accuFO1 = 0, accuFO15 = 0, accuFO2 = 0, accuFO3 = 0, CountMPFO = 1;
        double accuSU1 = 0, accuSU15 = 0, accuSU2 = 0, accuSU3 = 0, CountMPSU = 1;
        double CostOverAllSum = 0;
        // double CostOverAll = 0;




        for (ii = 1; ii <= MonthSelect; ii++)
        {
            Prd = 0;
            if (dtBCPD.Rows.Count > 0)
            {

                foreach (DataRow _rowbcpd in dtBCPD.Rows)
                {

                    if (_Type == "FAC2")
                    {
                        if (Convert.ToString(_rowbcpd["ProductType"].ToString()) == "2YC" || Convert.ToString(_rowbcpd["ProductType"].ToString()) == "SCR")
                        {
                            PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                            Prd += PrdMonth;
                            //    SumPrd += Prd;
                        }
                    }
                    else if (_Type == "ALL")
                    {
                        int k = 0;
                        for (k = 1; k <= ArryPrd.Count(); k++)
                        {


                            if (ArryPrd[k - 1] == Convert.ToString(_rowbcpd["ProductType"].ToString()))
                            {
                                if (ArryPrd[k - 1] == "ODM")
                                {
                                    PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                                    PrdMonth = PrdMonth / 20;
                                }
                                else
                                {
                                    PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                                }
                                Prd += PrdMonth;


                            }
                            PrdMonth = 0;
                        }
                    }
                    else

                        if (ProductType == Convert.ToString(_rowbcpd["ProductType"].ToString()))
                        {
                            Prd = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                            // SumPrd += Prd;
                        }


                    // SumPrd += Prd;
                }
                SumPrd += Prd;

            }


            if (ii < MonthSelect)
            {
                setDate = new DateTime(DateTime.Now.Year, ii, 1);

            }
            else if (ii == MonthSelect)
            {
                setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);

            }
            else if (ii > MonthSelect)
            {

                setDate = new DateTime(DateTime.Now.Year, NextMonth, 1);

            }
            int __Month = setDate.Month;


            // Start Check Working Time OT in DB

            //---------------- Get Employeee of Line --------------
            DataTable dtMNOT = new DataTable();
            dtMNOT.Columns.Add("ProductType", typeof(string));
            dtMNOT.Columns.Add("OPOT1", typeof(string));
            dtMNOT.Columns.Add("OPOT15", typeof(string));
            dtMNOT.Columns.Add("OPOT2", typeof(string));
            dtMNOT.Columns.Add("OPOT3", typeof(string));
            dtMNOT.Columns.Add("LEOT1", typeof(string));
            dtMNOT.Columns.Add("LEOT15", typeof(string));
            dtMNOT.Columns.Add("LEOT2", typeof(string));
            dtMNOT.Columns.Add("LEOT3", typeof(string));
            dtMNOT.Columns.Add("FOOT1", typeof(string));
            dtMNOT.Columns.Add("FOOT15", typeof(string));
            dtMNOT.Columns.Add("FOOT2", typeof(string));
            dtMNOT.Columns.Add("FOOT3", typeof(string));
            dtMNOT.Columns.Add("SUOT1", typeof(string));
            dtMNOT.Columns.Add("SUOT15", typeof(string));
            dtMNOT.Columns.Add("SUOT2", typeof(string));
            dtMNOT.Columns.Add("SUOT3", typeof(string));





            // DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


            SqlCommand sqlMNOT = new SqlCommand();


            sqlMNOT.CommandText = " SELECT sum (OPOT1) as OP1,Sum(LEOT1) as LE1, sum(FOOT1) as FO1, sum(SUOT1) as SU1" +
                     ",sum (OPOT15) as OP15,Sum(LEOT15) as LE15, sum(FOOT15) as FO15, sum(SUOT1) as SU15" +
                     ",sum (OPOT2) as OP2,Sum(LEOT2) as LE2, sum(FOOT2) as FO2, sum(SUOT2) as SU2" +
                     ",sum (OPOT3) as OP3,Sum(LEOT3) as LE3, sum(FOOT3) as FO3, sum(SUOT3) as SU3 " +
                      " FROM BC_MANOT " +
                     " where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' and producttype <> 'ALL' and producttype <> 'FAC1A' " +
                     " and producttype <> 'FAC1M'and producttype <> 'FAC2A'" +
                      " and producttype <> 'FAC2M'and producttype <> 'FAC2MOA' " +
                      " and producttype <> 'FAC2MOM'and producttype <> 'FAC3A' " +
                      " and producttype <> 'FAC3M'";



            DataTable dtMOT = oConn.SqlGet(sqlMNOT, "DBBCS");

            if (dtMOT.Rows.Count > 0)
            {
                foreach (DataRow item in dtMOT.Rows)
                {
                    DataRow _rowMNOT = dtMNOT.NewRow();

                    _rowMNOT["OPOT1"] = item["OP1"].ToString();
                    _rowMNOT["OPOT15"] = item["OP15"].ToString();
                    _rowMNOT["OPOT2"] = item["OP2"].ToString();
                    _rowMNOT["OPOT3"] = item["OP3"].ToString();
                    _rowMNOT["LEOT1"] = item["LE1"].ToString();
                    _rowMNOT["LEOT15"] = item["LE15"].ToString();
                    _rowMNOT["LEOT2"] = item["LE2"].ToString();
                    _rowMNOT["LEOT3"] = item["LE3"].ToString();
                    _rowMNOT["FOOT1"] = item["FO1"].ToString();
                    _rowMNOT["FOOT15"] = item["FO15"].ToString();
                    _rowMNOT["FOOT2"] = item["FO2"].ToString();
                    _rowMNOT["FOOT3"] = item["FO3"].ToString();
                    _rowMNOT["SUOT1"] = item["SU1"].ToString();
                    _rowMNOT["SUOT15"] = item["SU15"].ToString();
                    _rowMNOT["SUOT2"] = item["SU2"].ToString();
                    _rowMNOT["SUOT3"] = item["SU3"].ToString();


                    // Operator 
                    if (item["OP1"].ToString() != "")
                    {
                        accuOP1 = Convert.ToDouble(item["OP1"]);
                    }
                    if (item["OP15"].ToString() != "")
                    {
                        accuOP15 = Convert.ToDouble(item["OP15"]);
                    }
                    if (item["OP2"].ToString() != "")
                    {
                        accuOP2 = Convert.ToDouble(item["OP2"]);
                    }
                    if (item["OP3"].ToString() != "")
                    {
                        accuOP3 = Convert.ToDouble(item["OP3"]);
                    }

                    // Leader
                    if (item["LE1"].ToString() != "")
                    {
                        accuLE1 = Convert.ToDouble(item["LE1"]);
                    }
                    if (item["LE15"].ToString() != "")
                    {
                        accuLE15 = Convert.ToDouble(item["LE15"]);
                    }
                    if (item["LE2"].ToString() != "")
                    {
                        accuLE2 = Convert.ToDouble(item["LE2"]);
                    }
                    if (item["LE3"].ToString() != "")
                    {
                        accuLE3 = Convert.ToDouble(item["LE3"]);
                    }

                    // FO
                    if (item["FO1"].ToString() != "")
                    {
                        accuFO1 = Convert.ToDouble(item["FO1"]);
                    }
                    if (item["FO15"].ToString() != "")
                    {
                        accuFO15 = Convert.ToDouble(item["FO15"]);
                    }
                    if (item["FO2"].ToString() != "")
                    {
                        accuFO2 = Convert.ToDouble(item["FO2"]);
                    }
                    if (item["FO3"].ToString() != "")
                    {
                        accuFO3 = Convert.ToDouble(item["FO3"]);
                    }


                    // Su
                    if (item["SU1"].ToString() != "")
                    {
                        accuSU1 = Convert.ToDouble(item["SU1"]);
                    }
                    if (item["SU15"].ToString() != "")
                    {
                        accuSU15 = Convert.ToDouble(item["SU15"]);
                    }
                    if (item["SU2"].ToString() != "")
                    {
                        accuSU2 = Convert.ToDouble(item["SU2"]);
                    }
                    if (item["SU3"].ToString() != "")
                    {
                        accuSU3 = Convert.ToDouble(item["SU3"]);
                    }






                    dtMNOT.Rows.Add(_rowMNOT);
                }

            }





            //   string InsertDD;

            double MPOP = 4, MPLE = 50, MPFO = 90, MPSU = 100;
            double totalOP = 0, totalOPOT1 = 0, totalOPOT15 = 0, totalOPOT2 = 0, totalOPOT3 = 0;
            double totalLE = 0, totalLEOT1 = 0, totalLEOT15 = 0, totalLEOT2 = 0, totalLEOT3 = 0;
            double totalFO = 0, totalFOOT1 = 0, totalFOOT15 = 0, totalFOOT2 = 0, totalFOOT3 = 0;
            double totalSU = 0, totalSUOT1 = 0, totalSUOT15 = 0, totalSUOT2 = 0, totalSUOT3 = 0;
            double TotalOT1 = 0, TotalOT15 = 0, TotalOT2 = 0, TotalOT3 = 0;
            double CostOverall = 0;

            DataTable dtEmp = new DataTable();
            dtEmp.Columns.Add("Fiscal_year", typeof(string));
            dtEmp.Columns.Add("ProductType", typeof(string));
            dtEmp.Columns.Add("Monthly", typeof(string));

            sql.CommandText = "SELECT fiscal_year,Monthly,ProductType from BC_MANOT  " +
                 " where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' and ProductType ='" + _Type + "'";

            DataTable dtCount = oConn.SqlGet(sql, "DBBCS");


            //if (dtCount.Rows.Count > 0)
            //{

            //DataTable dtEmp = new DataTable();
            //dtEmp.Columns.Add("Fiscal_year", typeof(string));
            //dtEmp.Columns.Add("ProductType", typeof(string));
            //dtEmp.Columns.Add("Monthly", typeof(string));


            if (dtCount.Rows.Count > 0)
            {




                //if (dtEmp.Rows.Count > 0)
                //{



                //}



                SqlCommand UpdateMNOT = new SqlCommand();

                UpdateMNOT.CommandText = "Update  BC_MANOT set OPOT1 ='" + accuOP1 + "',OPOT15 ='" + accuOP15 + "' , " +
                                    "OPOT2 ='" + accuOP2 + "',OPOT3 ='" + accuOP3 + "',LEOT1='" + accuLE1 + "' , " +
                                    "LEOT15 ='" + accuLE15 + "',LEOT2='" + accuLE2 + "',LEOT3='" + accuLE3 + "' ," +
                                    "FOOT1='" + accuFO1 + "',FOOT15='" + accuFO15 + "' ,FOOT2='" + accuFO2 + "'," +
                                    "FOOT3='" + accuFO3 + "', " +
                                    " SUOT1='" + accuSU1 + "' ,SUOT15='" + accuSU15 + "' ,SUOT2='" + accuSU2 + "' ,SUOT3='" + accuSU3 + "'" +
                                    "where  Fiscal_year ='" + setDate.ToString("yyyy") + "' and Monthly ='" + ii + "' and ProductType ='" + _Type + "'";

                oConn.SqlExecute(UpdateMNOT, "DBBCS");

            }
            else
            {

                SqlCommand InsertMNOT = new SqlCommand();

                InsertMNOT.CommandText = "Insert into BC_MANOT(Fiscal_year,ProductType,Monthly,OPOT1,OPOT15," +
                                    " OPOT2,OPOT3,LEOT1,LEOT15,LEOT2,LEOT3,FOOT1,FOOT15,FOOT2,FOOT3," +
                                    " SUOT1,SUOT15,SUOT2,SUOT3) " +
                                    "  values ('" + setDate.ToString("yyyy") + "','" + _Type + "' ,'" + ii + "','" + accuOP1 + "'" +
                                    ",'" + accuOP15 + "','" + accuOP2 + "','" + accuOP3 + "'" +
                                    ",'" + accuLE1 + "','" + accuLE15 + "','" + accuLE2 + "','" + accuLE3 + "'" +
                                    ",'" + accuFO1 + "','" + accuFO15 + "','" + accuFO2 + "','" + accuFO3 + "'" +
                                    ",'" + accuSU1 + "','" + accuSU15 + "','" + accuSU2 + "','" + accuSU3 + "')";
                oConn.SqlExecute(InsertMNOT, "DBBCS");


            }


            if (dtMNOT.Rows.Count > 0)
            {
                foreach (DataRow _rowMN in dtMNOT.Rows)
                {
                    //if (_Type == _rowMN["ProductType"].ToString())
                    //{


                    double xx = 0;
                    string Temp;


                    //      CostUnit = String.Format("{0:F2}", ((CostOverall / Prd) * 20));
                    //      AccumCostUnit = String.Format("{0:F2}", ((CostOverAllSum / SumPrd) * 20));

                    // Operator OT1,15,2,3
                    if (_rowMN["OPOT1"].ToString() != "")
                    {

                        xx = Convert.ToDouble(_rowMN["OPOT1"]) / 60;
                        Temp = String.Format("{0:F2}", (xx));
                        totalOPOT1 = Convert.ToDouble(Temp.ToString());

                    }
                    if (_rowMN["OPOT15"].ToString() != "")
                    {
                        xx = Convert.ToDouble(_rowMN["OPOT15"]) / 60;
                        Temp = String.Format("{0:F2}", (xx));
                        totalOPOT15 = Convert.ToDouble(Temp.ToString());
                    }
                    if (_rowMN["OPOT2"].ToString() != "")
                    {
                        xx = Convert.ToDouble(_rowMN["OPOT2"]) / 60;
                        Temp = String.Format("{0:F2}", (xx));
                        totalOPOT2 = Convert.ToDouble(Temp.ToString());
                    }

                    if (_rowMN["OPOT3"].ToString() != "")
                    {
                        xx = Convert.ToDouble(_rowMN["OPOT3"]) / 60;
                        Temp = String.Format("{0:F2}", (xx));
                        totalOPOT3 = Convert.ToDouble(Temp.ToString());
                    }





                    oItemMPP.OPOT1 = totalOPOT1;
                    oItemMPP.OPOT15 = totalOPOT15;
                    oItemMPP.OPOT2 = totalOPOT2;
                    oItemMPP.OPOT3 = totalOPOT3;

                    // Cost OT of Operator Ot1,15,2,3
                    totalOP += (totalOPOT1 * MPLE);
                    totalOP += (totalOPOT15 * (MPLE * 1.5));
                    totalOP += (totalOPOT2 * (MPLE * 2));
                    totalOP += (totalOPOT3 * (MPLE * 3));
                    TotalOT1 = totalOP;
                    //totalLE = totalLEOT1;



                    // Leader OT1,15,2,3

                    if (_rowMN["LEOT1"].ToString() != "")
                    {
                        xx = Convert.ToDouble(_rowMN["LEOT1"]) / 60;
                        Temp = String.Format("{0:F2}", (xx));
                        totalLEOT1 = Convert.ToDouble(Temp.ToString());
                    }
                    if (_rowMN["LEOT15"].ToString() != "")
                    {
                        xx = Convert.ToDouble(_rowMN["LEOT15"]) / 60;
                        Temp = String.Format("{0:F2}", (xx));
                        totalLEOT15 = Convert.ToDouble(Temp.ToString());
                    }
                    if (_rowMN["LEOT2"].ToString() != "")
                    {
                        xx = Convert.ToDouble(_rowMN["LEOT2"]) / 60;
                        Temp = String.Format("{0:F2}", (xx));
                        totalLEOT2 = Convert.ToDouble(Temp.ToString());

                    }

                    if (_rowMN["LEOT3"].ToString() != "")
                    {
                        xx = Convert.ToDouble(_rowMN["LEOT3"]) / 60;
                        Temp = String.Format("{0:F2}", (xx));
                        totalLEOT3 = Convert.ToDouble(Temp.ToString());


                    }






                    oItemMPP.LEOT1 = totalLEOT1;
                    oItemMPP.LEOT15 = totalLEOT15;
                    oItemMPP.LEOT2 = totalLEOT2;
                    oItemMPP.LEOT3 = totalLEOT3;
                    // Cost OT of Leader Ot1,15,2,3
                    totalLE += (totalLEOT1 * MPLE);
                    totalLE += (totalLEOT15 * (MPLE * 1.5));
                    totalLE += (totalLEOT2 * (MPLE * 2));
                    totalLE += (totalLEOT3 * (MPLE * 3));
                    TotalOT15 = totalLE;
                    //totalLE = totalLEOT1;



                    //** Foreman OT1,15,2,3
                    if (_rowMN["FOOT1"].ToString() != "")
                    {
                        xx = Convert.ToDouble(_rowMN["FOOT1"]) / 60;
                        Temp = String.Format("{0:F2}", (xx));
                        totalFOOT1 = Convert.ToDouble(Temp.ToString());

                    }
                    if (_rowMN["FOOT15"].ToString() != "")
                    {
                        xx = Convert.ToDouble(_rowMN["FOOT15"]) / 60;
                        Temp = String.Format("{0:F2}", (xx));
                        totalFOOT15 = Convert.ToDouble(Temp.ToString());

                    }
                    if (_rowMN["FOOT2"].ToString() != "")
                    {
                        xx = Convert.ToDouble(_rowMN["FOOT2"]) / 60;
                        Temp = String.Format("{0:F2}", (xx));
                        totalFOOT2 = Convert.ToDouble(Temp.ToString());

                    }

                    if (_rowMN["FOOT3"].ToString() != "")
                    {
                        xx = Convert.ToDouble(_rowMN["FOOT3"]) / 60;
                        Temp = String.Format("{0:F2}", (xx));
                        totalFOOT3 = Convert.ToDouble(Temp.ToString());

                    }










                    oItemMPP.FOOT1 = totalFOOT1;
                    oItemMPP.FOOT15 = totalFOOT15;
                    oItemMPP.FOOT2 = totalFOOT2;
                    oItemMPP.FOOT3 = totalFOOT3;
                    // ** Cost OT of Foreman Ot1,15,2,3
                    totalFO += (totalFOOT1 * MPFO);
                    totalFO += (totalFOOT15 * (MPFO * 1.5));
                    totalFO += (totalFOOT2 * (MPFO * 2));
                    totalFO += (totalFOOT3 * (MPFO * 3));
                    TotalOT2 = totalFO;
                    //totalFO = totalFOOT1;

                    if (_rowMN["SUOT1"].ToString() != "")
                    {
                        xx = Convert.ToDouble(_rowMN["SUOT1"]) / 60;
                        Temp = String.Format("{0:F2}", (xx));
                        totalSUOT1 = Convert.ToDouble(Temp.ToString());

                    }
                    if (_rowMN["SUOT15"].ToString() != "")
                    {
                        xx = Convert.ToDouble(_rowMN["SUOT15"]) / 60;
                        Temp = String.Format("{0:F2}", (xx));
                        totalSUOT15 = Convert.ToDouble(Temp.ToString());

                    }
                    if (_rowMN["SUOT2"].ToString() != "")
                    {
                        xx = Convert.ToDouble(_rowMN["SUOT2"]) / 60;
                        Temp = String.Format("{0:F2}", (xx));
                        totalSUOT2 = Convert.ToDouble(Temp.ToString());


                    }

                    if (_rowMN["SUOT3"].ToString() != "")
                    {
                        xx = Convert.ToDouble(_rowMN["SUOT3"]) / 60;
                        Temp = String.Format("{0:F2}", (xx));
                        totalSUOT3 = Convert.ToDouble(Temp.ToString());

                    }





                    totalSU += (totalSUOT1 * MPSU);
                    totalSU += (totalSUOT15 * (MPSU * 1.5));
                    totalSU += (totalSUOT2 * (MPSU * 2));
                    totalSU += (totalSUOT3 * (MPSU * 3));
                    TotalOT3 = totalSU;
                    //totalSU = totalSUOT1;


                    oItemMPP.SUPosition = "SU";

                    oItemMPP.SUOT1 = totalSUOT1;
                    oItemMPP.SUOT15 = totalSUOT15;
                    oItemMPP.SUOT2 = totalSUOT2;
                    oItemMPP.SUOT3 = totalSUOT3;






                    //}
                }
            }


            //Calculate Cost/Unit and Accum Cost/Unit

            double CostUnitch = 0, AccumCostUnitch = 0;


            CostOverall = totalOP + totalLE + totalFO + totalSU;

            CostOverAllSum += CostOverall;


            if ((Prd != 0) && (SumPrd != 0))
            {
                string CostUnit, AccumCostUnit;
                if (CostOverall != CostOverAllSum)
                {
                    if (_Type == "ODM")
                    {
                        CostUnit = String.Format("{0:F2}", ((CostOverall / Prd) * 20));
                        AccumCostUnit = String.Format("{0:F2}", ((CostOverAllSum / SumPrd) * 20));
                    }
                    else
                    {
                        CostUnit = String.Format("{0:F2}", (CostOverall / Prd));
                        AccumCostUnit = String.Format("{0:F2}", (CostOverAllSum / SumPrd));
                    }
                }
                else
                {
                    if (_Type == "ODM")
                    {
                        CostUnit = String.Format("{0:F2}", ((CostOverall / Prd) * 20));
                        AccumCostUnit = String.Format("{0:F2}", ((CostOverAllSum / Prd) * 20));
                    }
                    else
                    {
                        CostUnit = String.Format("{0:F2}", (CostOverall / Prd));
                        AccumCostUnit = String.Format("{0:F2}", (CostOverAllSum / Prd));
                    }
                }

                if (_Type == "ODM")
                {
                    CostUnitch = Convert.ToDouble(CostUnit.ToString());
                    AccumCostUnitch = Convert.ToDouble(AccumCostUnit.ToString());

                }
                else
                {
                    CostUnitch = Convert.ToDouble(CostUnit.ToString());
                    AccumCostUnitch = Convert.ToDouble(AccumCostUnit.ToString());
                }

            }

            //    //CostUnit = Convert.ToInt32(CostOverall / Prd);
            //    //AccumCostUnit = Convert.ToInt32(CostOverAllSum / SumPrd);

            //}

            int ix = 0;
            //foreach (string __Month in ArryPeriod)
            //{
            // add data 
            MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();



            if ((__Month == 4) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;

                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 5) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 6) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 7) && (Prd != 0) && (SumPrd != 0))
            {

                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if ((__Month == 8) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if ((__Month == 9) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if ((__Month == 10) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 11) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if ((__Month == 12) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 1) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }
            else if ((__Month == 2) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;

            }
            else if ((__Month == 3) && (Prd != 0) && (SumPrd != 0))
            {
                mManPower.OPOT1 = oItemMPP.OPOT1;
                mManPower.OPOT15 = oItemMPP.OPOT15;
                mManPower.OPOT2 = oItemMPP.OPOT2;
                mManPower.OPOT3 = oItemMPP.OPOT3;

                mManPower.LEOT1 = oItemMPP.LEOT1;
                mManPower.LEOT15 = oItemMPP.LEOT15;
                mManPower.LEOT2 = oItemMPP.LEOT2;
                mManPower.LEOT3 = oItemMPP.LEOT3;

                mManPower.FOOT1 = oItemMPP.FOOT1;
                mManPower.FOOT15 = oItemMPP.FOOT15;
                mManPower.FOOT2 = oItemMPP.FOOT2;
                mManPower.FOOT3 = oItemMPP.FOOT3;

                mManPower.SUOT1 = oItemMPP.SUOT1;
                mManPower.SUOT15 = oItemMPP.SUOT15;
                mManPower.SUOT2 = oItemMPP.SUOT2;
                mManPower.SUOT3 = oItemMPP.SUOT3;
                mManPower.BudgetCost = CostOverall;
                mManPower.OverAllSum = CostOverAllSum;
                //if (_Type == "ALL")
                //{
                //    mManPower.Prd = SumPrdMonth;
                //    mManPower.SumPrd = SumPrdOverAll;
                //}
                //else
                //{

                mManPower.Prd = Prd;
                mManPower.SumPrd = SumPrd;
                //}
                mManPower.CostUnit = CostUnitch;
                mManPower.AccumCostUnit = AccumCostUnitch;
            }

            if (AccumCostUnitch != 0)
            {
                mManPower.dataCostCenter = ArryPeriod1[__Month - 1];
                mManPower.dataYearMonth = ArryPeriod1[__Month - 1];
                oListMP.Add(mManPower);
            }
            //oListMP.Add(mManPower);

            //  Prd = 0;
            //   SumPrd = 0;
            PrdMonth = 0;
            SumPrdMonth = 0;
            //   SumPrdOverAll = 0;
            CostOverall = 0;
            totalOP = 0;
            totalLE = 0;
            totalFO = 0;
            totalSU = 0;

            totalOP = 0;
            totalLE = 0;
            totalFO = 0;
            totalSU = 0;

            accuOP1 = 0;
            accuOP15 = 0;
            accuOP2 = 0;
            accuOP3 = 0;

            accuLE1 = 0;
            accuLE15 = 0;
            accuLE2 = 0;
            accuLE3 = 0;

            accuFO1 = 0;
            accuFO15 = 0;
            accuFO2 = 0;
            accuFO3 = 0;

            accuSU1 = 0;
            accuSU15 = 0;
            accuSU2 = 0;
            accuSU3 = 0;

            totalOPOT1 = 0;
            totalOPOT15 = 0;
            totalOPOT2 = 0;
            totalOPOT3 = 0;
            totalOP = 0;

            totalLEOT1 = 0;
            totalLEOT15 = 0;
            totalLEOT2 = 0;
            totalLEOT3 = 0;
            totalLE = 0;

            totalFOOT1 = 0;
            totalFOOT15 = 0;
            totalFOOT2 = 0;
            totalFOOT3 = 0;
            totalFO = 0;

            totalSUOT1 = 0;
            totalSUOT15 = 0;
            totalSUOT2 = 0;
            totalSUOT3 = 0;
            totalSU = 0;

        }
        return oListMP;
    }
    public List<MMPInfo.MPAllChartInfo> GetChartMPDailyALL(int _Month, DateTime _DataDate, string _Type)
    {

        List<MMPInfo.MPAllChartInfo> oListMP = new List<MMPInfo.MPAllChartInfo>();


        string[] ArryPrd = { "1YC", "2YC", "SCR", "1YC/3", "ODM" };
        //string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702", "4310", "4320", "4510", "4720", "8120" };
        string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702" };
        // string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702" };
        string[] ArryPrdFac1 = { "1101", "1102" };
        string[] ArryPrdFac1M = { "1101" };
        string[] ArryPrdFac1A = { "1102" };
        string[] ArryPrdFac2 = { "1201", "1202", "1301", "1302", "1401", "1402" };
        string[] ArryPrdFac2M = { "1201" };
        string[] ArryPrdFac2A = { "1202" };
        string[] ArryPrdFac2Mo = { "1401" };
        string[] ArryPrdFac2MoA = { "1402" };
        string[] ArryPrdSCA = { "1301", "1302" };
        string[] ArryPrdSCRM = { "1301" };
        string[] ArryPrdSCRA = { "1302" };
        string[] ArryPrdFac3 = { "1701", "1702" };
        string[] ArryPrdFac3M = { "1701" };
        string[] ArryPrdFac3A = { "1702" };
        string[] ArryPrdODM = { "1501" };

        string[] ArryPeriod = { "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod1 = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod2 = { "PRD_JAN", "PRD_FEB", "PRD_MAR", "PRD_APR", "PRD_MAY", "PRD_JUN", "PRD_JUL", "PRD_AUG", "PRD_SEP", "PRD_OCT", "PRD_NOV", "PRD_DEC" };
        int[] ArryMonth = { 4, 5, 6, 7, 8, 9, 10, 11, 12 };
        int[] ArryMonth1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };


        string pAccGroup = "EXP";
        string pBudgetType = "DI";
        string pYear = _DataDate.ToString("yyyy");
        string pMonth = _DataDate.ToString("MM");
        DateTime _LastYear = new DateTime();
        DateTime _Last2Year = new DateTime();
        DateTime _Last3Year = new DateTime();
        _LastYear = _DataDate.AddYears(-1);
        _Last2Year = _DataDate.AddYears(-2);
        _Last3Year = _DataDate.AddYears(-3);
        string pLastYear = _LastYear.ToString("yyyy");
        string pLast2Year = _Last2Year.ToString("yyyy");
        string pLast3Year = _Last3Year.ToString("yyyy");
        string TxtModel = " ";
        string Txt_Type = "";
        int FlagInsert = 1;
        #region init



        int[] _PrdActual = new int[12];

        string[] ArrySeires5 = new string[5];
        Decimal[] ArrySeiresValue5 = new Decimal[5];



        #endregion

        string[] ArryLoop = new string[0];
        string ProductType = "";
        string TargetType = "";
        if (_Type == "ALL")
        {
            ArryLoop = ArryPrdALL;
            TargetType = "DCI";
        }
        else if ((_Type == "MPALL") || (_Type == "MPALLPrev") || (_Type == "MPALLPrev2") || (_Type == "MPALLPrev3") || (_Type == "MPALLNext") ||
        (_Type == "OTALL") || (_Type == "OTALLPrev") | (_Type == "OTALLPrev2") || (_Type == "OTALLPrev3") || (_Type == "OTALLNext"))
        {
            //ArryLoop = ArryPrdFac1;
            //ProductType = "1YC";
            //TargetType = "1YC";
            //TxtModel = "1YC%";
            //Factory = "1";
            Txt_Type = "MPALL";

        }


        DateTime strDate = new DateTime(DateTime.Now.Year, _Month, 1, 0, 0, 0);
        DateTime endDate = strDate.AddMonths(1).Date + new TimeSpan(0, 0, 0);

        DateTime strHr = DateTime.Today + new TimeSpan(08, 00, 00);
        DateTime dateEnd = DateTime.Today + new TimeSpan(20, 00, 00);
        DateTime Endtoday = DateTime.Now;
        DateTime EndYesterday = DateTime.Today - new TimeSpan(24, 00, 00);


        int MonthSelect = _Month;
        int PrevMonth = _Month - 1;
        int NextMonth = _Month + 1;


        //------------- Create column header OT  -----------------


        DataTable dtBCPD = new DataTable();
        dtBCPD.Columns.Add("Fiscal_year", typeof(string));
        dtBCPD.Columns.Add("ProductType", typeof(string));
        dtBCPD.Columns.Add("PRD_JAN", typeof(string));
        dtBCPD.Columns.Add("PRD_FEB", typeof(string));
        dtBCPD.Columns.Add("PRD_MAR", typeof(string));
        dtBCPD.Columns.Add("PRD_APR", typeof(string));
        dtBCPD.Columns.Add("PRD_MAY", typeof(string));
        dtBCPD.Columns.Add("PRD_JUN", typeof(string));
        dtBCPD.Columns.Add("PRD_JUL", typeof(string));
        dtBCPD.Columns.Add("PRD_AUG", typeof(string));
        dtBCPD.Columns.Add("PRD_SEP", typeof(string));
        dtBCPD.Columns.Add("PRD_OCT", typeof(string));
        dtBCPD.Columns.Add("PRD_NOV", typeof(string));
        dtBCPD.Columns.Add("PRD_DEC", typeof(string));
        DateTime setDate1 = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sqlBCPD = new SqlCommand();
        sqlBCPD.CommandText = "SELECT Fiscal_year " +
            " ,ProductType,PRD_APR,PRD_MAY,PRD_JUN,PRD_JUL,PRD_AUG " +
            " ,PRD_SEP,PRD_OCT,PRD_NOV,PRD_DEC,PRD_JAN,PRD_FEB,PRD_MAR,Total_PRD " +
           " from BC_PRODUCTION " +
           " where [Fiscal_year] = " + setDate1.Year;


        // int LBCSPD = 0;
        double Prd = 0, Prd1 = 0, Prd2 = 0, Prd3 = 0, Prd4 = 0, Prd5 = 0, Prd6 = 0, Prd7 = 0;
        double Prd8 = 0, Prd9 = 0, Prd10 = 0, Prd11 = 0, Prd12 = 0, SumPrd = 0, SumPrdOverAll = 0, PrdMonth = 0, SumPrdMonth = 0;
        DataTable dt1 = oConn.SqlGet(sqlBCPD, "DBBCS");
        foreach (DataRow item in dt1.Rows)
        {
            DataRow _rowBCSPD = dtBCPD.NewRow();
            _rowBCSPD["Fiscal_year"] = item["Fiscal_year"].ToString();
            _rowBCSPD["ProductType"] = item["ProductType"].ToString();
            _rowBCSPD["PRD_JAN"] = item["PRD_JAN"];
            _rowBCSPD["PRD_FEB"] = item["PRD_FEB"];
            _rowBCSPD["PRD_MAR"] = item["PRD_MAR"];
            _rowBCSPD["PRD_APR"] = item["PRD_APR"];
            _rowBCSPD["PRD_MAY"] = item["PRD_MAY"];
            _rowBCSPD["PRD_JUN"] = item["PRD_JUN"];
            _rowBCSPD["PRD_JUL"] = item["PRD_JUL"];
            _rowBCSPD["PRD_AUG"] = item["PRD_AUG"];
            _rowBCSPD["PRD_SEP"] = item["PRD_SEP"];
            _rowBCSPD["PRD_OCT"] = item["PRD_OCT"];
            _rowBCSPD["PRD_NOV"] = item["PRD_NOV"];
            _rowBCSPD["PRD_DEC"] = item["PRD_DEC"];
            dtBCPD.Rows.Add(_rowBCSPD);
        }


        //---------------- Get Employeee of Line --------------
        //DataTable dtEmp = new DataTable();
        //dtEmp.Columns.Add("Fiscal_year", typeof(string));
        //dtEmp.Columns.Add("ProductType", typeof(string));
        //dtEmp.Columns.Add("Monthly", typeof(string));
        //dtEmp.Columns.Add("WType", typeof(string));
        DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);
        DateTime setyesterday = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sql = new SqlCommand();

        if (_Type == "ALL")
        {

            txtCostCenter = " = " + ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1] +
              " or [COSTCENTER] = " + ArryLoop[2] + " or [COSTCENTER] = " + ArryLoop[3] +
               " or [COSTCENTER] = " + ArryLoop[4] + " or [COSTCENTER] = " + ArryLoop[5] +
               " or [COSTCENTER] = " + ArryLoop[6] + " or [COSTCENTER] = " + ArryLoop[7] +
            " or [COSTCENTER] = " + ArryLoop[8] + " or [COSTCENTER] = " + ArryLoop[9] +
            " or [COSTCENTER] = " + ArryLoop[10];


        }










        /*  foreach (DataRow item in dt.Rows)
          {
              DataRow _rowEmp = dtEmp.NewRow();
              _rowEmp["Code"] = item["CODE"].ToString();
              _rowEmp["Position"] = item["POSIT"].ToString();
              _rowEmp["CostCenter"] = item["COSTCENTER"].ToString();
              _rowEmp["WType"] = item["WTYPE"].ToString();
              dtEmp.Rows.Add(_rowEmp);
          }*/
        //  lbMP.Text = dtEmp.Rows.Count.ToString();
        //---------------- Get Employeee of Line --------------        

        //----------------- Create row content Manpower ------------------

        MMPInfo.MPAllChartInfo oItemMPP = new MMPInfo.MPAllChartInfo();
        int ii = 0;

        double accuOP1 = 0, accuOP15 = 0, accuOP2 = 0, accuOP3 = 0, CountMPOP = 1;
        double accuLE1 = 0, accuLE15 = 0, accuLE2 = 0, accuLE3 = 0, CountMPLE = 1;
        double accuFO1 = 0, accuFO15 = 0, accuFO2 = 0, accuFO3 = 0, CountMPFO = 1;
        double accuSU1 = 0, accuSU15 = 0, accuSU2 = 0, accuSU3 = 0, CountMPSU = 1;
        double CostOverAllSum = 0;
        // double CostOverAll = 0;




        for (ii = 1; ii <= MonthSelect; ii++)
        {
            Prd = 0;
            if (dtBCPD.Rows.Count > 0)
            {

                foreach (DataRow _rowbcpd in dtBCPD.Rows)
                {

                    if (_Type == "FAC2")
                    {
                        if (Convert.ToString(_rowbcpd["ProductType"].ToString()) == "2YC" || Convert.ToString(_rowbcpd["ProductType"].ToString()) == "SCR")
                        {
                            PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                            Prd += PrdMonth;
                            //    SumPrd += Prd;
                        }
                    }
                    else if (_Type == "ALL")
                    {
                        int k = 0;
                        for (k = 1; k <= ArryPrd.Count(); k++)
                        {


                            if (ArryPrd[k - 1] == Convert.ToString(_rowbcpd["ProductType"].ToString()))
                            {
                                if (ArryPrd[k - 1] == "ODM")
                                {
                                    PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                                    PrdMonth = PrdMonth / 20;
                                }
                                else
                                {
                                    PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                                }
                                Prd += PrdMonth;


                            }
                            PrdMonth = 0;
                        }
                    }
                    else

                        if (ProductType == Convert.ToString(_rowbcpd["ProductType"].ToString()))
                        {
                            Prd = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
                            // SumPrd += Prd;
                        }


                    // SumPrd += Prd;
                }
                SumPrd += Prd;

            }


            if (ii < MonthSelect)
            {
                setDate = new DateTime(DateTime.Now.Year, ii, 1);

            }
            else if (ii == MonthSelect)
            {
                setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);

            }
            else if (ii > MonthSelect)
            {

                setDate = new DateTime(DateTime.Now.Year, NextMonth, 1);

            }
            int __Month = setDate.Month;


            // Start Check Working Time OT in DB

            //---------------- Get Employeee of Line --------------
            DataTable dtMNOT = new DataTable();


            dtMNOT.Columns.Add("Fiscal_year", typeof(string));
            dtMNOT.Columns.Add("Monthly", typeof(string));
            dtMNOT.Columns.Add("Daily", typeof(string));
            dtMNOT.Columns.Add("S_StdMPday", typeof(string));
            dtMNOT.Columns.Add("S_ACtMPday", typeof(string));
            dtMNOT.Columns.Add("S_StdMPNight", typeof(string));
            dtMNOT.Columns.Add("S_ActMPNight", typeof(string));
            dtMNOT.Columns.Add("S_StdOTDay", typeof(string));
            dtMNOT.Columns.Add("S_ReqOTDay", typeof(string));
            dtMNOT.Columns.Add("S_ActOTDay", typeof(string));
            dtMNOT.Columns.Add("S_StdOTNight", typeof(string));
            dtMNOT.Columns.Add("S_ReqOTNight", typeof(string));
            dtMNOT.Columns.Add("S_ActOTNight", typeof(string));

            //--------------- Get Employee working Time ---------------------
            int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
            int FlagUdate = 0;
            int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;
            string DatetoDay = "";
            int Xdate = 0;
            int Yester = 0;


            if (ii == MonthSelect)
            {

                for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                {
                    if (i >= 2)
                    {
                        Yester = i - 1;
                        setyesterday = new DateTime(DateTime.Now.Year, setDate.Month, Yester);

                    }
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);



                    //if ((setDate >= EndYesterday) && (setDate <= Endtoday))
                    //{
                    //if (Endtoday.ToString("yyyy-MM-dd") == setDate.ToString("yyyy-MM-dd"))
                    //   {
                    int SUMOT_REQD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
                    int SUMOT_REQN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
                    int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
                    int SUMMP_SHIFT = 0, SUMACT_MP = 0;
                    // DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


                    SqlCommand sqlMNOT = new SqlCommand();


                    sqlMNOT.CommandText = " select Fiscal_year,Monthly,Daily, sum(STD_MPDay) as S_StdMPday, sum(ACT_MPDay) as S_ACtMPday " +
                      " , sum(STD_MPNight) as S_StdMPNight " +
                       " ,sum(ACT_MPNight) as S_ActMPNight " +
                        " ,sum(STD_OTDay) as S_StdOTDay " +
                        " ,sum(REQ_OTDay) as S_ReqOTDay " +
                        " ,sum(ACT_OTDay) as S_ActOTDay" +
                        " ,sum(STD_OTNight) as S_StdOTNight " +
                        " ,sum(REQ_OTNight) as S_ReqOTNight " +
                        " ,sum(ACT_OTNight) as S_ActOTNight " +
                        " FROM BC_MANPOWER" +
                       "  where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' " +
                        " and Daily = '" + i + "' and ( ProductType = 'DIRECTALL'  or ProductType = 'INDIRECTALL'or ProductType = 'MPSGA' ) " +
                        " group by Fiscal_year,Monthly,Daily";



                    DataTable dtMOT = oConn.SqlGet(sqlMNOT, "DBBCS");



                    //   string InsertDD;

                    double MPOP = 4, MPLE = 50, MPFO = 90, MPSU = 100;
                    double totalOP = 0, totalOPOT1 = 0, totalOPOT15 = 0, totalOPOT2 = 0, totalOPOT3 = 0;
                    double totalLE = 0, totalLEOT1 = 0, totalLEOT15 = 0, totalLEOT2 = 0, totalLEOT3 = 0;
                    double totalFO = 0, totalFOOT1 = 0, totalFOOT15 = 0, totalFOOT2 = 0, totalFOOT3 = 0;
                    double totalSU = 0, totalSUOT1 = 0, totalSUOT15 = 0, totalSUOT2 = 0, totalSUOT3 = 0;
                    double TotalOT1 = 0, TotalOT15 = 0, TotalOT2 = 0, TotalOT3 = 0;
                    double CostOverall = 0;

                    DataTable dtEmp = new DataTable();
                    dtEmp.Columns.Add("Fiscal_year", typeof(string));
                    dtEmp.Columns.Add("ProductType", typeof(string));
                    dtEmp.Columns.Add("Monthly", typeof(string));

                    //for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                    //{
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);

                    sql.CommandText = "SELECT fiscal_year,Monthly,Daily,ProductType,STD_MPDay,ACT_MPDay" +
                      " ,STD_MPNight,ACT_MPNight,STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight" +
                        " ,ACT_OTNight  from BC_MANPOWER " +
                         " where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' and Daily = '" + i + "' and ProductType ='" + Txt_Type + "'";

                    DataTable dtCount = oConn.SqlGet(sql, "DBBCS");
                    if (dtCount.Rows.Count > 0)
                    {

                        FlagInsert = 1;

                    }
                    else
                    {
                        FlagInsert = 0;

                    }



                    //if (dtCount.Rows.Count > 0)
                    //{

                    //DataTable dtEmp = new DataTable();
                    //dtEmp.Columns.Add("Fiscal_year", typeof(string));
                    //dtEmp.Columns.Add("ProductType", typeof(string));
                    //dtEmp.Columns.Add("Monthly", typeof(string));

                    if (dtCount.Rows.Count > 0)
                    {
                        DataTable dtMNOTPre = new DataTable();


                        dtMNOTPre.Columns.Add("Fiscal_year", typeof(string));
                        dtMNOTPre.Columns.Add("Monthly", typeof(string));
                        dtMNOTPre.Columns.Add("Daily", typeof(string));
                        dtMNOTPre.Columns.Add("ProductType", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdMPday", typeof(string));
                        dtMNOTPre.Columns.Add("S_ACtMPday", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdMPNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActMPNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_ReqOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdOTNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ReqOTNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActOTNight", typeof(string));

                        foreach (DataRow item in dtMOT.Rows)
                        {
                            DataRow _rowMNOT = dtMNOTPre.NewRow();

                            //**** DataRow _rowMNOT = dtMNOT.NewRow();
                            _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                            _rowMNOT["Monthly"] = item["Monthly"].ToString();
                            _rowMNOT["Daily"] = item["Daily"].ToString();
                            _rowMNOT["S_StdMPday"] = item["S_StdMPday"].ToString();
                            _rowMNOT["S_ACtMPday"] = item["S_ACtMPday"].ToString();
                            _rowMNOT["S_StdMPNight"] = item["S_StdMPNight"].ToString();
                            _rowMNOT["S_ActMPNight"] = item["S_ActMPNight"].ToString();
                            _rowMNOT["S_StdOTDay"] = item["S_StdOTDay"].ToString();
                            _rowMNOT["S_ReqOTDay"] = item["S_ReqOTDay"].ToString();
                            _rowMNOT["S_ActOTDay"] = item["S_ActOTDay"].ToString();
                            _rowMNOT["S_StdOTNight"] = item["S_StdOTNight"].ToString();
                            _rowMNOT["S_ReqOTNight"] = item["S_ReqOTNight"].ToString();
                            _rowMNOT["S_ActOTNight"] = item["S_ActOTNight"].ToString();

                            MPCount_D = Convert.ToInt16(item["S_StdMPday"].ToString());
                            MPCount_N = Convert.ToInt16(item["S_StdMPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["S_ACtMPday"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["S_ActMPNight"].ToString());

                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["S_ReqOTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["S_ReqOTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["S_ActOTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["S_ActOTNight"].ToString());

                            //   if ((setDate.ToString("yyyy-MM-dd") == EndYesterday.ToString("yyyy-MM-dd"))
                            //|| (setyesterday.ToString("yyyy-MM-dd") == Endtoday.ToString("yyyy-MM-dd")))
                            //{
                            //if (setDate.ToString("yyyy-MM-dd") <= Endtoday.ToString("yyyy-MM-dd"))
                            //if ((setDate >= EndYesterday) && (setDate <= Endtoday))
                            if ((FlagInsert == 1) && (setDate >= EndYesterday) && (setDate <= dateEnd) && (_Type == "MPALL"))
                            {
                                //  Endtoday
                                SqlCommand UpdateMNOT = new SqlCommand();
                                UpdateMNOT.CommandText = "Update  BC_MANPOWER  " +
                                        " set STD_MPDay ='" + _rowMNOT["S_StdMPday"].ToString() + "',ACT_MPDay ='" + _rowMNOT["S_ACtMPday"].ToString() + "' " +
                                        ",STD_MPNight ='" + _rowMNOT["S_StdMPNight"].ToString() + "',ACT_MPNight ='" + _rowMNOT["S_ActMPNight"].ToString() + "' " +
                                        ",STD_OTDay ='" + _rowMNOT["S_StdOTDay"].ToString() + "',REQ_OTDay ='" + _rowMNOT["S_ReqOTDay"].ToString() + "',ACT_OTDay = '" + _rowMNOT["S_ActOTDay"].ToString() + "'" +
                                        ",STD_OTNight ='" + _rowMNOT["S_StdOTNight"].ToString() + "',REQ_OTNight ='" + _rowMNOT["S_ReqOTNight"].ToString() + "',ACT_OTNight = '" + _rowMNOT["S_ActOTNight"].ToString() + "'" +
                                        "where  Fiscal_year ='" + setDate.ToString("yyyy") + "' and Monthly ='" + ii + "' and Daily ='" + i + "' and ProductType ='" + Txt_Type + "'";

                                oConn.SqlExecute(UpdateMNOT, "DBBCS");
                            }
                            //MPCount_D = 0;
                            //MPCount_N = 0;
                            //SumMP_ACTD = 0;
                            //SumMP_ACTN = 0;
                            //SumMP_ACTD = 0;
                            //SumMP_ACTN = 0;
                            //SumOT_ReqD = 0;
                            //SumOT_ReqN = 0;
                            //SumOT_ActD = 0;
                            //SumOT_ActN = 0;
                        }
                    }
                    else
                    {

                        foreach (DataRow item in dtMOT.Rows)
                        {
                            DataRow _rowMNOT = dtMNOT.NewRow();
                            _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                            _rowMNOT["Monthly"] = item["Monthly"].ToString();
                            _rowMNOT["Daily"] = item["Daily"].ToString();
                            _rowMNOT["S_StdMPday"] = item["S_StdMPday"].ToString();
                            _rowMNOT["S_ACtMPday"] = item["S_ACtMPday"].ToString();
                            _rowMNOT["S_StdMPNight"] = item["S_StdMPNight"].ToString();
                            _rowMNOT["S_ActMPNight"] = item["S_ActMPNight"].ToString();
                            _rowMNOT["S_StdOTDay"] = item["S_StdOTDay"].ToString();
                            _rowMNOT["S_ReqOTDay"] = item["S_ReqOTDay"].ToString();
                            _rowMNOT["S_ActOTDay"] = item["S_ActOTDay"].ToString();
                            _rowMNOT["S_StdOTNight"] = item["S_StdOTNight"].ToString();
                            _rowMNOT["S_ReqOTNight"] = item["S_ReqOTNight"].ToString();
                            _rowMNOT["S_ActOTNight"] = item["S_ActOTNight"].ToString();


                            if ((FlagInsert == 0) && (_Type == "MPALL"))
                            {
                                SqlCommand InsertMNOT = new SqlCommand();

                                InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                                             ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                                             ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                                             " VALUES ('" + setDate.ToString("yyyy") + "','" + ii + "','" + i + "','" + Txt_Type + "' " +
                                             ",'" + _rowMNOT["S_StdMPday"].ToString() + "','" + _rowMNOT["S_ACtMPday"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdMPNight"].ToString() + "','" + _rowMNOT["S_ActMPNight"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdOTDay"].ToString() + "','" + _rowMNOT["S_ReqOTDay"].ToString() + "','" + _rowMNOT["S_ActOTDay"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdOTNight"].ToString() + "','" + _rowMNOT["S_ReqOTNight"].ToString() + "','" + _rowMNOT["S_ActOTNight"].ToString() + "')";
                                oConn.SqlExecute(InsertMNOT, "DBBCS");
                            }


                            MPCount_D = Convert.ToInt16(item["S_StdMPday"].ToString());
                            MPCount_N = Convert.ToInt16(item["S_StdMPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["S_ACtMPday"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["S_ActMPNight"].ToString());

                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["S_ReqOTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["S_ReqOTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["S_ActOTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["S_ActOTNight"].ToString());
                        }

                    }




                    if (((setDate <= dateEnd) && (_Type == "MPALL"))||(_Type == "OTALL"))
                    {

                        MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                        //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                        DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);
                        //SUMMP_SHIFT = MPCountALL;
                        //SUMACT_MP = SUMOT_REQD + SUMOT_REQN;


                        // ** Man Power Attandance
                        mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                        mManPower.Xdate = i;

                        //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                        //  mManPower.SumMP_STD = SUMACT_MP;



                        mManPower.SumMPD = MPCount_D;
                        mManPower.SumMPN = MPCount_N;
                        mManPower.SumMP_ACTD = SumMP_ACTD;
                        mManPower.SumMP_ACTN = SumMP_ACTN;
                        if (SumMP_ACTD != 0)
                        {
                            mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                        }
                        else
                        {
                            mManPower.SumMP_DIFFD = 0;

                        }

                        if (SumMP_ACTN != 0)
                        {

                            mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                        }
                        else
                        {

                            mManPower.SumMP_DIFFN = 0;
                        }


                        // ** OT Req,ACT
                        mManPower.SumOT_ReqD = SumOT_ReqD;
                        mManPower.SumOT_ReqN = SumOT_ReqN;
                        mManPower.SumOT_ActD = SumOT_ActD;
                        mManPower.SumOT_ActN = SumOT_ActN;
                        oListMP.Add(mManPower);



                    }else if((setDate > dateEnd) && (_Type == "MPALL"))
                    {
                        MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                        //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                        DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);

                        // ** Man Power Attandance
                        mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                        mManPower.Xdate = i;

                        mManPower.SumMPD = 0;
                        mManPower.SumMPN = 0;
                        mManPower.SumMP_ACTD = 0;
                        mManPower.SumMP_ACTN = 0;
                            mManPower.SumMP_DIFFD = 0;
                            mManPower.SumMP_DIFFN = 0;

                        // ** OT Req,ACT
                        mManPower.SumOT_ReqD = 0;
                        mManPower.SumOT_ReqN = 0;
                        mManPower.SumOT_ActD = 0;
                        mManPower.SumOT_ActN = 0;
                        oListMP.Add(mManPower);

                    }

                    MPCount_D = 0;
                    MPCount_N = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;
                    SumOT_ReqD = 0;
                    SumOT_ReqN = 0;
                    SumOT_ActD = 0;
                    SumOT_ActN = 0;
                    //}
                }//Exit Loop
            }
            else
            {
                for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                {
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);
                    int SUMOT_REQD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
                    int SUMOT_REQN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
                    int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
                    int SUMMP_SHIFT = 0, SUMACT_MP = 0;
                    // DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


                    SqlCommand sqlMNOT = new SqlCommand();



                    sqlMNOT.CommandText = " select Fiscal_year,Monthly,Daily, sum(STD_MPDay) as S_StdMPday, sum(ACT_MPDay) as S_ACtMPday " +
                   " , sum(STD_MPNight) as S_StdMPNight " +
                    " ,sum(ACT_MPNight) as S_ActMPNight " +
                     " ,sum(STD_OTDay) as S_StdOTDay " +
                     " ,sum(REQ_OTDay) as S_ReqOTDay " +
                     " ,sum(ACT_OTDay) as S_ActOTDay" +
                     " ,sum(STD_OTNight) as S_StdOTNight " +
                     " ,sum(REQ_OTNight) as S_ReqOTNight " +
                     " ,sum(ACT_OTNight) as S_ActOTNight " +
                     " FROM BC_MANPOWER" +
                    "  where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' " +
                     " and Daily = '" + i + "' and ( ProductType = 'DIRECTALL'  or ProductType = 'INDIRECTALL'or ProductType = 'MPSGA' ) " +
                     " group by Fiscal_year,Monthly,Daily";



                    //sqlMNOT.CommandText = " select Fiscal_year,Monthly,Daily, sum(STD_MPDay) as S_StdMPday, sum(ACT_MPDay) as S_ACtMPday " +
                    //  " , sum(STD_MPNight) as S_StdMPNight " +
                    //   " ,sum(ACT_MPNight) as S_ActMPNight " +
                    //    " ,sum(STD_OTDay) as S_StdOTDay " +
                    //    " ,sum(REQ_OTDay) as S_ReqOTDay " +
                    //    " ,sum(ACT_OTDay) as S_ActOTDay" +
                    //    " ,sum(STD_OTNight) as S_StdOTNight " +
                    //    " ,sum(REQ_OTNight) as S_ReqOTNight " +
                    //    " ,sum(ACT_OTNight) as S_ActOTNight " +
                    //    " FROM BC_MANPOWER" +
                    //   "  where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' " +
                    //    " and Daily = '" + i + "' " +
                    //    " group by Fiscal_year,Monthly,Daily";



                    DataTable dtMOT = oConn.SqlGet(sqlMNOT, "DBBCS");



                    //   string InsertDD;

                    double MPOP = 4, MPLE = 50, MPFO = 90, MPSU = 100;
                    double totalOP = 0, totalOPOT1 = 0, totalOPOT15 = 0, totalOPOT2 = 0, totalOPOT3 = 0;
                    double totalLE = 0, totalLEOT1 = 0, totalLEOT15 = 0, totalLEOT2 = 0, totalLEOT3 = 0;
                    double totalFO = 0, totalFOOT1 = 0, totalFOOT15 = 0, totalFOOT2 = 0, totalFOOT3 = 0;
                    double totalSU = 0, totalSUOT1 = 0, totalSUOT15 = 0, totalSUOT2 = 0, totalSUOT3 = 0;
                    double TotalOT1 = 0, TotalOT15 = 0, TotalOT2 = 0, TotalOT3 = 0;
                    double CostOverall = 0;

                    DataTable dtEmp = new DataTable();
                    dtEmp.Columns.Add("Fiscal_year", typeof(string));
                    dtEmp.Columns.Add("ProductType", typeof(string));
                    dtEmp.Columns.Add("Monthly", typeof(string));

                    //for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                    //{
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);

                    sql.CommandText = "SELECT fiscal_year,Monthly,Daily,ProductType,STD_MPDay,ACT_MPDay" +
                      " ,STD_MPNight,ACT_MPNight,STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight" +
                        " ,ACT_OTNight  from BC_MANPOWER " +
                         " where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' and Daily = '" + i + "' and ProductType ='" + Txt_Type + "'";

                    DataTable dtCount = oConn.SqlGet(sql, "DBBCS");


                    if (dtCount.Rows.Count > 0)
                    {

                        FlagInsert = 1;
                    }
                    else
                    {
                        FlagInsert = 0;

                    }
                    //if (dtCount.Rows.Count > 0)
                    //{

                    //DataTable dtEmp = new DataTable();
                    //dtEmp.Columns.Add("Fiscal_year", typeof(string));
                    //dtEmp.Columns.Add("ProductType", typeof(string));
                    //dtEmp.Columns.Add("Monthly", typeof(string));

                    if (dtCount.Rows.Count > 0)
                    {
                        DataTable dtMNOTPre = new DataTable();


                        dtMNOTPre.Columns.Add("Fiscal_year", typeof(string));
                        dtMNOTPre.Columns.Add("Monthly", typeof(string));
                        dtMNOTPre.Columns.Add("Daily", typeof(string));
                        dtMNOTPre.Columns.Add("ProductType", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdMPday", typeof(string));
                        dtMNOTPre.Columns.Add("S_ACtMPday", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdMPNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActMPNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_ReqOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdOTNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ReqOTNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActOTNight", typeof(string));

                        foreach (DataRow item in dtCount.Rows)
                        {
                            DataRow _rowMNOT = dtMNOTPre.NewRow();
                            _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                            _rowMNOT["Monthly"] = item["Monthly"].ToString();
                            _rowMNOT["Daily"] = item["Daily"].ToString();
                            _rowMNOT["ProductType"] = item["ProductType"].ToString();
                            _rowMNOT["S_StdMPday"] = item["STD_MPDay"].ToString();
                            _rowMNOT["S_ACtMPday"] = item["ACT_MPDay"].ToString();
                            _rowMNOT["S_StdMPNight"] = item["STD_MPNight"].ToString();
                            _rowMNOT["S_ActMPNight"] = item["ACT_MPNight"].ToString();
                            _rowMNOT["S_StdOTDay"] = item["STD_OTDay"].ToString();
                            _rowMNOT["S_ReqOTDay"] = item["REQ_OTDay"].ToString();
                            _rowMNOT["S_ActOTDay"] = item["ACT_OTDay"].ToString();
                            _rowMNOT["S_StdOTNight"] = item["STD_OTNight"].ToString();
                            _rowMNOT["S_ReqOTNight"] = item["REQ_OTNight"].ToString();
                            _rowMNOT["S_ActOTNight"] = item["ACT_OTNight"].ToString();

                            MPCount_D = Convert.ToInt16(item["STD_MPDay"].ToString());
                            MPCount_N = Convert.ToInt16(item["STD_MPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());

                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["REQ_OTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["REQ_OTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["ACT_OTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["ACT_OTNight"].ToString());



                            if ((FlagInsert == 1) && (setDate >= EndYesterday) && (setDate <= dateEnd) && (_Type == "MPALL"))
                            {
                                SqlCommand UpdateMNOT = new SqlCommand();
                                UpdateMNOT.CommandText = "Update  BC_MANPOWER  " +
                                        " set STD_MPDay ='" + _rowMNOT["S_StdMPday"].ToString() + "',ACT_MPDay ='" + _rowMNOT["S_ACtMPday"].ToString() + "' " +
                                        ",STD_MPNight ='" + _rowMNOT["S_StdMPNight"].ToString() + "',ACT_MPNight ='" + _rowMNOT["S_ActMPNight"].ToString() + "' " +
                                        ",STD_OTDay ='" + _rowMNOT["S_StdOTDay"].ToString() + "',REQ_OTDay ='" + _rowMNOT["S_ReqOTDay"].ToString() + "',ACT_OTDay = '" + _rowMNOT["S_ActOTDay"].ToString() + "'" +
                                        ",STD_OTNight ='" + _rowMNOT["S_StdOTNight"].ToString() + "',REQ_OTNight ='" + _rowMNOT["S_ReqOTNight"].ToString() + "',ACT_OTNight = '" + _rowMNOT["S_ActOTNight"].ToString() + "'" +
                                        "where  Fiscal_year ='" + setDate.ToString("yyyy") + "' and Monthly ='" + ii + "' and Daily ='" + i + "' and ProductType ='" + Txt_Type + "'";

                                oConn.SqlExecute(UpdateMNOT, "DBBCS");
                            }
                            //MPCount_D = 0;
                            //MPCount_N = 0;
                            //SumMP_ACTD = 0;
                            //SumMP_ACTN = 0;
                            //SumMP_ACTD = 0;
                            //SumMP_ACTN = 0;
                            //SumOT_ReqD = 0;
                            //SumOT_ReqN = 0;
                            //SumOT_ActD = 0;
                            //SumOT_ActN = 0;
                        }
                    }
                    else
                    {

                        foreach (DataRow item in dtMOT.Rows)
                        {
                            DataRow _rowMNOT = dtMNOT.NewRow();
                            _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                            _rowMNOT["Monthly"] = item["Monthly"].ToString();
                            _rowMNOT["Daily"] = item["Daily"].ToString();
                            _rowMNOT["S_StdMPday"] = item["S_StdMPday"].ToString();
                            _rowMNOT["S_ACtMPday"] = item["S_ACtMPday"].ToString();
                            _rowMNOT["S_StdMPNight"] = item["S_StdMPNight"].ToString();
                            _rowMNOT["S_ActMPNight"] = item["S_ActMPNight"].ToString();
                            _rowMNOT["S_StdOTDay"] = item["S_StdOTDay"].ToString();
                            _rowMNOT["S_ReqOTDay"] = item["S_ReqOTDay"].ToString();
                            _rowMNOT["S_ActOTDay"] = item["S_ActOTDay"].ToString();
                            _rowMNOT["S_StdOTNight"] = item["S_StdOTNight"].ToString();
                            _rowMNOT["S_ReqOTNight"] = item["S_ReqOTNight"].ToString();
                            _rowMNOT["S_ActOTNight"] = item["S_ActOTNight"].ToString();


                            if ((FlagInsert == 0) && (_Type == "MPALL"))
                            {
                                SqlCommand InsertMNOT = new SqlCommand();

                                InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                                             ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                                             ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                                             " VALUES ('" + setDate.ToString("yyyy") + "','" + ii + "','" + i + "','" + Txt_Type + "' " +
                                             ",'" + _rowMNOT["S_StdMPday"].ToString() + "','" + _rowMNOT["S_ACtMPday"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdMPNight"].ToString() + "','" + _rowMNOT["S_ActMPNight"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdOTDay"].ToString() + "','" + _rowMNOT["S_ReqOTDay"].ToString() + "','" + _rowMNOT["S_ActOTDay"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdOTNight"].ToString() + "','" + _rowMNOT["S_ReqOTNight"].ToString() + "','" + _rowMNOT["S_ActOTNight"].ToString() + "')";
                                oConn.SqlExecute(InsertMNOT, "DBBCS");
                            }


                            MPCount_D = Convert.ToInt16(item["S_StdMPday"].ToString());
                            MPCount_N = Convert.ToInt16(item["S_StdMPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["S_ACtMPday"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["S_ActMPNight"].ToString());

                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["S_ReqOTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["S_ReqOTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["S_ActOTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["S_ActOTNight"].ToString());
                            //MPCount_D = 0;
                            //MPCount_N = 0;
                            //SumMP_ACTD = 0;
                            //SumMP_ACTN = 0;
                            //SumMP_ACTD = 0;
                            //SumMP_ACTN = 0;
                            //SumOT_ReqD = 0;
                            //SumOT_ReqN = 0;
                            //SumOT_ActD = 0;
                            //SumOT_ActN = 0;
                        }

                    }







                    //MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                    //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                    //DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);
                    //SUMMP_SHIFT = MPCountALL;
                    //SUMACT_MP = SUMOT_REQD + SUMOT_REQN;


                    // ** Man Power Attandance
                    //mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                    //mManPower.Xdate = i;

                    //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                    //  mManPower.SumMP_STD = SUMACT_MP;



                    //mManPower.SumMPD = MPCount_D;
                    //mManPower.SumMPN = MPCount_N;
                    //mManPower.SumMP_ACTD = SumMP_ACTD;
                    //mManPower.SumMP_ACTN = SumMP_ACTN;
                    //mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;
                    //mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;


                    // ** OT Req,ACT
                    //mManPower.SumOT_ReqD = SumOT_ReqD;
                    //mManPower.SumOT_ReqN = SumOT_ReqN;
                    //mManPower.SumOT_ActD = SumOT_ActD;
                    //mManPower.SumOT_ActN = SumOT_ActN;



                    //     mManPower.SumMPH = oItemMPP.SumMPH;
                    //mManPower.SumMP = SUMOT_ACTN + SUMOT_ACTD;
                    //oListMP.Add(mManPower);
                    MPCount_D = 0;
                    MPCount_N = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;
                    SumOT_ReqD = 0;
                    SumOT_ReqN = 0;
                    SumOT_ActD = 0;
                    SumOT_ActN = 0;
                }
            }

        }
        return oListMP;
    }
    public List<MMPInfo.MPAllChartInfo> GetChartMPDailyDIRECTALL(int _Month, DateTime _DataDate, string _Type)
    {

        List<MMPInfo.MPAllChartInfo> oListMP = new List<MMPInfo.MPAllChartInfo>();


        string[] ArryPrd = { "1YC", "2YC", "SCR", "1YC/3", "ODM" };
        //string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702", "4310", "4320", "4510", "4720", "8120" };
        string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702" };
        // string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702" };
        string[] ArryPrdFac1 = { "1101", "1102" };
        string[] ArryPrdFac1M = { "1101" };
        string[] ArryPrdFac1A = { "1102" };
        string[] ArryPrdFac2 = { "1201", "1202", "1301", "1302", "1401", "1402" };
        string[] ArryPrdFac2M = { "1201" };
        string[] ArryPrdFac2A = { "1202" };
        string[] ArryPrdFac2Mo = { "1401" };
        string[] ArryPrdFac2MoA = { "1402" };
        string[] ArryPrdSCA = { "1301", "1302" };
        string[] ArryPrdSCRM = { "1301" };
        string[] ArryPrdSCRA = { "1302" };
        string[] ArryPrdFac3 = { "1701", "1702" };
        string[] ArryPrdFac3M = { "1701" };
        string[] ArryPrdFac3A = { "1702" };
        string[] ArryPrdODM = { "1501" };

        string[] ArryPeriod = { "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod1 = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod2 = { "PRD_JAN", "PRD_FEB", "PRD_MAR", "PRD_APR", "PRD_MAY", "PRD_JUN", "PRD_JUL", "PRD_AUG", "PRD_SEP", "PRD_OCT", "PRD_NOV", "PRD_DEC" };
        int[] ArryMonth = { 4, 5, 6, 7, 8, 9, 10, 11, 12 };
        int[] ArryMonth1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };


        string pAccGroup = "EXP";
        string pBudgetType = "DI";
        string pYear = _DataDate.ToString("yyyy");
        string pMonth = _DataDate.ToString("MM");
        DateTime _LastYear = new DateTime();
        DateTime _Last2Year = new DateTime();
        DateTime _Last3Year = new DateTime();
        _LastYear = _DataDate.AddYears(-1);
        _Last2Year = _DataDate.AddYears(-2);
        _Last3Year = _DataDate.AddYears(-3);
        string pLastYear = _LastYear.ToString("yyyy");
        string pLast2Year = _Last2Year.ToString("yyyy");
        string pLast3Year = _Last3Year.ToString("yyyy");
        string TxtModel = " ";
        string Txt_Type = "";
        int FlagInsert = 1;
        #region init



        int[] _PrdActual = new int[12];

        string[] ArrySeires5 = new string[5];
        Decimal[] ArrySeiresValue5 = new Decimal[5];



        #endregion

        string[] ArryLoop = new string[0];
        string ProductType = "";
        string TargetType = "";
        if (_Type == "ALL")
        {
            ArryLoop = ArryPrdALL;
            TargetType = "DCI";
        }
        else if ((_Type == "DIRECTALL") || (_Type == "OTDIRECTALL"))
        {
            //ArryLoop = ArryPrdFac1;
            //ProductType = "1YC";
            //TargetType = "1YC";
            //TxtModel = "1YC%";
            //Factory = "1";
            Txt_Type = "DIRECTALL";

        }


        DateTime strDate = new DateTime(DateTime.Now.Year, _Month, 1, 0, 0, 0);
        DateTime endDate = strDate.AddMonths(1).Date + new TimeSpan(0, 0, 0);

        DateTime strHr = DateTime.Today + new TimeSpan(08, 00, 00);
        DateTime dateEnd = DateTime.Today + new TimeSpan(20, 00, 00);
        DateTime Endtoday = DateTime.Now;
        DateTime EndYesterday = DateTime.Today - new TimeSpan(24, 00, 00);


        int MonthSelect = _Month;
        int PrevMonth = _Month - 1;
        int NextMonth = _Month + 1;


        //------------- Create column header OT  -----------------

        DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);
        DateTime setyesterday = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sql = new SqlCommand();

        //  lbMP.Text = dtEmp.Rows.Count.ToString();
        //---------------- Get Employeee of Line --------------        

        //----------------- Create row content Manpower ------------------

        MMPInfo.MPAllChartInfo oItemMPP = new MMPInfo.MPAllChartInfo();
        int ii = 0;

        double accuOP1 = 0, accuOP15 = 0, accuOP2 = 0, accuOP3 = 0, CountMPOP = 1;
        double accuLE1 = 0, accuLE15 = 0, accuLE2 = 0, accuLE3 = 0, CountMPLE = 1;
        double accuFO1 = 0, accuFO15 = 0, accuFO2 = 0, accuFO3 = 0, CountMPFO = 1;
        double accuSU1 = 0, accuSU15 = 0, accuSU2 = 0, accuSU3 = 0, CountMPSU = 1;
        double CostOverAllSum = 0;
        // double CostOverAll = 0;




        for (ii = 1; ii <= MonthSelect; ii++)
        {
            //Prd = 0;
            //if (dtBCPD.Rows.Count > 0)
            //{

            //    foreach (DataRow _rowbcpd in dtBCPD.Rows)
            //    {

            //        if (_Type == "FAC2")
            //        {
            //            if (Convert.ToString(_rowbcpd["ProductType"].ToString()) == "2YC" || Convert.ToString(_rowbcpd["ProductType"].ToString()) == "SCR")
            //            {
            //                PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
            //                Prd += PrdMonth;
            //                //    SumPrd += Prd;
            //            }
            //        }
            //        else if (_Type == "ALL")
            //        {
            //            int k = 0;
            //            for (k = 1; k <= ArryPrd.Count(); k++)
            //            {


            //                if (ArryPrd[k - 1] == Convert.ToString(_rowbcpd["ProductType"].ToString()))
            //                {
            //                    if (ArryPrd[k - 1] == "ODM")
            //                    {
            //                        PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
            //                        PrdMonth = PrdMonth / 20;
            //                    }
            //                    else
            //                    {
            //                        PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
            //                    }
            //                    Prd += PrdMonth;


            //                }
            //                PrdMonth = 0;
            //            }
            //        }
            //        else

            //            if (ProductType == Convert.ToString(_rowbcpd["ProductType"].ToString()))
            //            {
            //                Prd = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
            //                // SumPrd += Prd;
            //            }


            //        // SumPrd += Prd;
            //    }
            //    SumPrd += Prd;

            //}


            if (ii < MonthSelect)
            {
                setDate = new DateTime(DateTime.Now.Year, ii, 1);

            }
            else if (ii == MonthSelect)
            {
                setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);

            }
            else if (ii > MonthSelect)
            {

                setDate = new DateTime(DateTime.Now.Year, NextMonth, 1);

            }
            int __Month = setDate.Month;


            // Start Check Working Time OT in DB

            //---------------- Get Employeee of Line --------------
            DataTable dtMNOT = new DataTable();


            dtMNOT.Columns.Add("Fiscal_year", typeof(string));
            dtMNOT.Columns.Add("Monthly", typeof(string));
            dtMNOT.Columns.Add("Daily", typeof(string));
            dtMNOT.Columns.Add("S_StdMPday", typeof(string));
            dtMNOT.Columns.Add("S_ACtMPday", typeof(string));
            dtMNOT.Columns.Add("S_StdMPNight", typeof(string));
            dtMNOT.Columns.Add("S_ActMPNight", typeof(string));
            dtMNOT.Columns.Add("S_StdOTDay", typeof(string));
            dtMNOT.Columns.Add("S_ReqOTDay", typeof(string));
            dtMNOT.Columns.Add("S_ActOTDay", typeof(string));
            dtMNOT.Columns.Add("S_StdOTNight", typeof(string));
            dtMNOT.Columns.Add("S_ReqOTNight", typeof(string));
            dtMNOT.Columns.Add("S_ActOTNight", typeof(string));

            //--------------- Get Employee working Time ---------------------
            int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
            int FlagUdate = 0;
            int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;
            string DatetoDay = "";
            int Xdate = 0;
            int Yester = 0;


            if (ii == MonthSelect)
            {

                for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                {
                    if (i >= 2)
                    {
                        Yester = i - 1;
                        setyesterday = new DateTime(DateTime.Now.Year, setDate.Month, Yester);

                    }
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);



                    //if ((setDate >= EndYesterday) && (setDate <= Endtoday))
                    //{
                    //if (Endtoday.ToString("yyyy-MM-dd") == setDate.ToString("yyyy-MM-dd"))
                    //   {
                    int SUMOT_REQD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
                    int SUMOT_REQN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
                    int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
                    int SUMMP_SHIFT = 0, SUMACT_MP = 0;
                    // DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


                    SqlCommand sqlMNOT = new SqlCommand();


                    sqlMNOT.CommandText = " select Fiscal_year,Monthly,Daily, sum(STD_MPDay) as S_StdMPday, sum(ACT_MPDay) as S_ACtMPday " +
                      " , sum(STD_MPNight) as S_StdMPNight " +
                       " ,sum(ACT_MPNight) as S_ActMPNight " +
                        " ,sum(STD_OTDay) as S_StdOTDay " +
                        " ,sum(REQ_OTDay) as S_ReqOTDay " +
                        " ,sum(ACT_OTDay) as S_ActOTDay" +
                        " ,sum(STD_OTNight) as S_StdOTNight " +
                        " ,sum(REQ_OTNight) as S_ReqOTNight " +
                        " ,sum(ACT_OTNight) as S_ActOTNight " +
                        " FROM BC_MANPOWER" +
                        "  where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' " +
                        " and Daily = '" + i + "' and ( ProductType = 'FAC1'  or ProductType = 'FAC2' " +
                        " or ProductType = 'FAC3' or ProductType = 'ODM' or ProductType = 'MPPS' or ProductType ='MPQA' )" +
                        //" or ProductType ='INMTA' or ProductType ='INMTPM' or ProductType ='INMTTPM') " +
                        " group by Fiscal_year,Monthly,Daily";



                    DataTable dtMOT = oConn.SqlGet(sqlMNOT, "DBBCS");



                    //   string InsertDD;

                    double MPOP = 4, MPLE = 50, MPFO = 90, MPSU = 100;
                    double totalOP = 0, totalOPOT1 = 0, totalOPOT15 = 0, totalOPOT2 = 0, totalOPOT3 = 0;
                    double totalLE = 0, totalLEOT1 = 0, totalLEOT15 = 0, totalLEOT2 = 0, totalLEOT3 = 0;
                    double totalFO = 0, totalFOOT1 = 0, totalFOOT15 = 0, totalFOOT2 = 0, totalFOOT3 = 0;
                    double totalSU = 0, totalSUOT1 = 0, totalSUOT15 = 0, totalSUOT2 = 0, totalSUOT3 = 0;
                    double TotalOT1 = 0, TotalOT15 = 0, TotalOT2 = 0, TotalOT3 = 0;
                    double CostOverall = 0;

                    DataTable dtEmp = new DataTable();
                    dtEmp.Columns.Add("Fiscal_year", typeof(string));
                    dtEmp.Columns.Add("ProductType", typeof(string));
                    dtEmp.Columns.Add("Monthly", typeof(string));

                    //for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                    //{
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);








                    sql.CommandText = "SELECT fiscal_year,Monthly,Daily,ProductType,STD_MPDay,ACT_MPDay" +
                      " ,STD_MPNight,ACT_MPNight,STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight" +
                        " ,ACT_OTNight  from BC_MANPOWER " +
                         " where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' and Daily = '" + i + "' and ProductType ='" + Txt_Type + "'";

                    DataTable dtCount = oConn.SqlGet(sql, "DBBCS");

                    if (dtCount.Rows.Count > 0)
                    {

                        FlagInsert = 1;

                    }
                    else
                    {
                        FlagInsert = 0;

                    }


                 

                    if (dtCount.Rows.Count > 0)
                    {
                        DataTable dtMNOTPre = new DataTable();


                        dtMNOTPre.Columns.Add("Fiscal_year", typeof(string));
                        dtMNOTPre.Columns.Add("Monthly", typeof(string));
                        dtMNOTPre.Columns.Add("Daily", typeof(string));
                        dtMNOTPre.Columns.Add("ProductType", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdMPday", typeof(string));
                        dtMNOTPre.Columns.Add("S_ACtMPday", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdMPNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActMPNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_ReqOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdOTNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ReqOTNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActOTNight", typeof(string));

                        foreach (DataRow item in dtMOT.Rows)
                        {
                            DataRow _rowMNOT = dtMNOTPre.NewRow();

                            //**** DataRow _rowMNOT = dtMNOT.NewRow();
                            _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                            _rowMNOT["Monthly"] = item["Monthly"].ToString();
                            _rowMNOT["Daily"] = item["Daily"].ToString();
                            _rowMNOT["S_StdMPday"] = item["S_StdMPday"].ToString();
                            _rowMNOT["S_ACtMPday"] = item["S_ACtMPday"].ToString();
                            _rowMNOT["S_StdMPNight"] = item["S_StdMPNight"].ToString();
                            _rowMNOT["S_ActMPNight"] = item["S_ActMPNight"].ToString();
                            _rowMNOT["S_StdOTDay"] = item["S_StdOTDay"].ToString();
                            _rowMNOT["S_ReqOTDay"] = item["S_ReqOTDay"].ToString();
                            _rowMNOT["S_ActOTDay"] = item["S_ActOTDay"].ToString();
                            _rowMNOT["S_StdOTNight"] = item["S_StdOTNight"].ToString();
                            _rowMNOT["S_ReqOTNight"] = item["S_ReqOTNight"].ToString();
                            _rowMNOT["S_ActOTNight"] = item["S_ActOTNight"].ToString();

                            MPCount_D = Convert.ToInt16(item["S_StdMPday"].ToString());
                            MPCount_N = Convert.ToInt16(item["S_StdMPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["S_ACtMPday"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["S_ActMPNight"].ToString());

                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["S_ReqOTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["S_ReqOTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["S_ActOTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["S_ActOTNight"].ToString());

                            //   if ((setDate.ToString("yyyy-MM-dd") == EndYesterday.ToString("yyyy-MM-dd"))
                            //|| (setyesterday.ToString("yyyy-MM-dd") == Endtoday.ToString("yyyy-MM-dd")))
                            //{
                            //if (setDate.ToString("yyyy-MM-dd") <= Endtoday.ToString("yyyy-MM-dd"))
                            if ((FlagInsert == 1) && (setDate >= EndYesterday) && (setDate <= dateEnd) && (_Type == "DIRECTALL"))
                            //if (setDate <= Endtoday)
                            {
                                //  Endtoday
                                SqlCommand UpdateMNOT = new SqlCommand();
                                UpdateMNOT.CommandText = "Update  BC_MANPOWER  " +
                                        " set STD_MPDay ='" + _rowMNOT["S_StdMPday"].ToString() + "',ACT_MPDay ='" + _rowMNOT["S_ACtMPday"].ToString() + "' " +
                                        ",STD_MPNight ='" + _rowMNOT["S_StdMPNight"].ToString() + "',ACT_MPNight ='" + _rowMNOT["S_ActMPNight"].ToString() + "' " +
                                        ",STD_OTDay ='" + _rowMNOT["S_StdOTDay"].ToString() + "',REQ_OTDay ='" + _rowMNOT["S_ReqOTDay"].ToString() + "',ACT_OTDay = '" + _rowMNOT["S_ActOTDay"].ToString() + "'" +
                                        ",STD_OTNight ='" + _rowMNOT["S_StdOTNight"].ToString() + "',REQ_OTNight ='" + _rowMNOT["S_ReqOTNight"].ToString() + "',ACT_OTNight = '" + _rowMNOT["S_ActOTNight"].ToString() + "'" +
                                        "where  Fiscal_year ='" + setDate.ToString("yyyy") + "' and Monthly ='" + ii + "' and Daily ='" + i + "' and ProductType ='" + Txt_Type + "'";

                                oConn.SqlExecute(UpdateMNOT, "DBBCS");
                            }
                       
                        }
                    }
                    else
                    {

                        foreach (DataRow item in dtMOT.Rows)
                        {
                            DataRow _rowMNOT = dtMNOT.NewRow();
                            _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                            _rowMNOT["Monthly"] = item["Monthly"].ToString();
                            _rowMNOT["Daily"] = item["Daily"].ToString();
                            _rowMNOT["S_StdMPday"] = item["S_StdMPday"].ToString();
                            _rowMNOT["S_ACtMPday"] = item["S_ACtMPday"].ToString();
                            _rowMNOT["S_StdMPNight"] = item["S_StdMPNight"].ToString();
                            _rowMNOT["S_ActMPNight"] = item["S_ActMPNight"].ToString();
                            _rowMNOT["S_StdOTDay"] = item["S_StdOTDay"].ToString();
                            _rowMNOT["S_ReqOTDay"] = item["S_ReqOTDay"].ToString();
                            _rowMNOT["S_ActOTDay"] = item["S_ActOTDay"].ToString();
                            _rowMNOT["S_StdOTNight"] = item["S_StdOTNight"].ToString();
                            _rowMNOT["S_ReqOTNight"] = item["S_ReqOTNight"].ToString();
                            _rowMNOT["S_ActOTNight"] = item["S_ActOTNight"].ToString();


                            if ((FlagInsert == 0) && (_Type == "DIRECTALL"))
                            {
                                SqlCommand InsertMNOT = new SqlCommand();

                                InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                                             ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                                             ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                                             " VALUES ('" + setDate.ToString("yyyy") + "','" + ii + "','" + i + "','" + Txt_Type + "' " +
                                             ",'" + _rowMNOT["S_StdMPday"].ToString() + "','" + _rowMNOT["S_ACtMPday"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdMPNight"].ToString() + "','" + _rowMNOT["S_ActMPNight"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdOTDay"].ToString() + "','" + _rowMNOT["S_ReqOTDay"].ToString() + "','" + _rowMNOT["S_ActOTDay"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdOTNight"].ToString() + "','" + _rowMNOT["S_ReqOTNight"].ToString() + "','" + _rowMNOT["S_ActOTNight"].ToString() + "')";
                                oConn.SqlExecute(InsertMNOT, "DBBCS");
                            }


                            MPCount_D = Convert.ToInt16(item["S_StdMPday"].ToString());
                            MPCount_N = Convert.ToInt16(item["S_StdMPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["S_ACtMPday"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["S_ActMPNight"].ToString());

                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["S_ReqOTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["S_ReqOTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["S_ActOTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["S_ActOTNight"].ToString());
                            
                        }

                    }


                   
                    if ((setDate <= dateEnd) && (_Type == "DIRECTALL")|| (_Type == "OTDIRECTALL"))
                    {
                    MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                    //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                    DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);
                    //SUMMP_SHIFT = MPCountALL;
                    //SUMACT_MP = SUMOT_REQD + SUMOT_REQN;


                    // ** Man Power Attandance
                    mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                    mManPower.Xdate = i;

                    //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                    //  mManPower.SumMP_STD = SUMACT_MP;



                    mManPower.SumMPD = MPCount_D;
                    mManPower.SumMPN = MPCount_N;
                    mManPower.SumMP_ACTD = SumMP_ACTD;
                    mManPower.SumMP_ACTN = SumMP_ACTN;
                    if (SumMP_ACTD != 0)
                    {
                        mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                    }
                    else
                    {
                        mManPower.SumMP_DIFFD = 0;

                    }

                    if (SumMP_ACTN != 0)
                    {

                        mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                    }
                    else
                    {

                        mManPower.SumMP_DIFFN = 0;
                    }


                    // ** OT Req,ACT
                    mManPower.SumOT_ReqD = SumOT_ReqD;
                    mManPower.SumOT_ReqN = SumOT_ReqN;
                    mManPower.SumOT_ActD = SumOT_ActD;
                    mManPower.SumOT_ActN = SumOT_ActN;



                    //     mManPower.SumMPH = oItemMPP.SumMPH;
                    //mManPower.SumMP = SUMOT_ACTN + SUMOT_ACTD;
                    oListMP.Add(mManPower);

                    }
                    else  if ((setDate >dateEnd) && (_Type == "DIRECTALL")|| (_Type == "OTDIRECTALL"))
                    {
                        MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                        //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                        DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);
                        //SUMMP_SHIFT = MPCountALL;
                        //SUMACT_MP = SUMOT_REQD + SUMOT_REQN;


                        // ** Man Power Attandance
                        mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                        mManPower.Xdate = i;

                        //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                        //  mManPower.SumMP_STD = SUMACT_MP;



                        mManPower.SumMPD = 0;
                        mManPower.SumMPN = 0;
                        mManPower.SumMP_ACTD = 0;
                        mManPower.SumMP_ACTN = 0;
                            mManPower.SumMP_DIFFD = 0;
                            mManPower.SumMP_DIFFN = 0;
                        // ** OT Req,ACT
                        mManPower.SumOT_ReqD = 0;
                        mManPower.SumOT_ReqN = 0;
                        mManPower.SumOT_ActD = 0;
                        mManPower.SumOT_ActN = 0;
                        oListMP.Add(mManPower);
                    
                    }
                    MPCount_D = 0;
                    MPCount_N = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;
                    SumOT_ReqD = 0;
                    SumOT_ReqN = 0;
                    SumOT_ActD = 0;
                    SumOT_ActN = 0;
                }
                //}
            }
            else
            {
                for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                {
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);
                    int SUMOT_REQD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
                    int SUMOT_REQN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
                    int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
                    int SUMMP_SHIFT = 0, SUMACT_MP = 0;
                    // DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


                    SqlCommand sqlMNOT = new SqlCommand();


                    sqlMNOT.CommandText = " select Fiscal_year,Monthly,Daily, sum(STD_MPDay) as S_StdMPday, sum(ACT_MPDay) as S_ACtMPday " +
                      " , sum(STD_MPNight) as S_StdMPNight " +
                       " ,sum(ACT_MPNight) as S_ActMPNight " +
                        " ,sum(STD_OTDay) as S_StdOTDay " +
                        " ,sum(REQ_OTDay) as S_ReqOTDay " +
                        " ,sum(ACT_OTDay) as S_ActOTDay" +
                        " ,sum(STD_OTNight) as S_StdOTNight " +
                        " ,sum(REQ_OTNight) as S_ReqOTNight " +
                        " ,sum(ACT_OTNight) as S_ActOTNight " +
                        " FROM BC_MANPOWER" +
                       "  where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' " +
                        " and Daily = '" + i + "' " +
                        " group by Fiscal_year,Monthly,Daily";



                    DataTable dtMOT = oConn.SqlGet(sqlMNOT, "DBBCS");



                    //   string InsertDD;

                    double MPOP = 4, MPLE = 50, MPFO = 90, MPSU = 100;
                    double totalOP = 0, totalOPOT1 = 0, totalOPOT15 = 0, totalOPOT2 = 0, totalOPOT3 = 0;
                    double totalLE = 0, totalLEOT1 = 0, totalLEOT15 = 0, totalLEOT2 = 0, totalLEOT3 = 0;
                    double totalFO = 0, totalFOOT1 = 0, totalFOOT15 = 0, totalFOOT2 = 0, totalFOOT3 = 0;
                    double totalSU = 0, totalSUOT1 = 0, totalSUOT15 = 0, totalSUOT2 = 0, totalSUOT3 = 0;
                    double TotalOT1 = 0, TotalOT15 = 0, TotalOT2 = 0, TotalOT3 = 0;
                    double CostOverall = 0;

                    DataTable dtEmp = new DataTable();
                    dtEmp.Columns.Add("Fiscal_year", typeof(string));
                    dtEmp.Columns.Add("ProductType", typeof(string));
                    dtEmp.Columns.Add("Monthly", typeof(string));

                    //for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                    //{
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);

                    sql.CommandText = "SELECT fiscal_year,Monthly,Daily,ProductType,STD_MPDay,ACT_MPDay" +
                      " ,STD_MPNight,ACT_MPNight,STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight" +
                        " ,ACT_OTNight  from BC_MANPOWER " +
                         " where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' and Daily = '" + i + "' and ProductType ='" + Txt_Type + "'";

                    DataTable dtCount = oConn.SqlGet(sql, "DBBCS");


                    if (dtCount.Rows.Count > 0)
                    {

                        FlagInsert = 1;

                    }
                    else
                    {
                        FlagInsert = 0;

                    }


                    if (dtCount.Rows.Count > 0)
                    {
                        DataTable dtMNOTPre = new DataTable();


                        dtMNOTPre.Columns.Add("Fiscal_year", typeof(string));
                        dtMNOTPre.Columns.Add("Monthly", typeof(string));
                        dtMNOTPre.Columns.Add("Daily", typeof(string));
                        dtMNOTPre.Columns.Add("ProductType", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdMPday", typeof(string));
                        dtMNOTPre.Columns.Add("S_ACtMPday", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdMPNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActMPNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_ReqOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdOTNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ReqOTNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActOTNight", typeof(string));

                        foreach (DataRow item in dtCount.Rows)
                        {
                            DataRow _rowMNOT = dtMNOTPre.NewRow();
                            _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                            _rowMNOT["Monthly"] = item["Monthly"].ToString();
                            _rowMNOT["Daily"] = item["Daily"].ToString();
                            _rowMNOT["ProductType"] = item["ProductType"].ToString();
                            _rowMNOT["S_StdMPday"] = item["STD_MPDay"].ToString();
                            _rowMNOT["S_ACtMPday"] = item["ACT_MPDay"].ToString();
                            _rowMNOT["S_StdMPNight"] = item["STD_MPNight"].ToString();
                            _rowMNOT["S_ActMPNight"] = item["ACT_MPNight"].ToString();
                            _rowMNOT["S_StdOTDay"] = item["STD_OTDay"].ToString();
                            _rowMNOT["S_ReqOTDay"] = item["REQ_OTDay"].ToString();
                            _rowMNOT["S_ActOTDay"] = item["ACT_OTDay"].ToString();
                            _rowMNOT["S_StdOTNight"] = item["STD_OTNight"].ToString();
                            _rowMNOT["S_ReqOTNight"] = item["REQ_OTNight"].ToString();
                            _rowMNOT["S_ActOTNight"] = item["ACT_OTNight"].ToString();

                            MPCount_D = Convert.ToInt16(item["STD_MPDay"].ToString());
                            MPCount_N = Convert.ToInt16(item["STD_MPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());

                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["REQ_OTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["REQ_OTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["ACT_OTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["ACT_OTNight"].ToString());


                            if ((FlagInsert == 1) && (setDate >= EndYesterday) && (setDate <= dateEnd) && (_Type == "DIRECTALL"))
                            {
                                SqlCommand UpdateMNOT = new SqlCommand();
                                UpdateMNOT.CommandText = "Update  BC_MANPOWER  " +
                                        " set STD_MPDay ='" + _rowMNOT["S_StdMPday"].ToString() + "',ACT_MPDay ='" + _rowMNOT["S_ACtMPday"].ToString() + "' " +
                                        ",STD_MPNight ='" + _rowMNOT["S_StdMPNight"].ToString() + "',ACT_MPNight ='" + _rowMNOT["S_ActMPNight"].ToString() + "' " +
                                        ",STD_OTDay ='" + _rowMNOT["S_StdOTDay"].ToString() + "',REQ_OTDay ='" + _rowMNOT["S_ReqOTDay"].ToString() + "',ACT_OTDay = '" + _rowMNOT["S_ActOTDay"].ToString() + "'" +
                                        ",STD_OTNight ='" + _rowMNOT["S_StdOTNight"].ToString() + "',REQ_OTNight ='" + _rowMNOT["S_ReqOTNight"].ToString() + "',ACT_OTNight = '" + _rowMNOT["S_ActOTNight"].ToString() + "'" +
                                        "where  Fiscal_year ='" + setDate.ToString("yyyy") + "' and Monthly ='" + ii + "' and Daily ='" + i + "' and ProductType ='" + Txt_Type + "'";

                                oConn.SqlExecute(UpdateMNOT, "DBBCS");
                            }
                           
                        }
                    }
                    else
                    {

                        foreach (DataRow item in dtMOT.Rows)
                        {
                            DataRow _rowMNOT = dtMNOT.NewRow();
                            _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                            _rowMNOT["Monthly"] = item["Monthly"].ToString();
                            _rowMNOT["Daily"] = item["Daily"].ToString();
                            _rowMNOT["S_StdMPday"] = item["S_StdMPday"].ToString();
                            _rowMNOT["S_ACtMPday"] = item["S_ACtMPday"].ToString();
                            _rowMNOT["S_StdMPNight"] = item["S_StdMPNight"].ToString();
                            _rowMNOT["S_ActMPNight"] = item["S_ActMPNight"].ToString();
                            _rowMNOT["S_StdOTDay"] = item["S_StdOTDay"].ToString();
                            _rowMNOT["S_ReqOTDay"] = item["S_ReqOTDay"].ToString();
                            _rowMNOT["S_ActOTDay"] = item["S_ActOTDay"].ToString();
                            _rowMNOT["S_StdOTNight"] = item["S_StdOTNight"].ToString();
                            _rowMNOT["S_ReqOTNight"] = item["S_ReqOTNight"].ToString();
                            _rowMNOT["S_ActOTNight"] = item["S_ActOTNight"].ToString();


                            if ((FlagInsert == 0) && (_Type == "DIRECTALL"))
                            {
                                SqlCommand InsertMNOT = new SqlCommand();

                                InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                                             ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                                             ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                                             " VALUES ('" + setDate.ToString("yyyy") + "','" + ii + "','" + i + "','" + Txt_Type + "' " +
                                             ",'" + _rowMNOT["S_StdMPday"].ToString() + "','" + _rowMNOT["S_ACtMPday"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdMPNight"].ToString() + "','" + _rowMNOT["S_ActMPNight"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdOTDay"].ToString() + "','" + _rowMNOT["S_ReqOTDay"].ToString() + "','" + _rowMNOT["S_ActOTDay"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdOTNight"].ToString() + "','" + _rowMNOT["S_ReqOTNight"].ToString() + "','" + _rowMNOT["S_ActOTNight"].ToString() + "')";
                                oConn.SqlExecute(InsertMNOT, "DBBCS");

                            }

                            MPCount_D = Convert.ToInt16(item["S_StdMPday"].ToString());
                            MPCount_N = Convert.ToInt16(item["S_StdMPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["S_ACtMPday"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["S_ActMPNight"].ToString());

                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["S_ReqOTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["S_ReqOTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["S_ActOTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["S_ActOTNight"].ToString());
                           
                        }

                    }


                    MPCount_D = 0;
                    MPCount_N = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;
                    SumOT_ReqD = 0;
                    SumOT_ReqN = 0;
                    SumOT_ActD = 0;
                    SumOT_ActN = 0;
                }
            }

        }
        return oListMP;
    }
    public List<MMPInfo.MPAllChartInfo> GetChartMPDailyINDIRECTALL(int _Month, DateTime _DataDate, string _Type)
    {

        List<MMPInfo.MPAllChartInfo> oListMP = new List<MMPInfo.MPAllChartInfo>();


        string[] ArryPrd = { "1YC", "2YC", "SCR", "1YC/3", "ODM" };
        //string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702", "4310", "4320", "4510", "4720", "8120" };
        string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702" };
        // string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702" };
        string[] ArryPrdFac1 = { "1101", "1102" };
        string[] ArryPrdFac1M = { "1101" };
        string[] ArryPrdFac1A = { "1102" };
        string[] ArryPrdFac2 = { "1201", "1202", "1301", "1302", "1401", "1402" };
        string[] ArryPrdFac2M = { "1201" };
        string[] ArryPrdFac2A = { "1202" };
        string[] ArryPrdFac2Mo = { "1401" };
        string[] ArryPrdFac2MoA = { "1402" };
        string[] ArryPrdSCA = { "1301", "1302" };
        string[] ArryPrdSCRM = { "1301" };
        string[] ArryPrdSCRA = { "1302" };
        string[] ArryPrdFac3 = { "1701", "1702" };
        string[] ArryPrdFac3M = { "1701" };
        string[] ArryPrdFac3A = { "1702" };
        string[] ArryPrdODM = { "1501" };

        string[] ArryPeriod = { "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod1 = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod2 = { "PRD_JAN", "PRD_FEB", "PRD_MAR", "PRD_APR", "PRD_MAY", "PRD_JUN", "PRD_JUL", "PRD_AUG", "PRD_SEP", "PRD_OCT", "PRD_NOV", "PRD_DEC" };
        int[] ArryMonth = { 4, 5, 6, 7, 8, 9, 10, 11, 12 };
        int[] ArryMonth1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };


        string pAccGroup = "EXP";
        string pBudgetType = "DI";
        string pYear = _DataDate.ToString("yyyy");
        string pMonth = _DataDate.ToString("MM");
        DateTime _LastYear = new DateTime();
        DateTime _Last2Year = new DateTime();
        DateTime _Last3Year = new DateTime();
        _LastYear = _DataDate.AddYears(-1);
        _Last2Year = _DataDate.AddYears(-2);
        _Last3Year = _DataDate.AddYears(-3);
        string pLastYear = _LastYear.ToString("yyyy");
        string pLast2Year = _Last2Year.ToString("yyyy");
        string pLast3Year = _Last3Year.ToString("yyyy");
        string TxtModel = " ";
        string Txt_Type = "";
        int FlagInsert = 1;
        #region init



        int[] _PrdActual = new int[12];

        string[] ArrySeires5 = new string[5];
        Decimal[] ArrySeiresValue5 = new Decimal[5];



        #endregion

        string[] ArryLoop = new string[0];
        string ProductType = "";
        string TargetType = "";
        if (_Type == "ALL")
        {
            ArryLoop = ArryPrdALL;
            TargetType = "DCI";
        }
        else if ((_Type == "INDIRECTALL") || (_Type == "OTINDIRECTALL"))
        {
            //ArryLoop = ArryPrdFac1;
            //ProductType = "1YC";
            //TargetType = "1YC";
            //TxtModel = "1YC%";
            //Factory = "1";
            Txt_Type = "INDIRECTALL";

        }


        DateTime strDate = new DateTime(DateTime.Now.Year, _Month, 1, 0, 0, 0);
        DateTime endDate = strDate.AddMonths(1).Date + new TimeSpan(0, 0, 0);

        DateTime strHr = DateTime.Today + new TimeSpan(08, 00, 00);
        DateTime dateEnd = DateTime.Today + new TimeSpan(20, 00, 00);
        DateTime Endtoday = DateTime.Now;
        DateTime EndYesterday = DateTime.Today - new TimeSpan(24, 00, 00);


        int MonthSelect = _Month;
        int PrevMonth = _Month - 1;
        int NextMonth = _Month + 1;


        //------------- Create column header OT  -----------------


      
        DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);
        DateTime setyesterday = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sql = new SqlCommand();

      
        //  lbMP.Text = dtEmp.Rows.Count.ToString();
        //---------------- Get Employeee of Line --------------        

        //----------------- Create row content Manpower ------------------

        MMPInfo.MPAllChartInfo oItemMPP = new MMPInfo.MPAllChartInfo();
        int ii = 0;

        double accuOP1 = 0, accuOP15 = 0, accuOP2 = 0, accuOP3 = 0, CountMPOP = 1;
        double accuLE1 = 0, accuLE15 = 0, accuLE2 = 0, accuLE3 = 0, CountMPLE = 1;
        double accuFO1 = 0, accuFO15 = 0, accuFO2 = 0, accuFO3 = 0, CountMPFO = 1;
        double accuSU1 = 0, accuSU15 = 0, accuSU2 = 0, accuSU3 = 0, CountMPSU = 1;
        double CostOverAllSum = 0;
        // double CostOverAll = 0;




        for (ii = 1; ii <= MonthSelect; ii++)
        {
            //Prd = 0;
            //if (dtBCPD.Rows.Count > 0)
            //{

            //    foreach (DataRow _rowbcpd in dtBCPD.Rows)
            //    {

            //        if (_Type == "FAC2")
            //        {
            //            if (Convert.ToString(_rowbcpd["ProductType"].ToString()) == "2YC" || Convert.ToString(_rowbcpd["ProductType"].ToString()) == "SCR")
            //            {
            //                PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
            //                Prd += PrdMonth;
            //                //    SumPrd += Prd;
            //            }
            //        }
            //        else if (_Type == "ALL")
            //        {
            //            int k = 0;
            //            for (k = 1; k <= ArryPrd.Count(); k++)
            //            {


            //                if (ArryPrd[k - 1] == Convert.ToString(_rowbcpd["ProductType"].ToString()))
            //                {
            //                    if (ArryPrd[k - 1] == "ODM")
            //                    {
            //                        PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
            //                        PrdMonth = PrdMonth / 20;
            //                    }
            //                    else
            //                    {
            //                        PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
            //                    }
            //                    Prd += PrdMonth;


            //                }
            //                PrdMonth = 0;
            //            }
            //        }
            //        else

            //            if (ProductType == Convert.ToString(_rowbcpd["ProductType"].ToString()))
            //            {
            //                Prd = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
            //                // SumPrd += Prd;
            //            }


            //        // SumPrd += Prd;
            //    }
            //    SumPrd += Prd;

            //}


            if (ii < MonthSelect)
            {
                setDate = new DateTime(DateTime.Now.Year, ii, 1);

            }
            else if (ii == MonthSelect)
            {
                setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);

            }
            else if (ii > MonthSelect)
            {

                setDate = new DateTime(DateTime.Now.Year, NextMonth, 1);

            }
            int __Month = setDate.Month;


            // Start Check Working Time OT in DB

            //---------------- Get Employeee of Line --------------
            DataTable dtMNOT = new DataTable();


            dtMNOT.Columns.Add("Fiscal_year", typeof(string));
            dtMNOT.Columns.Add("Monthly", typeof(string));
            dtMNOT.Columns.Add("Daily", typeof(string));
            dtMNOT.Columns.Add("S_StdMPday", typeof(string));
            dtMNOT.Columns.Add("S_ACtMPday", typeof(string));
            dtMNOT.Columns.Add("S_StdMPNight", typeof(string));
            dtMNOT.Columns.Add("S_ActMPNight", typeof(string));
            dtMNOT.Columns.Add("S_StdOTDay", typeof(string));
            dtMNOT.Columns.Add("S_ReqOTDay", typeof(string));
            dtMNOT.Columns.Add("S_ActOTDay", typeof(string));
            dtMNOT.Columns.Add("S_StdOTNight", typeof(string));
            dtMNOT.Columns.Add("S_ReqOTNight", typeof(string));
            dtMNOT.Columns.Add("S_ActOTNight", typeof(string));

            //--------------- Get Employee working Time ---------------------
            int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
            int FlagUdate = 0;
            int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;
            string DatetoDay = "";
            int Xdate = 0;
            int Yester = 0;


            if (ii == MonthSelect)
            {

                for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                {
                    if (i >= 2)
                    {
                        Yester = i - 1;
                        setyesterday = new DateTime(DateTime.Now.Year, setDate.Month, Yester);

                    }
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);



                    //if ((setDate >= EndYesterday) && (setDate <= Endtoday))
                    //{
                    //if (Endtoday.ToString("yyyy-MM-dd") == setDate.ToString("yyyy-MM-dd"))
                    //   {
                    int SUMOT_REQD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
                    int SUMOT_REQN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
                    int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
                    int SUMMP_SHIFT = 0, SUMACT_MP = 0;
                    // DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


                    SqlCommand sqlMNOT = new SqlCommand();


                    sqlMNOT.CommandText = " select Fiscal_year,Monthly,Daily, sum(STD_MPDay) as S_StdMPday, sum(ACT_MPDay) as S_ACtMPday " +
                      " , sum(STD_MPNight) as S_StdMPNight " +
                       " ,sum(ACT_MPNight) as S_ActMPNight " +
                        " ,sum(STD_OTDay) as S_StdOTDay " +
                        " ,sum(REQ_OTDay) as S_ReqOTDay " +
                        " ,sum(ACT_OTDay) as S_ActOTDay" +
                        " ,sum(STD_OTNight) as S_StdOTNight " +
                        " ,sum(REQ_OTNight) as S_ReqOTNight " +
                        " ,sum(ACT_OTNight) as S_ActOTNight " +
                        " FROM BC_MANPOWER" +
                       "  where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' " +
                        " and Daily = '" + i + "' and (  ProductType = 'INMAN'  or ProductType = 'INIE'  or ProductType = 'INFAC1'  or ProductType = 'INFAC2' or ProductType = 'INFAC3' " +
                        " or ProductType = 'INODM' or ProductType = 'INPS' or ProductType = 'INIM' or ProductType = 'INDC' " +
                        " or ProductType = 'INMTM' or ProductType = 'INMTA' or ProductType = 'INMTTPM' or ProductType = 'INMTPM'" +
                        " or ProductType = 'INQC' or ProductType = 'INQA' or ProductType = 'INQS' or ProductType = 'INDD' " +
                        " or ProductType = 'INCD' or ProductType = 'INSPU'or ProductType = 'INPU' or ProductType = 'INSP' or ProductType = 'INPN'" +
                        " or ProductType = 'INENA' or ProductType = 'INENM' or ProductType = 'INENMOT' or ProductType = 'INUT'" +
                        " or ProductType = 'INEC' )" +

                        " group by Fiscal_year,Monthly,Daily";



                    DataTable dtMOT = oConn.SqlGet(sqlMNOT, "DBBCS");



                    //   string InsertDD;

                    double MPOP = 4, MPLE = 50, MPFO = 90, MPSU = 100;
                    double totalOP = 0, totalOPOT1 = 0, totalOPOT15 = 0, totalOPOT2 = 0, totalOPOT3 = 0;
                    double totalLE = 0, totalLEOT1 = 0, totalLEOT15 = 0, totalLEOT2 = 0, totalLEOT3 = 0;
                    double totalFO = 0, totalFOOT1 = 0, totalFOOT15 = 0, totalFOOT2 = 0, totalFOOT3 = 0;
                    double totalSU = 0, totalSUOT1 = 0, totalSUOT15 = 0, totalSUOT2 = 0, totalSUOT3 = 0;
                    double TotalOT1 = 0, TotalOT15 = 0, TotalOT2 = 0, TotalOT3 = 0;
                    double CostOverall = 0;

                    DataTable dtEmp = new DataTable();
                    dtEmp.Columns.Add("Fiscal_year", typeof(string));
                    dtEmp.Columns.Add("ProductType", typeof(string));
                    dtEmp.Columns.Add("Monthly", typeof(string));

                    //for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                    //{
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);

                    sql.CommandText = "SELECT fiscal_year,Monthly,Daily,ProductType,STD_MPDay,ACT_MPDay" +
                      " ,STD_MPNight,ACT_MPNight,STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight" +
                        " ,ACT_OTNight  from BC_MANPOWER " +
                         " where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' and Daily = '" + i + "' and ProductType ='" + Txt_Type + "'";

                    DataTable dtCount = oConn.SqlGet(sql, "DBBCS");
                    if (dtCount.Rows.Count > 0)
                    {

                        FlagInsert = 1;

                    }
                    else
                    {
                        FlagInsert = 0;

                    }

                  
                    if (dtCount.Rows.Count > 0)
                    {
                        DataTable dtMNOTPre = new DataTable();


                        dtMNOTPre.Columns.Add("Fiscal_year", typeof(string));
                        dtMNOTPre.Columns.Add("Monthly", typeof(string));
                        dtMNOTPre.Columns.Add("Daily", typeof(string));
                        dtMNOTPre.Columns.Add("ProductType", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdMPday", typeof(string));
                        dtMNOTPre.Columns.Add("S_ACtMPday", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdMPNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActMPNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_ReqOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdOTNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ReqOTNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActOTNight", typeof(string));

                        foreach (DataRow item in dtMOT.Rows)
                        {
                            DataRow _rowMNOT = dtMNOTPre.NewRow();

                            //**** DataRow _rowMNOT = dtMNOT.NewRow();
                            _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                            _rowMNOT["Monthly"] = item["Monthly"].ToString();
                            _rowMNOT["Daily"] = item["Daily"].ToString();
                            _rowMNOT["S_StdMPday"] = item["S_StdMPday"].ToString();
                            _rowMNOT["S_ACtMPday"] = item["S_ACtMPday"].ToString();
                            _rowMNOT["S_StdMPNight"] = item["S_StdMPNight"].ToString();
                            _rowMNOT["S_ActMPNight"] = item["S_ActMPNight"].ToString();
                            _rowMNOT["S_StdOTDay"] = item["S_StdOTDay"].ToString();
                            _rowMNOT["S_ReqOTDay"] = item["S_ReqOTDay"].ToString();
                            _rowMNOT["S_ActOTDay"] = item["S_ActOTDay"].ToString();
                            _rowMNOT["S_StdOTNight"] = item["S_StdOTNight"].ToString();
                            _rowMNOT["S_ReqOTNight"] = item["S_ReqOTNight"].ToString();
                            _rowMNOT["S_ActOTNight"] = item["S_ActOTNight"].ToString();

                            MPCount_D = Convert.ToInt16(item["S_StdMPday"].ToString());
                            MPCount_N = Convert.ToInt16(item["S_StdMPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["S_ACtMPday"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["S_ActMPNight"].ToString());

                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["S_ReqOTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["S_ReqOTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["S_ActOTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["S_ActOTNight"].ToString());

                            //   if ((setDate.ToString("yyyy-MM-dd") == EndYesterday.ToString("yyyy-MM-dd"))
                            //|| (setyesterday.ToString("yyyy-MM-dd") == Endtoday.ToString("yyyy-MM-dd")))
                            //{
                            //if (setDate.ToString("yyyy-MM-dd") <= Endtoday.ToString("yyyy-MM-dd"))
                            if ((FlagInsert == 1) && (setDate >= EndYesterday) && (setDate <= dateEnd) && (_Type == "INDIRECTALL"))
                            //if (setDate <= Endtoday)
                            {
                                //  Endtoday
                                SqlCommand UpdateMNOT = new SqlCommand();
                                UpdateMNOT.CommandText = "Update  BC_MANPOWER  " +
                                        " set STD_MPDay ='" + _rowMNOT["S_StdMPday"].ToString() + "',ACT_MPDay ='" + _rowMNOT["S_ACtMPday"].ToString() + "' " +
                                        ",STD_MPNight ='" + _rowMNOT["S_StdMPNight"].ToString() + "',ACT_MPNight ='" + _rowMNOT["S_ActMPNight"].ToString() + "' " +
                                        ",STD_OTDay ='" + _rowMNOT["S_StdOTDay"].ToString() + "',REQ_OTDay ='" + _rowMNOT["S_ReqOTDay"].ToString() + "',ACT_OTDay = '" + _rowMNOT["S_ActOTDay"].ToString() + "'" +
                                        ",STD_OTNight ='" + _rowMNOT["S_StdOTNight"].ToString() + "',REQ_OTNight ='" + _rowMNOT["S_ReqOTNight"].ToString() + "',ACT_OTNight = '" + _rowMNOT["S_ActOTNight"].ToString() + "'" +
                                        "where  Fiscal_year ='" + setDate.ToString("yyyy") + "' and Monthly ='" + ii + "' and Daily ='" + i + "' and ProductType ='" + Txt_Type + "'";

                                oConn.SqlExecute(UpdateMNOT, "DBBCS");
                            }
                          
                        }
                    }
                    else
                    {

                        foreach (DataRow item in dtMOT.Rows)
                        {
                            DataRow _rowMNOT = dtMNOT.NewRow();
                            _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                            _rowMNOT["Monthly"] = item["Monthly"].ToString();
                            _rowMNOT["Daily"] = item["Daily"].ToString();
                            _rowMNOT["S_StdMPday"] = item["S_StdMPday"].ToString();
                            _rowMNOT["S_ACtMPday"] = item["S_ACtMPday"].ToString();
                            _rowMNOT["S_StdMPNight"] = item["S_StdMPNight"].ToString();
                            _rowMNOT["S_ActMPNight"] = item["S_ActMPNight"].ToString();
                            _rowMNOT["S_StdOTDay"] = item["S_StdOTDay"].ToString();
                            _rowMNOT["S_ReqOTDay"] = item["S_ReqOTDay"].ToString();
                            _rowMNOT["S_ActOTDay"] = item["S_ActOTDay"].ToString();
                            _rowMNOT["S_StdOTNight"] = item["S_StdOTNight"].ToString();
                            _rowMNOT["S_ReqOTNight"] = item["S_ReqOTNight"].ToString();
                            _rowMNOT["S_ActOTNight"] = item["S_ActOTNight"].ToString();


                            if ((FlagInsert == 0) && (_Type == "INDIRECTALL"))
                            {
                                SqlCommand InsertMNOT = new SqlCommand();

                                InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                                             ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                                             ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                                             " VALUES ('" + setDate.ToString("yyyy") + "','" + ii + "','" + i + "','" + Txt_Type + "' " +
                                             ",'" + _rowMNOT["S_StdMPday"].ToString() + "','" + _rowMNOT["S_ACtMPday"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdMPNight"].ToString() + "','" + _rowMNOT["S_ActMPNight"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdOTDay"].ToString() + "','" + _rowMNOT["S_ReqOTDay"].ToString() + "','" + _rowMNOT["S_ActOTDay"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdOTNight"].ToString() + "','" + _rowMNOT["S_ReqOTNight"].ToString() + "','" + _rowMNOT["S_ActOTNight"].ToString() + "')";
                                oConn.SqlExecute(InsertMNOT, "DBBCS");

                            }

                            MPCount_D = Convert.ToInt16(item["S_StdMPday"].ToString());
                            MPCount_N = Convert.ToInt16(item["S_StdMPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["S_ACtMPday"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["S_ActMPNight"].ToString());

                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["S_ReqOTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["S_ReqOTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["S_ActOTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["S_ActOTNight"].ToString());
                           
                        }

                    }



                    if ((setDate <= dateEnd) && (_Type == "INDIRECTALL") || (_Type == "OTINDIRECTALL"))
                    {

                        MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                        //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                        DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);
                        //SUMMP_SHIFT = MPCountALL;
                        //SUMACT_MP = SUMOT_REQD + SUMOT_REQN;


                        // ** Man Power Attandance
                        mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                        mManPower.Xdate = i;

                        //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                        //  mManPower.SumMP_STD = SUMACT_MP;



                        mManPower.SumMPD = MPCount_D;
                        mManPower.SumMPN = MPCount_N;
                        mManPower.SumMP_ACTD = SumMP_ACTD;
                        mManPower.SumMP_ACTN = SumMP_ACTN;
                        if (SumMP_ACTD != 0)
                        {
                            mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                        }
                        else
                        {
                            mManPower.SumMP_DIFFD = 0;

                        }

                        if (SumMP_ACTN != 0)
                        {

                            mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                        }
                        else
                        {

                            mManPower.SumMP_DIFFN = 0;
                        }

                        // ** OT Req,ACT
                        mManPower.SumOT_ReqD = SumOT_ReqD;
                        mManPower.SumOT_ReqN = SumOT_ReqN;
                        mManPower.SumOT_ActD = SumOT_ActD;
                        mManPower.SumOT_ActN = SumOT_ActN;
                        oListMP.Add(mManPower);
                    }
                    else if ((setDate > dateEnd) && (_Type == "INDIRECTALL") || (_Type == "OTINDIRECTALL"))
                    {

                        MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                        //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                        DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);
                        // ** Man Power Attandance
                        mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                        mManPower.Xdate = i;
                        mManPower.SumMPD = 0;
                        mManPower.SumMPN = 0;
                        mManPower.SumMP_ACTD = 0;
                        mManPower.SumMP_ACTN = 0;
                            mManPower.SumMP_DIFFD = 0;
                            mManPower.SumMP_DIFFN = 0;
                        // ** OT Req,ACT
                        mManPower.SumOT_ReqD = 0;
                        mManPower.SumOT_ReqN = 0;
                        mManPower.SumOT_ActD = 0;
                        mManPower.SumOT_ActN = 0;
                        oListMP.Add(mManPower);

                    }
                    MPCount_D = 0;
                    MPCount_N = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;
                    SumOT_ReqD = 0;
                    SumOT_ReqN = 0;
                    SumOT_ActD = 0;
                    SumOT_ActN = 0;
                }
                //}
            }
            else
            {
                for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                {
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);
                    int SUMOT_REQD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
                    int SUMOT_REQN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
                    int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
                    int SUMMP_SHIFT = 0, SUMACT_MP = 0;
                    // DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


                    SqlCommand sqlMNOT = new SqlCommand();


                    sqlMNOT.CommandText = " select Fiscal_year,Monthly,Daily, sum(STD_MPDay) as S_StdMPday, sum(ACT_MPDay) as S_ACtMPday " +
                      " , sum(STD_MPNight) as S_StdMPNight " +
                       " ,sum(ACT_MPNight) as S_ActMPNight " +
                        " ,sum(STD_OTDay) as S_StdOTDay " +
                        " ,sum(REQ_OTDay) as S_ReqOTDay " +
                        " ,sum(ACT_OTDay) as S_ActOTDay" +
                        " ,sum(STD_OTNight) as S_StdOTNight " +
                        " ,sum(REQ_OTNight) as S_ReqOTNight " +
                        " ,sum(ACT_OTNight) as S_ActOTNight " +
                        " FROM BC_MANPOWER" +
                       "  where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' " +
                        " and Daily = '" + i + "' " +
                        " group by Fiscal_year,Monthly,Daily";



                    DataTable dtMOT = oConn.SqlGet(sqlMNOT, "DBBCS");



                    //   string InsertDD;

                    double MPOP = 4, MPLE = 50, MPFO = 90, MPSU = 100;
                    double totalOP = 0, totalOPOT1 = 0, totalOPOT15 = 0, totalOPOT2 = 0, totalOPOT3 = 0;
                    double totalLE = 0, totalLEOT1 = 0, totalLEOT15 = 0, totalLEOT2 = 0, totalLEOT3 = 0;
                    double totalFO = 0, totalFOOT1 = 0, totalFOOT15 = 0, totalFOOT2 = 0, totalFOOT3 = 0;
                    double totalSU = 0, totalSUOT1 = 0, totalSUOT15 = 0, totalSUOT2 = 0, totalSUOT3 = 0;
                    double TotalOT1 = 0, TotalOT15 = 0, TotalOT2 = 0, TotalOT3 = 0;
                    double CostOverall = 0;

                    DataTable dtEmp = new DataTable();
                    dtEmp.Columns.Add("Fiscal_year", typeof(string));
                    dtEmp.Columns.Add("ProductType", typeof(string));
                    dtEmp.Columns.Add("Monthly", typeof(string));

                    //for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                    //{
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);

                    sql.CommandText = "SELECT fiscal_year,Monthly,Daily,ProductType,STD_MPDay,ACT_MPDay" +
                      " ,STD_MPNight,ACT_MPNight,STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight" +
                        " ,ACT_OTNight  from BC_MANPOWER " +
                         " where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' and Daily = '" + i + "' and ProductType ='" + Txt_Type + "'";

                    DataTable dtCount = oConn.SqlGet(sql, "DBBCS");

                    if (dtCount.Rows.Count > 0)
                    {

                        FlagInsert = 1;

                    }
                    else
                    {
                        FlagInsert = 0;

                    }
                  
                    if (dtCount.Rows.Count > 0)
                    {
                        DataTable dtMNOTPre = new DataTable();


                        dtMNOTPre.Columns.Add("Fiscal_year", typeof(string));
                        dtMNOTPre.Columns.Add("Monthly", typeof(string));
                        dtMNOTPre.Columns.Add("Daily", typeof(string));
                        dtMNOTPre.Columns.Add("ProductType", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdMPday", typeof(string));
                        dtMNOTPre.Columns.Add("S_ACtMPday", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdMPNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActMPNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_ReqOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdOTNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ReqOTNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActOTNight", typeof(string));

                        foreach (DataRow item in dtCount.Rows)
                        {
                            DataRow _rowMNOT = dtMNOTPre.NewRow();
                            _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                            _rowMNOT["Monthly"] = item["Monthly"].ToString();
                            _rowMNOT["Daily"] = item["Daily"].ToString();
                            _rowMNOT["ProductType"] = item["ProductType"].ToString();
                            _rowMNOT["S_StdMPday"] = item["STD_MPDay"].ToString();
                            _rowMNOT["S_ACtMPday"] = item["ACT_MPDay"].ToString();
                            _rowMNOT["S_StdMPNight"] = item["STD_MPNight"].ToString();
                            _rowMNOT["S_ActMPNight"] = item["ACT_MPNight"].ToString();
                            _rowMNOT["S_StdOTDay"] = item["STD_OTDay"].ToString();
                            _rowMNOT["S_ReqOTDay"] = item["REQ_OTDay"].ToString();
                            _rowMNOT["S_ActOTDay"] = item["ACT_OTDay"].ToString();
                            _rowMNOT["S_StdOTNight"] = item["STD_OTNight"].ToString();
                            _rowMNOT["S_ReqOTNight"] = item["REQ_OTNight"].ToString();
                            _rowMNOT["S_ActOTNight"] = item["ACT_OTNight"].ToString();

                            MPCount_D = Convert.ToInt16(item["STD_MPDay"].ToString());
                            MPCount_N = Convert.ToInt16(item["STD_MPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());

                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["REQ_OTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["REQ_OTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["ACT_OTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["ACT_OTNight"].ToString());



                            if ((FlagInsert == 1) && (setDate >= EndYesterday) && (setDate <= dateEnd) && (_Type == "INDIRECTALL"))
                            {
                                SqlCommand UpdateMNOT = new SqlCommand();
                                UpdateMNOT.CommandText = "Update  BC_MANPOWER  " +
                                        " set STD_MPDay ='" + _rowMNOT["S_StdMPday"].ToString() + "',ACT_MPDay ='" + _rowMNOT["S_ACtMPday"].ToString() + "' " +
                                        ",STD_MPNight ='" + _rowMNOT["S_StdMPNight"].ToString() + "',ACT_MPNight ='" + _rowMNOT["S_ActMPNight"].ToString() + "' " +
                                        ",STD_OTDay ='" + _rowMNOT["S_StdOTDay"].ToString() + "',REQ_OTDay ='" + _rowMNOT["S_ReqOTDay"].ToString() + "',ACT_OTDay = '" + _rowMNOT["S_ActOTDay"].ToString() + "'" +
                                        ",STD_OTNight ='" + _rowMNOT["S_StdOTNight"].ToString() + "',REQ_OTNight ='" + _rowMNOT["S_ReqOTNight"].ToString() + "',ACT_OTNight = '" + _rowMNOT["S_ActOTNight"].ToString() + "'" +
                                        "where  Fiscal_year ='" + setDate.ToString("yyyy") + "' and Monthly ='" + ii + "' and Daily ='" + i + "' and ProductType ='" + Txt_Type + "'";

                                oConn.SqlExecute(UpdateMNOT, "DBBCS");
                            }
                        
                        }
                    }
                    else
                    {

                        foreach (DataRow item in dtMOT.Rows)
                        {
                            DataRow _rowMNOT = dtMNOT.NewRow();
                            _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                            _rowMNOT["Monthly"] = item["Monthly"].ToString();
                            _rowMNOT["Daily"] = item["Daily"].ToString();
                            _rowMNOT["S_StdMPday"] = item["S_StdMPday"].ToString();
                            _rowMNOT["S_ACtMPday"] = item["S_ACtMPday"].ToString();
                            _rowMNOT["S_StdMPNight"] = item["S_StdMPNight"].ToString();
                            _rowMNOT["S_ActMPNight"] = item["S_ActMPNight"].ToString();
                            _rowMNOT["S_StdOTDay"] = item["S_StdOTDay"].ToString();
                            _rowMNOT["S_ReqOTDay"] = item["S_ReqOTDay"].ToString();
                            _rowMNOT["S_ActOTDay"] = item["S_ActOTDay"].ToString();
                            _rowMNOT["S_StdOTNight"] = item["S_StdOTNight"].ToString();
                            _rowMNOT["S_ReqOTNight"] = item["S_ReqOTNight"].ToString();
                            _rowMNOT["S_ActOTNight"] = item["S_ActOTNight"].ToString();

                            if ((FlagInsert == 0) && (Txt_Type == "INDIRECTALL"))
                            {

                                SqlCommand InsertMNOT = new SqlCommand();

                                InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                                             ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                                             ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                                             " VALUES ('" + setDate.ToString("yyyy") + "','" + ii + "','" + i + "','" + Txt_Type + "' " +
                                             ",'" + _rowMNOT["S_StdMPday"].ToString() + "','" + _rowMNOT["S_ACtMPday"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdMPNight"].ToString() + "','" + _rowMNOT["S_ActMPNight"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdOTDay"].ToString() + "','" + _rowMNOT["S_ReqOTDay"].ToString() + "','" + _rowMNOT["S_ActOTDay"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdOTNight"].ToString() + "','" + _rowMNOT["S_ReqOTNight"].ToString() + "','" + _rowMNOT["S_ActOTNight"].ToString() + "')";
                                oConn.SqlExecute(InsertMNOT, "DBBCS");

                            }

                            MPCount_D = Convert.ToInt16(item["S_StdMPday"].ToString());
                            MPCount_N = Convert.ToInt16(item["S_StdMPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["S_ACtMPday"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["S_ActMPNight"].ToString());

                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["S_ReqOTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["S_ReqOTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["S_ActOTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["S_ActOTNight"].ToString());
                          
                        }

                    }


                    MPCount_D = 0;
                    MPCount_N = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;
                    SumOT_ReqD = 0;
                    SumOT_ReqN = 0;
                    SumOT_ActD = 0;
                    SumOT_ActN = 0;
                }
            }

        }
        return oListMP;
    }
    public List<MMPInfo.MPAllChartInfo> GetChartMPDailyMPSGA(int _Month, DateTime _DataDate, string _Type)
    {

        List<MMPInfo.MPAllChartInfo> oListMP = new List<MMPInfo.MPAllChartInfo>();


        string[] ArryPrd = { "1YC", "2YC", "SCR", "1YC/3", "ODM" };
        //string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702", "4310", "4320", "4510", "4720", "8120" };
        string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702" };
        // string[] ArryPrdALL = { "1101", "1102", "1201", "1202", "1301", "1302", "1401", "1402", "1501", "1701", "1702" };
        string[] ArryPrdFac1 = { "1101", "1102" };
        string[] ArryPrdFac1M = { "1101" };
        string[] ArryPrdFac1A = { "1102" };
        string[] ArryPrdFac2 = { "1201", "1202", "1301", "1302", "1401", "1402" };
        string[] ArryPrdFac2M = { "1201" };
        string[] ArryPrdFac2A = { "1202" };
        string[] ArryPrdFac2Mo = { "1401" };
        string[] ArryPrdFac2MoA = { "1402" };
        string[] ArryPrdSCA = { "1301", "1302" };
        string[] ArryPrdSCRM = { "1301" };
        string[] ArryPrdSCRA = { "1302" };
        string[] ArryPrdFac3 = { "1701", "1702" };
        string[] ArryPrdFac3M = { "1701" };
        string[] ArryPrdFac3A = { "1702" };
        string[] ArryPrdODM = { "1501" };

        string[] ArryPeriod = { "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod1 = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
        string[] ArryPeriod2 = { "PRD_JAN", "PRD_FEB", "PRD_MAR", "PRD_APR", "PRD_MAY", "PRD_JUN", "PRD_JUL", "PRD_AUG", "PRD_SEP", "PRD_OCT", "PRD_NOV", "PRD_DEC" };
        int[] ArryMonth = { 4, 5, 6, 7, 8, 9, 10, 11, 12 };
        int[] ArryMonth1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };


        string pAccGroup = "EXP";
        string pBudgetType = "DI";
        string pYear = _DataDate.ToString("yyyy");
        string pMonth = _DataDate.ToString("MM");
        DateTime _LastYear = new DateTime();
        DateTime _Last2Year = new DateTime();
        DateTime _Last3Year = new DateTime();
        _LastYear = _DataDate.AddYears(-1);
        _Last2Year = _DataDate.AddYears(-2);
        _Last3Year = _DataDate.AddYears(-3);
        string pLastYear = _LastYear.ToString("yyyy");
        string pLast2Year = _Last2Year.ToString("yyyy");
        string pLast3Year = _Last3Year.ToString("yyyy");
        string TxtModel = " ";
        string Txt_Type = "";
        int FlagInsert = 1;
        #region init



        int[] _PrdActual = new int[12];

        string[] ArrySeires5 = new string[5];
        Decimal[] ArrySeiresValue5 = new Decimal[5];



        #endregion

        string[] ArryLoop = new string[0];
        string ProductType = "";
        string TargetType = "";
        if (_Type == "ALL")
        {
            ArryLoop = ArryPrdALL;
            TargetType = "DCI";
        }
        else if ((_Type == "MPSGA") || (_Type == "OTMPSGA"))
        {
            //ArryLoop = ArryPrdFac1;
            //ProductType = "1YC";
            //TargetType = "1YC";
            //TxtModel = "1YC%";
            //Factory = "1";
            Txt_Type = "MPSGA";

        }


        DateTime strDate = new DateTime(DateTime.Now.Year, _Month, 1, 0, 0, 0);
        DateTime endDate = strDate.AddMonths(1).Date + new TimeSpan(0, 0, 0);

        DateTime strHr = DateTime.Today + new TimeSpan(08, 00, 00);
        DateTime dateEnd = DateTime.Today + new TimeSpan(20, 00, 00);
        DateTime Endtoday = DateTime.Now;
        DateTime EndYesterday = DateTime.Today - new TimeSpan(24, 00, 00);


        int MonthSelect = _Month;
        int PrevMonth = _Month - 1;
        int NextMonth = _Month + 1;


        //------------- Create column header OT  -----------------


        //DataTable dtBCPD = new DataTable();
        //dtBCPD.Columns.Add("Fiscal_year", typeof(string));
        //dtBCPD.Columns.Add("ProductType", typeof(string));
        //dtBCPD.Columns.Add("PRD_JAN", typeof(string));
        //dtBCPD.Columns.Add("PRD_FEB", typeof(string));
        //dtBCPD.Columns.Add("PRD_MAR", typeof(string));
        //dtBCPD.Columns.Add("PRD_APR", typeof(string));
        //dtBCPD.Columns.Add("PRD_MAY", typeof(string));
        //dtBCPD.Columns.Add("PRD_JUN", typeof(string));
        //dtBCPD.Columns.Add("PRD_JUL", typeof(string));
        //dtBCPD.Columns.Add("PRD_AUG", typeof(string));
        //dtBCPD.Columns.Add("PRD_SEP", typeof(string));
        //dtBCPD.Columns.Add("PRD_OCT", typeof(string));
        //dtBCPD.Columns.Add("PRD_NOV", typeof(string));
        //dtBCPD.Columns.Add("PRD_DEC", typeof(string));
        //DateTime setDate1 = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        //SqlCommand sqlBCPD = new SqlCommand();
        //sqlBCPD.CommandText = "SELECT Fiscal_year " +
        //    " ,ProductType,PRD_APR,PRD_MAY,PRD_JUN,PRD_JUL,PRD_AUG " +
        //    " ,PRD_SEP,PRD_OCT,PRD_NOV,PRD_DEC,PRD_JAN,PRD_FEB,PRD_MAR,Total_PRD " +
        //   " from BC_PRODUCTION " +
        //   " where [Fiscal_year] = " + setDate1.Year;


        //// int LBCSPD = 0;
        //double Prd = 0, Prd1 = 0, Prd2 = 0, Prd3 = 0, Prd4 = 0, Prd5 = 0, Prd6 = 0, Prd7 = 0;
        //double Prd8 = 0, Prd9 = 0, Prd10 = 0, Prd11 = 0, Prd12 = 0, SumPrd = 0, SumPrdOverAll = 0, PrdMonth = 0, SumPrdMonth = 0;
        //DataTable dt1 = oConn.SqlGet(sqlBCPD, "DBBCS");
        //foreach (DataRow item in dt1.Rows)
        //{
        //    DataRow _rowBCSPD = dtBCPD.NewRow();
        //    _rowBCSPD["Fiscal_year"] = item["Fiscal_year"].ToString();
        //    _rowBCSPD["ProductType"] = item["ProductType"].ToString();
        //    _rowBCSPD["PRD_JAN"] = item["PRD_JAN"];
        //    _rowBCSPD["PRD_FEB"] = item["PRD_FEB"];
        //    _rowBCSPD["PRD_MAR"] = item["PRD_MAR"];
        //    _rowBCSPD["PRD_APR"] = item["PRD_APR"];
        //    _rowBCSPD["PRD_MAY"] = item["PRD_MAY"];
        //    _rowBCSPD["PRD_JUN"] = item["PRD_JUN"];
        //    _rowBCSPD["PRD_JUL"] = item["PRD_JUL"];
        //    _rowBCSPD["PRD_AUG"] = item["PRD_AUG"];
        //    _rowBCSPD["PRD_SEP"] = item["PRD_SEP"];
        //    _rowBCSPD["PRD_OCT"] = item["PRD_OCT"];
        //    _rowBCSPD["PRD_NOV"] = item["PRD_NOV"];
        //    _rowBCSPD["PRD_DEC"] = item["PRD_DEC"];
        //    dtBCPD.Rows.Add(_rowBCSPD);
        //}


        //---------------- Get Employeee of Line --------------
        //DataTable dtEmp = new DataTable();
        //dtEmp.Columns.Add("Fiscal_year", typeof(string));
        //dtEmp.Columns.Add("ProductType", typeof(string));
        //dtEmp.Columns.Add("Monthly", typeof(string));
        //dtEmp.Columns.Add("WType", typeof(string));
        DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);
        DateTime setyesterday = new DateTime(DateTime.Now.Year, MonthSelect, 1);


        SqlCommand sql = new SqlCommand();

        //if (_Type == "ALL")
        //{

        //    txtCostCenter = " = " + ArryLoop[0] + " or [COSTCENTER] = " + ArryLoop[1] +
        //      " or [COSTCENTER] = " + ArryLoop[2] + " or [COSTCENTER] = " + ArryLoop[3] +
        //       " or [COSTCENTER] = " + ArryLoop[4] + " or [COSTCENTER] = " + ArryLoop[5] +
        //       " or [COSTCENTER] = " + ArryLoop[6] + " or [COSTCENTER] = " + ArryLoop[7] +
        //    " or [COSTCENTER] = " + ArryLoop[8] + " or [COSTCENTER] = " + ArryLoop[9] +
        //    " or [COSTCENTER] = " + ArryLoop[10];


        //}










        /*  foreach (DataRow item in dt.Rows)
          {
              DataRow _rowEmp = dtEmp.NewRow();
              _rowEmp["Code"] = item["CODE"].ToString();
              _rowEmp["Position"] = item["POSIT"].ToString();
              _rowEmp["CostCenter"] = item["COSTCENTER"].ToString();
              _rowEmp["WType"] = item["WTYPE"].ToString();
              dtEmp.Rows.Add(_rowEmp);
          }*/
        //  lbMP.Text = dtEmp.Rows.Count.ToString();
        //---------------- Get Employeee of Line --------------        

        //----------------- Create row content Manpower ------------------

        MMPInfo.MPAllChartInfo oItemMPP = new MMPInfo.MPAllChartInfo();
        int ii = 0;

        double accuOP1 = 0, accuOP15 = 0, accuOP2 = 0, accuOP3 = 0, CountMPOP = 1;
        double accuLE1 = 0, accuLE15 = 0, accuLE2 = 0, accuLE3 = 0, CountMPLE = 1;
        double accuFO1 = 0, accuFO15 = 0, accuFO2 = 0, accuFO3 = 0, CountMPFO = 1;
        double accuSU1 = 0, accuSU15 = 0, accuSU2 = 0, accuSU3 = 0, CountMPSU = 1;
        double CostOverAllSum = 0;
        // double CostOverAll = 0;




        for (ii = 1; ii <= MonthSelect; ii++)
        {
            //Prd = 0;
            //if (dtBCPD.Rows.Count > 0)
            //{

            //    foreach (DataRow _rowbcpd in dtBCPD.Rows)
            //    {

            //        if (_Type == "FAC2")
            //        {
            //            if (Convert.ToString(_rowbcpd["ProductType"].ToString()) == "2YC" || Convert.ToString(_rowbcpd["ProductType"].ToString()) == "SCR")
            //            {
            //                PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
            //                Prd += PrdMonth;
            //                //    SumPrd += Prd;
            //            }
            //        }
            //        else if (_Type == "ALL")
            //        {
            //            int k = 0;
            //            for (k = 1; k <= ArryPrd.Count(); k++)
            //            {


            //                if (ArryPrd[k - 1] == Convert.ToString(_rowbcpd["ProductType"].ToString()))
            //                {
            //                    if (ArryPrd[k - 1] == "ODM")
            //                    {
            //                        PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
            //                        PrdMonth = PrdMonth / 20;
            //                    }
            //                    else
            //                    {
            //                        PrdMonth = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
            //                    }
            //                    Prd += PrdMonth;


            //                }
            //                PrdMonth = 0;
            //            }
            //        }
            //        else

            //            if (ProductType == Convert.ToString(_rowbcpd["ProductType"].ToString()))
            //            {
            //                Prd = Convert.ToDouble(_rowbcpd[ArryPeriod2[ii - 1]].ToString());
            //                // SumPrd += Prd;
            //            }


            //        // SumPrd += Prd;
            //    }
            //    SumPrd += Prd;

            //}


            if (ii < MonthSelect)
            {
                setDate = new DateTime(DateTime.Now.Year, ii, 1);

            }
            else if (ii == MonthSelect)
            {
                setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);

            }
            else if (ii > MonthSelect)
            {

                setDate = new DateTime(DateTime.Now.Year, NextMonth, 1);

            }
            int __Month = setDate.Month;


            // Start Check Working Time OT in DB

            //---------------- Get Employeee of Line --------------
            DataTable dtMNOT = new DataTable();


            dtMNOT.Columns.Add("Fiscal_year", typeof(string));
            dtMNOT.Columns.Add("Monthly", typeof(string));
            dtMNOT.Columns.Add("Daily", typeof(string));
            dtMNOT.Columns.Add("S_StdMPday", typeof(string));
            dtMNOT.Columns.Add("S_ACtMPday", typeof(string));
            dtMNOT.Columns.Add("S_StdMPNight", typeof(string));
            dtMNOT.Columns.Add("S_ActMPNight", typeof(string));
            dtMNOT.Columns.Add("S_StdOTDay", typeof(string));
            dtMNOT.Columns.Add("S_ReqOTDay", typeof(string));
            dtMNOT.Columns.Add("S_ActOTDay", typeof(string));
            dtMNOT.Columns.Add("S_StdOTNight", typeof(string));
            dtMNOT.Columns.Add("S_ReqOTNight", typeof(string));
            dtMNOT.Columns.Add("S_ActOTNight", typeof(string));

            //--------------- Get Employee working Time ---------------------
            int SumMP_ACTD = 0, SumMP_ACTN = 0, SumOT_ReqD = 0, SumOT_ReqN = 0, SumOT_ActD = 0, SumOT_ActN = 0;
            int FlagUdate = 0;
            int MPCount = 0, MPCountALL = 0, MPCount_D = 0, MPCount_N = 0;
            string DatetoDay = "";
            int Xdate = 0;
            int Yester = 0;


            if (ii == MonthSelect)
            {

                for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                {
                    if (i >= 2)
                    {
                        Yester = i - 1;
                        setyesterday = new DateTime(DateTime.Now.Year, setDate.Month, Yester);

                    }
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);



                    //if ((setDate >= EndYesterday) && (setDate <= Endtoday))
                    //{
                    //if (Endtoday.ToString("yyyy-MM-dd") == setDate.ToString("yyyy-MM-dd"))
                    //   {
                    int SUMOT_REQD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
                    int SUMOT_REQN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
                    int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
                    int SUMMP_SHIFT = 0, SUMACT_MP = 0;
                    // DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


                    SqlCommand sqlMNOT = new SqlCommand();


                    sqlMNOT.CommandText = " select Fiscal_year,Monthly,Daily, sum(STD_MPDay) as S_StdMPday, sum(ACT_MPDay) as S_ACtMPday " +
                      " , sum(STD_MPNight) as S_StdMPNight " +
                       " ,sum(ACT_MPNight) as S_ActMPNight " +
                        " ,sum(STD_OTDay) as S_StdOTDay " +
                        " ,sum(REQ_OTDay) as S_ReqOTDay " +
                        " ,sum(ACT_OTDay) as S_ActOTDay" +
                        " ,sum(STD_OTNight) as S_StdOTNight " +
                        " ,sum(REQ_OTNight) as S_ReqOTNight " +
                        " ,sum(ACT_OTNight) as S_ActOTNight " +
                        " FROM BC_MANPOWER" +
                       "  where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' " +
                        " and Daily = '" + i + "' and ( ProductType = 'INCC'  or ProductType = 'INGA' or ProductType = 'INHR' " +
                        " or ProductType = 'INAC' or ProductType = 'INCB' or ProductType = 'INTS' " +
                        " or ProductType = 'INIT' or ProductType = 'INSF' or ProductType = 'INAUDIT'" +
                        " or ProductType = 'INLG' or ProductType = 'INWH'  or ProductType = 'INHRD' or ProductType = 'INTD' ) " +
                        " group by Fiscal_year,Monthly,Daily";



                    DataTable dtMOT = oConn.SqlGet(sqlMNOT, "DBBCS");



                    //   string InsertDD;

                    double MPOP = 4, MPLE = 50, MPFO = 90, MPSU = 100;
                    double totalOP = 0, totalOPOT1 = 0, totalOPOT15 = 0, totalOPOT2 = 0, totalOPOT3 = 0;
                    double totalLE = 0, totalLEOT1 = 0, totalLEOT15 = 0, totalLEOT2 = 0, totalLEOT3 = 0;
                    double totalFO = 0, totalFOOT1 = 0, totalFOOT15 = 0, totalFOOT2 = 0, totalFOOT3 = 0;
                    double totalSU = 0, totalSUOT1 = 0, totalSUOT15 = 0, totalSUOT2 = 0, totalSUOT3 = 0;
                    double TotalOT1 = 0, TotalOT15 = 0, TotalOT2 = 0, TotalOT3 = 0;
                    double CostOverall = 0;

                    DataTable dtEmp = new DataTable();
                    dtEmp.Columns.Add("Fiscal_year", typeof(string));
                    dtEmp.Columns.Add("ProductType", typeof(string));
                    dtEmp.Columns.Add("Monthly", typeof(string));

                    //for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                    //{
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);

                    sql.CommandText = "SELECT fiscal_year,Monthly,Daily,ProductType,STD_MPDay,ACT_MPDay" +
                      " ,STD_MPNight,ACT_MPNight,STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight" +
                        " ,ACT_OTNight  from BC_MANPOWER " +
                         " where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' and Daily = '" + i + "' and ProductType ='" + Txt_Type + "'";

                    DataTable dtCount = oConn.SqlGet(sql, "DBBCS");

                    if (dtCount.Rows.Count > 0)
                    {

                        FlagInsert = 1;

                    }
                    else
                    {
                        FlagInsert = 0;

                    }


                    //if (dtCount.Rows.Count > 0)
                    //{

                    //DataTable dtEmp = new DataTable();
                    //dtEmp.Columns.Add("Fiscal_year", typeof(string));
                    //dtEmp.Columns.Add("ProductType", typeof(string));
                    //dtEmp.Columns.Add("Monthly", typeof(string));

                    if (dtCount.Rows.Count > 0)
                    {
                        DataTable dtMNOTPre = new DataTable();


                        dtMNOTPre.Columns.Add("Fiscal_year", typeof(string));
                        dtMNOTPre.Columns.Add("Monthly", typeof(string));
                        dtMNOTPre.Columns.Add("Daily", typeof(string));
                        dtMNOTPre.Columns.Add("ProductType", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdMPday", typeof(string));
                        dtMNOTPre.Columns.Add("S_ACtMPday", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdMPNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActMPNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_ReqOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdOTNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ReqOTNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActOTNight", typeof(string));

                        foreach (DataRow item in dtMOT.Rows)
                        {
                            DataRow _rowMNOT = dtMNOTPre.NewRow();

                            //**** DataRow _rowMNOT = dtMNOT.NewRow();
                            _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                            _rowMNOT["Monthly"] = item["Monthly"].ToString();
                            _rowMNOT["Daily"] = item["Daily"].ToString();
                            _rowMNOT["S_StdMPday"] = item["S_StdMPday"].ToString();
                            _rowMNOT["S_ACtMPday"] = item["S_ACtMPday"].ToString();
                            _rowMNOT["S_StdMPNight"] = item["S_StdMPNight"].ToString();
                            _rowMNOT["S_ActMPNight"] = item["S_ActMPNight"].ToString();
                            _rowMNOT["S_StdOTDay"] = item["S_StdOTDay"].ToString();
                            _rowMNOT["S_ReqOTDay"] = item["S_ReqOTDay"].ToString();
                            _rowMNOT["S_ActOTDay"] = item["S_ActOTDay"].ToString();
                            _rowMNOT["S_StdOTNight"] = item["S_StdOTNight"].ToString();
                            _rowMNOT["S_ReqOTNight"] = item["S_ReqOTNight"].ToString();
                            _rowMNOT["S_ActOTNight"] = item["S_ActOTNight"].ToString();

                            MPCount_D = Convert.ToInt16(item["S_StdMPday"].ToString());
                            MPCount_N = Convert.ToInt16(item["S_StdMPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["S_ACtMPday"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["S_ActMPNight"].ToString());

                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["S_ReqOTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["S_ReqOTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["S_ActOTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["S_ActOTNight"].ToString());

                            //   if ((setDate.ToString("yyyy-MM-dd") == EndYesterday.ToString("yyyy-MM-dd"))
                            //|| (setyesterday.ToString("yyyy-MM-dd") == Endtoday.ToString("yyyy-MM-dd")))
                            //{
                            //if (setDate.ToString("yyyy-MM-dd") <= Endtoday.ToString("yyyy-MM-dd"))
                            if ((FlagInsert == 1) && (setDate >= EndYesterday) && (setDate <= dateEnd) && (_Type == "MPSGA"))
                            //if (setDate <= Endtoday)
                            {
                                //  Endtoday
                                SqlCommand UpdateMNOT = new SqlCommand();
                                UpdateMNOT.CommandText = "Update  BC_MANPOWER  " +
                                        " set STD_MPDay ='" + _rowMNOT["S_StdMPday"].ToString() + "',ACT_MPDay ='" + _rowMNOT["S_ACtMPday"].ToString() + "' " +
                                        ",STD_MPNight ='" + _rowMNOT["S_StdMPNight"].ToString() + "',ACT_MPNight ='" + _rowMNOT["S_ActMPNight"].ToString() + "' " +
                                        ",STD_OTDay ='" + _rowMNOT["S_StdOTDay"].ToString() + "',REQ_OTDay ='" + _rowMNOT["S_ReqOTDay"].ToString() + "',ACT_OTDay = '" + _rowMNOT["S_ActOTDay"].ToString() + "'" +
                                        ",STD_OTNight ='" + _rowMNOT["S_StdOTNight"].ToString() + "',REQ_OTNight ='" + _rowMNOT["S_ReqOTNight"].ToString() + "',ACT_OTNight = '" + _rowMNOT["S_ActOTNight"].ToString() + "'" +
                                        "where  Fiscal_year ='" + setDate.ToString("yyyy") + "' and Monthly ='" + ii + "' and Daily ='" + i + "' and ProductType ='" + Txt_Type + "'";

                                oConn.SqlExecute(UpdateMNOT, "DBBCS");
                            }
                            //MPCount_D = 0;
                            //MPCount_N = 0;
                            //SumMP_ACTD = 0;
                            //SumMP_ACTN = 0;
                            //SumMP_ACTD = 0;
                            //SumMP_ACTN = 0;
                            //SumOT_ReqD = 0;
                            //SumOT_ReqN = 0;
                            //SumOT_ActD = 0;
                            //SumOT_ActN = 0;
                        }
                    }
                    else
                    {

                        foreach (DataRow item in dtMOT.Rows)
                        {
                            DataRow _rowMNOT = dtMNOT.NewRow();
                            _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                            _rowMNOT["Monthly"] = item["Monthly"].ToString();
                            _rowMNOT["Daily"] = item["Daily"].ToString();
                            _rowMNOT["S_StdMPday"] = item["S_StdMPday"].ToString();
                            _rowMNOT["S_ACtMPday"] = item["S_ACtMPday"].ToString();
                            _rowMNOT["S_StdMPNight"] = item["S_StdMPNight"].ToString();
                            _rowMNOT["S_ActMPNight"] = item["S_ActMPNight"].ToString();
                            _rowMNOT["S_StdOTDay"] = item["S_StdOTDay"].ToString();
                            _rowMNOT["S_ReqOTDay"] = item["S_ReqOTDay"].ToString();
                            _rowMNOT["S_ActOTDay"] = item["S_ActOTDay"].ToString();
                            _rowMNOT["S_StdOTNight"] = item["S_StdOTNight"].ToString();
                            _rowMNOT["S_ReqOTNight"] = item["S_ReqOTNight"].ToString();
                            _rowMNOT["S_ActOTNight"] = item["S_ActOTNight"].ToString();


                            if ((FlagInsert == 0) && (_Type == "MPSGA"))
                            {
                                SqlCommand InsertMNOT = new SqlCommand();

                                InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                                             ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                                             ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                                             " VALUES ('" + setDate.ToString("yyyy") + "','" + ii + "','" + i + "','" + Txt_Type + "' " +
                                             ",'" + _rowMNOT["S_StdMPday"].ToString() + "','" + _rowMNOT["S_ACtMPday"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdMPNight"].ToString() + "','" + _rowMNOT["S_ActMPNight"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdOTDay"].ToString() + "','" + _rowMNOT["S_ReqOTDay"].ToString() + "','" + _rowMNOT["S_ActOTDay"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdOTNight"].ToString() + "','" + _rowMNOT["S_ReqOTNight"].ToString() + "','" + _rowMNOT["S_ActOTNight"].ToString() + "')";
                                oConn.SqlExecute(InsertMNOT, "DBBCS");
                            }


                            MPCount_D = Convert.ToInt16(item["S_StdMPday"].ToString());
                            MPCount_N = Convert.ToInt16(item["S_StdMPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["S_ACtMPday"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["S_ActMPNight"].ToString());

                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["S_ReqOTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["S_ReqOTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["S_ActOTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["S_ActOTNight"].ToString());
                            //MPCount_D = 0;
                            //MPCount_N = 0;
                            //SumMP_ACTD = 0;
                            //SumMP_ACTN = 0;
                            //SumMP_ACTD = 0;
                            //SumMP_ACTN = 0;
                            //SumOT_ReqD = 0;
                            //SumOT_ReqN = 0;
                            //SumOT_ActD = 0;
                            //SumOT_ActN = 0;
                        }

                    }





                        if (((setDate <= dateEnd) && (_Type == "MPSGA")) || (_Type == "OTMPSGA"))
                    {
                        MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                        //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                        DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);
                        //SUMMP_SHIFT = MPCountALL;
                        //SUMACT_MP = SUMOT_REQD + SUMOT_REQN;


                        // ** Man Power Attandance
                        mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                        mManPower.Xdate = i;

                        //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                        //  mManPower.SumMP_STD = SUMACT_MP;



                        mManPower.SumMPD = MPCount_D;
                        mManPower.SumMPN = MPCount_N;
                        mManPower.SumMP_ACTD = SumMP_ACTD;
                        mManPower.SumMP_ACTN = SumMP_ACTN;
                        if (SumMP_ACTD != 0)
                        {
                            mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;

                        }
                        else
                        {
                            mManPower.SumMP_DIFFD = 0;

                        }

                        if (SumMP_ACTN != 0)
                        {

                            mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;
                        }
                        else
                        {

                            mManPower.SumMP_DIFFN = 0;
                        }


                        // ** OT Req,ACT
                        mManPower.SumOT_ReqD = SumOT_ReqD;
                        mManPower.SumOT_ReqN = SumOT_ReqN;
                        mManPower.SumOT_ActD = SumOT_ActD;
                        mManPower.SumOT_ActN = SumOT_ActN;
                        oListMP.Add(mManPower);

                    }else if((setDate > dateEnd) && (_Type == "MPSGA"))
                    {
                        MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                        //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                        DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);

                        // ** Man Power Attandance
                        mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                        mManPower.Xdate = i;
                        mManPower.SumMPD = 0;
                        mManPower.SumMPN = 0;
                        mManPower.SumMP_ACTD = 0;
                        mManPower.SumMP_ACTN = 0;
                            mManPower.SumMP_DIFFD = 0;
                            mManPower.SumMP_DIFFN = 0;

                        // ** OT Req,ACT
                        mManPower.SumOT_ReqD = 0;
                        mManPower.SumOT_ReqN = 0;
                        mManPower.SumOT_ActD = 0;
                        mManPower.SumOT_ActN = 0;
                        oListMP.Add(mManPower);



                    }
                    MPCount_D = 0;
                    MPCount_N = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;
                    SumOT_ReqD = 0;
                    SumOT_ReqN = 0;
                    SumOT_ActD = 0;
                    SumOT_ActN = 0;
                }
                //}
            }
            else
            {
                for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                {
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);
                    int SUMOT_REQD = 0, SUMOT_ACTD = 0, REQDOT1 = 0, REQDOT15 = 0, REQDOT2 = 0, REQDOT3 = 0, SREQDOT1 = 0, SREQDOT15 = 0, SREQDOT2 = 0, SREQDOT3 = 0;
                    int SUMOT_REQN = 0, SUMOT_ACTN = 0, REQHOT1 = 0, REQHOT15 = 0, REQHOT2 = 0, REQHOT3 = 0, SREQHOT1 = 0, SREQHOT15 = 0, SREQHOT2 = 0, SREQHOT3 = 0;
                    int SUMOT_REQH = 0, SUMOT_ACTH = 0, REQNOT1 = 0, REQNOT15 = 0, REQNOT2 = 0, REQNOT3 = 0, SREQNOT1 = 0, SREQNOT15 = 0, SREQNOT2 = 0, SREQNOT3 = 0;
                    int SUMMP_SHIFT = 0, SUMACT_MP = 0;
                    // DateTime setDate = new DateTime(DateTime.Now.Year, MonthSelect, 1);


                    SqlCommand sqlMNOT = new SqlCommand();


                    sqlMNOT.CommandText = " select Fiscal_year,Monthly,Daily, sum(STD_MPDay) as S_StdMPday, sum(ACT_MPDay) as S_ACtMPday " +
                      " , sum(STD_MPNight) as S_StdMPNight " +
                       " ,sum(ACT_MPNight) as S_ActMPNight " +
                        " ,sum(STD_OTDay) as S_StdOTDay " +
                        " ,sum(REQ_OTDay) as S_ReqOTDay " +
                        " ,sum(ACT_OTDay) as S_ActOTDay" +
                        " ,sum(STD_OTNight) as S_StdOTNight " +
                        " ,sum(REQ_OTNight) as S_ReqOTNight " +
                        " ,sum(ACT_OTNight) as S_ActOTNight " +
                        " FROM BC_MANPOWER" +
                       "  where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' " +
                        " and Daily = '" + i + "' " +
                        " group by Fiscal_year,Monthly,Daily";



                    DataTable dtMOT = oConn.SqlGet(sqlMNOT, "DBBCS");



                    //   string InsertDD;

                    double MPOP = 4, MPLE = 50, MPFO = 90, MPSU = 100;
                    double totalOP = 0, totalOPOT1 = 0, totalOPOT15 = 0, totalOPOT2 = 0, totalOPOT3 = 0;
                    double totalLE = 0, totalLEOT1 = 0, totalLEOT15 = 0, totalLEOT2 = 0, totalLEOT3 = 0;
                    double totalFO = 0, totalFOOT1 = 0, totalFOOT15 = 0, totalFOOT2 = 0, totalFOOT3 = 0;
                    double totalSU = 0, totalSUOT1 = 0, totalSUOT15 = 0, totalSUOT2 = 0, totalSUOT3 = 0;
                    double TotalOT1 = 0, TotalOT15 = 0, TotalOT2 = 0, TotalOT3 = 0;
                    double CostOverall = 0;

                    DataTable dtEmp = new DataTable();
                    dtEmp.Columns.Add("Fiscal_year", typeof(string));
                    dtEmp.Columns.Add("ProductType", typeof(string));
                    dtEmp.Columns.Add("Monthly", typeof(string));

                    //for (int i = 1; i <= DateTime.DaysInMonth(DateTime.Now.Year, setDate.Month); i++)
                    //{
                    setDate = new DateTime(DateTime.Now.Year, setDate.Month, i);

                    sql.CommandText = "SELECT fiscal_year,Monthly,Daily,ProductType,STD_MPDay,ACT_MPDay" +
                      " ,STD_MPNight,ACT_MPNight,STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight" +
                        " ,ACT_OTNight  from BC_MANPOWER " +
                         " where Fiscal_year = '" + setDate.ToString("yyyy") + "' and  Monthly = '" + ii + "' and Daily = '" + i + "' and ProductType ='" + Txt_Type + "'";

                    DataTable dtCount = oConn.SqlGet(sql, "DBBCS");


                    //if (dtCount.Rows.Count > 0)
                    //{

                    //DataTable dtEmp = new DataTable();
                    //dtEmp.Columns.Add("Fiscal_year", typeof(string));
                    //dtEmp.Columns.Add("ProductType", typeof(string));
                    //dtEmp.Columns.Add("Monthly", typeof(string));

                    if (dtCount.Rows.Count > 0)
                    {
                        DataTable dtMNOTPre = new DataTable();


                        dtMNOTPre.Columns.Add("Fiscal_year", typeof(string));
                        dtMNOTPre.Columns.Add("Monthly", typeof(string));
                        dtMNOTPre.Columns.Add("Daily", typeof(string));
                        dtMNOTPre.Columns.Add("ProductType", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdMPday", typeof(string));
                        dtMNOTPre.Columns.Add("S_ACtMPday", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdMPNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActMPNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_ReqOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActOTDay", typeof(string));
                        dtMNOTPre.Columns.Add("S_StdOTNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ReqOTNight", typeof(string));
                        dtMNOTPre.Columns.Add("S_ActOTNight", typeof(string));

                        foreach (DataRow item in dtCount.Rows)
                        {
                            DataRow _rowMNOT = dtMNOTPre.NewRow();
                            _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                            _rowMNOT["Monthly"] = item["Monthly"].ToString();
                            _rowMNOT["Daily"] = item["Daily"].ToString();
                            _rowMNOT["ProductType"] = item["ProductType"].ToString();
                            _rowMNOT["S_StdMPday"] = item["STD_MPDay"].ToString();
                            _rowMNOT["S_ACtMPday"] = item["ACT_MPDay"].ToString();
                            _rowMNOT["S_StdMPNight"] = item["STD_MPNight"].ToString();
                            _rowMNOT["S_ActMPNight"] = item["ACT_MPNight"].ToString();
                            _rowMNOT["S_StdOTDay"] = item["STD_OTDay"].ToString();
                            _rowMNOT["S_ReqOTDay"] = item["REQ_OTDay"].ToString();
                            _rowMNOT["S_ActOTDay"] = item["ACT_OTDay"].ToString();
                            _rowMNOT["S_StdOTNight"] = item["STD_OTNight"].ToString();
                            _rowMNOT["S_ReqOTNight"] = item["REQ_OTNight"].ToString();
                            _rowMNOT["S_ActOTNight"] = item["ACT_OTNight"].ToString();

                            MPCount_D = Convert.ToInt16(item["STD_MPDay"].ToString());
                            MPCount_N = Convert.ToInt16(item["STD_MPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["ACT_MPDay"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["ACT_MPNight"].ToString());

                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["REQ_OTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["REQ_OTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["ACT_OTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["ACT_OTNight"].ToString());


                            if ((FlagInsert == 1) && (setDate >= EndYesterday) && (setDate <= dateEnd) && (_Type == "MPSGA"))
                            {
                                SqlCommand UpdateMNOT = new SqlCommand();
                                UpdateMNOT.CommandText = "Update  BC_MANPOWER  " +
                                        " set STD_MPDay ='" + _rowMNOT["S_StdMPday"].ToString() + "',ACT_MPDay ='" + _rowMNOT["S_ACtMPday"].ToString() + "' " +
                                        ",STD_MPNight ='" + _rowMNOT["S_StdMPNight"].ToString() + "',ACT_MPNight ='" + _rowMNOT["S_ActMPNight"].ToString() + "' " +
                                        ",STD_OTDay ='" + _rowMNOT["S_StdOTDay"].ToString() + "',REQ_OTDay ='" + _rowMNOT["S_ReqOTDay"].ToString() + "',ACT_OTDay = '" + _rowMNOT["S_ActOTDay"].ToString() + "'" +
                                        ",STD_OTNight ='" + _rowMNOT["S_StdOTNight"].ToString() + "',REQ_OTNight ='" + _rowMNOT["S_ReqOTNight"].ToString() + "',ACT_OTNight = '" + _rowMNOT["S_ActOTNight"].ToString() + "'" +
                                        "where  Fiscal_year ='" + setDate.ToString("yyyy") + "' and Monthly ='" + ii + "' and Daily ='" + i + "' and ProductType ='" + Txt_Type + "'";

                                oConn.SqlExecute(UpdateMNOT, "DBBCS");
                            }
                            //MPCount_D = 0;
                            //MPCount_N = 0;
                            //SumMP_ACTD = 0;
                            //SumMP_ACTN = 0;
                            //SumMP_ACTD = 0;
                            //SumMP_ACTN = 0;
                            //SumOT_ReqD = 0;
                            //SumOT_ReqN = 0;
                            //SumOT_ActD = 0;
                            //SumOT_ActN = 0;
                        }
                    }
                    else
                    {

                        foreach (DataRow item in dtMOT.Rows)
                        {
                            DataRow _rowMNOT = dtMNOT.NewRow();
                            _rowMNOT["Fiscal_year"] = item["Fiscal_year"].ToString();
                            _rowMNOT["Monthly"] = item["Monthly"].ToString();
                            _rowMNOT["Daily"] = item["Daily"].ToString();
                            _rowMNOT["S_StdMPday"] = item["S_StdMPday"].ToString();
                            _rowMNOT["S_ACtMPday"] = item["S_ACtMPday"].ToString();
                            _rowMNOT["S_StdMPNight"] = item["S_StdMPNight"].ToString();
                            _rowMNOT["S_ActMPNight"] = item["S_ActMPNight"].ToString();
                            _rowMNOT["S_StdOTDay"] = item["S_StdOTDay"].ToString();
                            _rowMNOT["S_ReqOTDay"] = item["S_ReqOTDay"].ToString();
                            _rowMNOT["S_ActOTDay"] = item["S_ActOTDay"].ToString();
                            _rowMNOT["S_StdOTNight"] = item["S_StdOTNight"].ToString();
                            _rowMNOT["S_ReqOTNight"] = item["S_ReqOTNight"].ToString();
                            _rowMNOT["S_ActOTNight"] = item["S_ActOTNight"].ToString();


                            if ((FlagInsert == 0) && (_Type == "MPSGA"))
                            {
                                SqlCommand InsertMNOT = new SqlCommand();

                                InsertMNOT.CommandText = " INSERT INTO BC_MANPOWER(Fiscal_year,Monthly,Daily,ProductType " +
                                             ",STD_MPDay,ACT_MPDay,STD_MPNight,ACT_MPNight " +
                                             ",STD_OTDay,REQ_OTDay,ACT_OTDay,STD_OTNight,REQ_OTNight,ACT_OTNight) " +
                                             " VALUES ('" + setDate.ToString("yyyy") + "','" + ii + "','" + i + "','" + Txt_Type + "' " +
                                             ",'" + _rowMNOT["S_StdMPday"].ToString() + "','" + _rowMNOT["S_ACtMPday"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdMPNight"].ToString() + "','" + _rowMNOT["S_ActMPNight"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdOTDay"].ToString() + "','" + _rowMNOT["S_ReqOTDay"].ToString() + "','" + _rowMNOT["S_ActOTDay"].ToString() + "' " +
                                             ",'" + _rowMNOT["S_StdOTNight"].ToString() + "','" + _rowMNOT["S_ReqOTNight"].ToString() + "','" + _rowMNOT["S_ActOTNight"].ToString() + "')";
                                oConn.SqlExecute(InsertMNOT, "DBBCS");

                            }

                            MPCount_D = Convert.ToInt16(item["S_StdMPday"].ToString());
                            MPCount_N = Convert.ToInt16(item["S_StdMPNight"].ToString());
                            SumMP_ACTD = Convert.ToInt16(item["S_ACtMPday"].ToString());
                            SumMP_ACTN = Convert.ToInt16(item["S_ActMPNight"].ToString());

                            // ** OT Req,ACT
                            SumOT_ReqD = Convert.ToInt16(item["S_ReqOTDay"].ToString());
                            SumOT_ReqN = Convert.ToInt16(item["S_ReqOTNight"].ToString());
                            SumOT_ActD = Convert.ToInt16(item["S_ActOTDay"].ToString());
                            SumOT_ActN = Convert.ToInt16(item["S_ActOTNight"].ToString());
                            //MPCount_D = 0;
                            //MPCount_N = 0;
                            //SumMP_ACTD = 0;
                            //SumMP_ACTN = 0;
                            //SumMP_ACTD = 0;
                            //SumMP_ACTN = 0;
                            //SumOT_ReqD = 0;
                            //SumOT_ReqN = 0;
                            //SumOT_ActD = 0;
                            //SumOT_ActN = 0;
                        }

                    }







                    //MMPInfo.MPAllChartInfo mManPower = new MMPInfo.MPAllChartInfo();


                    //     DateTime setdatetoday = new DateTime(DateTime.Now.Year, i, 1);
                    //DateTime setdatetoday = new DateTime(DateTime.Now.Year, setDate.Month, i);
                    //SUMMP_SHIFT = MPCountALL;
                    //SUMACT_MP = SUMOT_REQD + SUMOT_REQN;


                    // ** Man Power Attandance
                    //mManPower.DatetoDay = i + ":" + setdatetoday.DayOfWeek.ToString().Substring(0, 3);
                    //mManPower.Xdate = i;

                    //   mManPower.SumMP_SHIFT = SUMMP_SHIFT;
                    //  mManPower.SumMP_STD = SUMACT_MP;



                    //mManPower.SumMPD = MPCount_D;
                    //mManPower.SumMPN = MPCount_N;
                    //mManPower.SumMP_ACTD = SumMP_ACTD;
                    //mManPower.SumMP_ACTN = SumMP_ACTN;
                    //mManPower.SumMP_DIFFD = MPCount_D - SumMP_ACTD;
                    //mManPower.SumMP_DIFFN = MPCount_N - SumMP_ACTN;


                    // ** OT Req,ACT
                    //mManPower.SumOT_ReqD = SumOT_ReqD;
                    //mManPower.SumOT_ReqN = SumOT_ReqN;
                    //mManPower.SumOT_ActD = SumOT_ActD;
                    //mManPower.SumOT_ActN = SumOT_ActN;



                    //     mManPower.SumMPH = oItemMPP.SumMPH;
                    //mManPower.SumMP = SUMOT_ACTN + SUMOT_ACTD;
                    //oListMP.Add(mManPower);
                    MPCount_D = 0;
                    MPCount_N = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;
                    SumMP_ACTD = 0;
                    SumMP_ACTN = 0;
                    SumOT_ReqD = 0;
                    SumOT_ReqN = 0;
                    SumOT_ActD = 0;
                    SumOT_ActN = 0;
                }
            }

        }
        return oListMP;
    }

    //** Get Other PerSon Fac3
    private DataTable GetManPowerByOTHFac3(string Board)
    {
        int MP_ALL = 0;
        int MP_D = 0;
        int MP_N = 0;
        DataTable dtData = new DataTable();

        DataTable result = new DataTable();
        result.Columns.Add("MP_ALL", typeof(int));
        result.Columns.Add("MP_D", typeof(int));
        result.Columns.Add("MP_N", typeof(int));
        DataRow newRow = result.NewRow();

        if (Board != "")
        {
            string StrData = "SELECT CODE " +
            " FROM Employee " +
            " WHERE RESIGN IS NULL AND ( Andon Like 'RE%' or  Andon like 'PRE%' or Andon like 'RW%' )  " +
            "   AND POSIT IN ('OP','OP.S','TN') ";

            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.CommandTimeout = 180;
            dtData = oConDCI.Query(cmdData);


            if (dtData.Rows.Count > 0)
            {
                foreach (DataRow drEmp in dtData.Rows)
                {
                    string dataShift = "";
                    string dataShiftGroup = "";
                    DataTable dtEMCL = new DataTable();
                    string StrEMCL = "SELECT YM, CODE, STSS, STSO " +
                        " FROM EMP_EMCL " +
                        " WHERE YM =@YM AND CODE=@CODE ";
                    SqlCommand cmdEMCL = new SqlCommand();
                    cmdEMCL.CommandText = StrEMCL;
                    cmdEMCL.Parameters.Add(new SqlParameter("YM", DateTime.Now.ToString("yyyyMM")));
                    cmdEMCL.Parameters.Add(new SqlParameter("CODE", drEmp["CODE"].ToString()));
                    cmdEMCL.CommandTimeout = 180;
                    dtEMCL = oConDCI.Query(cmdEMCL);

                    if (dtEMCL.Rows.Count > 0)
                    {
                        dataShiftGroup = dtEMCL.Rows[0]["STSO"].ToString().Substring(DateTime.Now.Day - 1, 1);

                        // Check 3 Group
                        if (dataShiftGroup == "3")
                        {
                            dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(DateTime.Now.Day - 1, 1);
                        }
                        else
                        {

                            if (DateTime.Now.Day < 5)
                            {
                                for (int i = DateTime.Now.Day; i <= 27; i++)
                                {
                                    dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                    if (dataShift == "T" || dataShift == "H")
                                    { }
                                    else { break; }
                                }
                            }
                            else if (DateTime.Now.Day > 20)
                            {
                                for (int i = DateTime.Now.Day; i >= 5; i--)
                                {
                                    dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                    if (dataShift == "T" || dataShift == "H")
                                    { }
                                    else { break; }
                                }
                            }
                            else
                            {
                                for (int i = DateTime.Now.Day; i <= 27; i++)
                                {
                                    dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                    if (dataShift == "T" || dataShift == "H")
                                    { }
                                    else { break; }
                                }
                            }
                        }// end check 3 group
                    }//end if emcl data



                    if (dataShift == "D")
                    {
                        MP_D++;
                    }
                    else if (dataShift == "N")
                    {
                        MP_N++;
                    }

                }// end foreach
            }// end if have employee data


            try
            {
                MP_ALL = dtData.Rows.Count;
            }
            catch { }

        }// end if boardid not null


        //---- Add Row ---
        newRow["MP_ALL"] = MP_ALL;
        newRow["MP_D"] = MP_D;
        newRow["MP_N"] = MP_N;
        result.Rows.Add(newRow);
        return result;

    }
    private int GetWorkActByOTHFac3Day(string Board, DateTime DataDate)
    {
        int resultData = 0;
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "-")
        {
            string StrData = "SELECT COUNT(1) AS COUNTS " +
          " FROM EmployeeWorkingTime AS W " +
          " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
          " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
          "   AND ( Andon Like 'RE%' or  Andon like 'PRE%' or Andon like 'RW%' ) " +
          "    AND E.POSIT IN ('OP','OP.S','TN','PI') ";
        
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 8, 0, 0)));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 17, 45, 0)));
            dtData = oConDCI.Query(cmdData);



            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
        
    }
    private int GetWorkActByOTHFac3Night(string Board, DateTime DataDate)
    {
        int resultData = 0;
        DataTable dtData = new DataTable();
        if (Board != "" && Board != "-")
        {
            string StrData = "SELECT COUNT(1) AS COUNTS " +
          " FROM EmployeeWorkingTime AS W " +
          " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
          " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
          "   AND  ( Andon Like 'RE%' or  Andon like 'PRE%' or Andon like 'RW%' ) " +
          "  AND E.POSIT IN ('OP','OP.S','TN','PI') ";

            StrData = "SELECT COUNT(1) AS COUNTS " +
                  " FROM EmployeeWorkingTime AS W " +
                  " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
                  " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
                  "   AND  ( Andon Like 'RE%' or  Andon like 'PRE%' or Andon like 'RW%' )  " +
                  " AND E.POSIT IN ('OP','OP.S','TN','PI') ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 20, 0, 0)));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 5, 35, 0)));
            dtData = oConDCI.Query(cmdData);



            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
       
    }
    private int GetOTReqByOTHFac3Day(string Board, DateTime DataDate)
    {
        int resultData = 0;
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "-")
        {
            string StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
                " FROM EMP_OTRQ AS O " +
                " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
                " WHERE (OTFROM != '06:05' AND OTFROM != '20:00') " +
                "  AND ( Andon Like 'RE%' or  Andon like 'PRE%' or Andon like 'RW%' ) AND ODATE = @ODATE " +
                " AND E.POSIT IN ('OP','OP.S','TN','PI') ";

            StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
                " FROM EMP_OTRQ AS O " +
                " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
                " WHERE (OTFROM != '06:05' AND OTFROM != '20:00') " +
                "  AND ( Andon Like 'RE%' or  Andon like 'PRE%' or Andon like 'RW%' ) AND ODATE = @ODATE " +
                " AND E.POSIT IN ('OP','OP.S','TN','PI') ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("ODATE", DataDate.ToString()));
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
     
    }
    private int GetOTReqByOTHFac3Night(string Board, DateTime DataDate)
    {
        int resultData = 0;
        DataTable dtData = new DataTable();
        if (Board != "" && Board != "-")
        {
            string StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
                " FROM EMP_OTRQ AS O " +
                " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
                " WHERE (OTFROM = '06:05' OR OTFROM = '20:00') " +
                "  AND ( Andon Like 'RE%' or  Andon like 'PRE%' or Andon like 'RW%' ) AND ODATE = @ODATE " +
                " AND E.POSIT IN ('OP','OP.S','TN','PI') ";

            StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
                " FROM EMP_OTRQ AS O " +
                " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
                " WHERE (OTFROM = '06:05' OR OTFROM = '20:00') " +
                "  AND ( Andon Like 'RE%' or  Andon like 'PRE%' or Andon like 'RW%' ) AND ODATE = @ODATE " +
                " AND E.POSIT IN ('OP','OP.S','TN','PI') ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("ODATE", DataDate.AddDays(1).ToString()));
            dtData = oConDCI.Query(cmdData);



            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
        
    }
    private int GetOTActByOTHFac3Day(string Board, DateTime DataDate)
    {
        int resultData = 0;
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "-")
        {
            string StrData = "SELECT COUNT(1) AS COUNTS " +
                 " FROM EmployeeWorkingTime AS W " +
                 " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
                 " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'D'" +
                 "   AND ( Andon Like 'RE%' or  Andon like 'PRE%' or Andon like 'RW%' ) " +
                 " AND E.POSIT IN ('OP','OP.S','TN','PI') ";

            StrData = "SELECT COUNT(1) AS COUNTS " +
                 " FROM EmployeeWorkingTime AS W " +
                 " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
                 " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'D'" +
                 "   AND ( Andon Like 'RE%' or  Andon like 'PRE%' or Andon like 'RW%' ) " +
                 " AND E.POSIT IN ('OP','OP.S','TN','PI') ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 18, 45, 0)));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 03, 0, 0))); // --- out lastest night
            dtData = oConDCI.Query(cmdData);



            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
      
    }
    private int GetOTActByOTHFac3Night(string Board, DateTime DataDate)
    {
        int resultData = 0;
        DataTable dtData = new DataTable();
        if (Board != "" && Board != "-")
        {
            string StrData = "SELECT COUNT(1) AS COUNTS " +
              " FROM EmployeeWorkingTime AS W " +
              " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
              " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'N' " +
              "   AND ( Andon Like 'RE%' or  Andon like 'PRE%' or Andon like 'RW%' ) " +
              " AND E.POSIT IN ('OP','OP.S','TN','PI') ";

            StrData = "SELECT COUNT(1) AS COUNTS " +
                  " FROM EmployeeWorkingTime AS W " +
                  " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
                  " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'N' " +
                  "   AND ( Andon Like 'RE%' or  Andon like 'PRE%' or Andon like 'RW%' ) " +
                  " AND E.POSIT IN ('OP','OP.S','TN','PI') ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 6, 5, 0)));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 12, 50, 0))); // --- out lastest night
            dtData = oConDCI.Query(cmdData);



            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
       
    }










    private DataTable GetManPowerByLine(string Board)
    {
        int MP_ALL = 0;
        int MP_D = 0;
        int MP_N = 0;
        DataTable dtData = new DataTable();

        DataTable result = new DataTable();
        result.Columns.Add("MP_ALL", typeof(int));
        result.Columns.Add("MP_D", typeof(int));
        result.Columns.Add("MP_N", typeof(int));
        DataRow newRow = result.NewRow();

        if (Board != "")
        {
            string StrData = "SELECT CODE " +
            " FROM Employee " +
            " WHERE RESIGN IS NULL AND ( Andon like  @LOCATION  " +
            "  ) AND POSIT IN ('OP','OP.S','TN') ";

            StrData = "SELECT CODE " +
                    " FROM Employee " +
                    " WHERE RESIGN IS NULL AND ( Andon Like @LOCATION  " +
                    " ) AND POSIT IN ('OP','OP.S','TN') ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.CommandTimeout = 180;
            dtData = oConDCI.Query(cmdData);


            if (dtData.Rows.Count > 0)
            {
                foreach (DataRow drEmp in dtData.Rows)
                {
                    string dataShift = "";
                    string dataShiftGroup = "";
                    DataTable dtEMCL = new DataTable();
                    string StrEMCL = "SELECT YM, CODE, STSS, STSO " +
                        " FROM EMP_EMCL " +
                        " WHERE YM =@YM AND CODE=@CODE ";
                    SqlCommand cmdEMCL = new SqlCommand();
                    cmdEMCL.CommandText = StrEMCL;
                    cmdEMCL.Parameters.Add(new SqlParameter("YM", DateTime.Now.ToString("yyyyMM")));
                    cmdEMCL.Parameters.Add(new SqlParameter("CODE", drEmp["CODE"].ToString()));
                    cmdEMCL.CommandTimeout = 180;
                    dtEMCL = oConDCI.Query(cmdEMCL);

                    if (dtEMCL.Rows.Count > 0)
                    {
                        dataShiftGroup = dtEMCL.Rows[0]["STSO"].ToString().Substring(DateTime.Now.Day - 1, 1);

                        // Check 3 Group
                        if (dataShiftGroup == "3")
                        {
                            dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(DateTime.Now.Day - 1, 1);
                        }
                        else
                        {

                            if (DateTime.Now.Day < 5)
                            {
                                for (int i = DateTime.Now.Day; i <= 27; i++)
                                {
                                    dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                    if (dataShift == "T" || dataShift == "H")
                                    { }
                                    else { break; }
                                }
                            }
                            else if (DateTime.Now.Day > 20)
                            {
                                for (int i = DateTime.Now.Day; i >= 5; i--)
                                {
                                    dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                    if (dataShift == "T" || dataShift == "H")
                                    { }
                                    else { break; }
                                }
                            }
                            else
                            {
                                for (int i = DateTime.Now.Day; i <= 27; i++)
                                {
                                    dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                    if (dataShift == "T" || dataShift == "H")
                                    { }
                                    else { break; }
                                }
                            }
                        }// end check 3 group
                    }//end if emcl data



                    if (dataShift == "D")
                    {
                        MP_D++;
                    }
                    else if (dataShift == "N")
                    {
                        MP_N++;
                    }

                }// end foreach
            }// end if have employee data


            try
            {
                MP_ALL = dtData.Rows.Count;
            }
            catch { }

        }// end if boardid not null


        //---- Add Row ---
        newRow["MP_ALL"] = MP_ALL;
        newRow["MP_D"] = MP_D;
        newRow["MP_N"] = MP_N;
        result.Rows.Add(newRow);
        return result;

        //int MP_ALL = 0;
        //int MP_D = 0;
        //int MP_N = 0;
        //DataTable dtData = new DataTable();

        //DataTable result = new DataTable();
        //result.Columns.Add("MP_ALL", typeof(int));
        //result.Columns.Add("MP_D", typeof(int));
        //result.Columns.Add("MP_N", typeof(int));
        //DataRow newRow = result.NewRow();

        //if (Board != "")
        //{
        //    string StrData = "SELECT CODE " +
        //    " FROM Employee " +
        //    " WHERE RESIGN IS NULL AND ANDON = @LOCATION  " +
        //    " AND POSIT IN ('OP','OP.S','TN') ";

        //    if (Board == "074" || Board == "056")
        //    {
        //        StrData = "SELECT CODE " +
        //        " FROM Employee " +
        //        " WHERE RESIGN IS NULL AND (ANDON LIKE '%074%' OR ANDON LIKE '%056%') " +
        //        " AND POSIT IN ('OP','OP.S','TN') ";

        //        SqlCommand cmdData = new SqlCommand();
        //        cmdData.CommandText = StrData;
        //        //cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
        //        cmdData.CommandTimeout = 180;
        //        dtData = oConDCI.Query(cmdData);
        //    }
        //    else
        //    {
        //        StrData = "SELECT CODE " +
        //            " FROM Employee " +
        //            " WHERE RESIGN IS NULL AND ANDON = @LOCATION  " +
        //            " AND POSIT IN ('OP','OP.S','TN') ";
        //        SqlCommand cmdData = new SqlCommand();
        //        cmdData.CommandText = StrData;
        //        cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
        //        cmdData.CommandTimeout = 180;
        //        dtData = oConDCI.Query(cmdData);
        //    }



        //    if (dtData.Rows.Count > 0)
        //    {
        //        foreach (DataRow drEmp in dtData.Rows)
        //        {
        //            string dataShift = "";
        //            string dataShiftGroup = "";
        //            DataTable dtEMCL = new DataTable();
        //            string StrEMCL = "SELECT YM, CODE, STSS, STSO " +
        //                " FROM EMP_EMCL " +
        //                " WHERE YM =@YM AND CODE=@CODE ";
        //            SqlCommand cmdEMCL = new SqlCommand();
        //            cmdEMCL.CommandText = StrEMCL;
        //            cmdEMCL.Parameters.Add(new SqlParameter("YM", DateTime.Now.ToString("yyyyMM")));
        //            cmdEMCL.Parameters.Add(new SqlParameter("CODE", drEmp["CODE"].ToString()));
        //            cmdEMCL.CommandTimeout = 180;
        //            dtEMCL = oConDCI.Query(cmdEMCL);

        //            if (dtEMCL.Rows.Count > 0)
        //            {
        //                dataShiftGroup = dtEMCL.Rows[0]["STSO"].ToString().Substring(DateTime.Now.Day - 1, 1);

        //                // Check 3 Group
        //                if (dataShiftGroup == "3")
        //                {
        //                    dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(DateTime.Now.Day - 1, 1);
        //                }
        //                else
        //                {

        //                    if (DateTime.Now.Day < 5)
        //                    {
        //                        for (int i = DateTime.Now.Day; i <= 27; i++)
        //                        {
        //                            dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
        //                            if (dataShift == "T" || dataShift == "H")
        //                            { }
        //                            else { break; }
        //                        }
        //                    }
        //                    else if (DateTime.Now.Day > 20)
        //                    {
        //                        for (int i = DateTime.Now.Day; i >= 5; i--)
        //                        {
        //                            dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
        //                            if (dataShift == "T" || dataShift == "H")
        //                            { }
        //                            else { break; }
        //                        }
        //                    }
        //                    else
        //                    {
        //                        for (int i = DateTime.Now.Day; i <= 27; i++)
        //                        {
        //                            dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
        //                            if (dataShift == "T" || dataShift == "H")
        //                            { }
        //                            else { break; }
        //                        }
        //                    }
        //                }// end check 3 group
        //            }//end if emcl data



        //            if (dataShift == "D")
        //            {
        //                MP_D++;
        //            }
        //            else if (dataShift == "N")
        //            {
        //                MP_N++;
        //            }

        //        }// end foreach
        //    }// end if have employee data


        //    try
        //    {
        //        MP_ALL = dtData.Rows.Count;
        //    }
        //    catch { }

        //}// end if boardid not null


        ////---- Add Row ---
        //newRow["MP_ALL"] = MP_ALL;
        //newRow["MP_D"] = MP_D;
        //newRow["MP_N"] = MP_N;
        //result.Rows.Add(newRow);
        //return result;
    }
    private DataTable GetManPowerByLineFOLE(string Board)
    {
        int MP_ALL = 0;
        int MP_D = 0;
        int MP_N = 0;
        DataTable dtData = new DataTable();

        DataTable result = new DataTable();
        result.Columns.Add("MP_ALL", typeof(int));
        result.Columns.Add("MP_D", typeof(int));
        result.Columns.Add("MP_N", typeof(int));
        DataRow newRow = result.NewRow();

        if (Board != "")
        {
            string StrData = "SELECT CODE " +
            " FROM Employee " +
            " WHERE RESIGN IS NULL AND ANDON = @LOCATION  " +
            " AND POSIT IN ('FO','FM/T','LD/T','LE','LD') ";

            StrData = "SELECT CODE " +
                    " FROM Employee " +
                    " WHERE RESIGN IS NULL AND ANDON = @LOCATION  " +
                    " AND POSIT IN ('FO','FM/T','LD/T','LE','LD') ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.CommandTimeout = 180;
            dtData = oConDCI.Query(cmdData);


            if (dtData.Rows.Count > 0)
            {
                foreach (DataRow drEmp in dtData.Rows)
                {
                    string dataShift = "";
                    string dataShiftGroup = "";
                    DataTable dtEMCL = new DataTable();
                    string StrEMCL = "SELECT YM, CODE, STSS, STSO " +
                        " FROM EMP_EMCL " +
                        " WHERE YM =@YM AND CODE=@CODE ";
                    SqlCommand cmdEMCL = new SqlCommand();
                    cmdEMCL.CommandText = StrEMCL;
                    cmdEMCL.Parameters.Add(new SqlParameter("YM", DateTime.Now.ToString("yyyyMM")));
                    cmdEMCL.Parameters.Add(new SqlParameter("CODE", drEmp["CODE"].ToString()));
                    cmdEMCL.CommandTimeout = 180;
                    dtEMCL = oConDCI.Query(cmdEMCL);

                    if (dtEMCL.Rows.Count > 0)
                    {
                        dataShiftGroup = dtEMCL.Rows[0]["STSO"].ToString().Substring(DateTime.Now.Day - 1, 1);

                        // Check 3 Group
                        if (dataShiftGroup == "3")
                        {
                            dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(DateTime.Now.Day - 1, 1);
                        }
                        else
                        {

                            if (DateTime.Now.Day < 5)
                            {
                                for (int i = DateTime.Now.Day; i <= 27; i++)
                                {
                                    dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                    if (dataShift == "T" || dataShift == "H")
                                    { }
                                    else { break; }
                                }
                            }
                            else if (DateTime.Now.Day > 20)
                            {
                                for (int i = DateTime.Now.Day; i >= 5; i--)
                                {
                                    dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                    if (dataShift == "T" || dataShift == "H")
                                    { }
                                    else { break; }
                                }
                            }
                            else
                            {
                                for (int i = DateTime.Now.Day; i <= 27; i++)
                                {
                                    dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                    if (dataShift == "T" || dataShift == "H")
                                    { }
                                    else { break; }
                                }
                            }
                        }// end check 3 group
                    }//end if emcl data



                    if (dataShift == "D")
                    {
                        MP_D++;
                    }
                    else if (dataShift == "N")
                    {
                        MP_N++;
                    }

                }// end foreach
            }// end if have employee data


            try
            {
                MP_ALL = dtData.Rows.Count;
            }
            catch { }

        }// end if boardid not null


        //---- Add Row ---
        newRow["MP_ALL"] = MP_ALL;
        newRow["MP_D"] = MP_D;
        newRow["MP_N"] = MP_N;
        result.Rows.Add(newRow);
        return result;

        //int MP_ALL = 0;
        //int MP_D = 0;
        //int MP_N = 0;
        //DataTable dtData = new DataTable();

        //DataTable result = new DataTable();
        //result.Columns.Add("MP_ALL", typeof(int));
        //result.Columns.Add("MP_D", typeof(int));
        //result.Columns.Add("MP_N", typeof(int));
        //DataRow newRow = result.NewRow();

        //if (Board != "")
        //{
        //    string StrData = "SELECT CODE " +
        //    " FROM Employee " +
        //    " WHERE RESIGN IS NULL AND ANDON = @LOCATION  " +
        //    " AND POSIT IN ('OP','OP.S','TN') ";

        //    if (Board == "074" || Board == "056")
        //    {
        //        StrData = "SELECT CODE " +
        //        " FROM Employee " +
        //        " WHERE RESIGN IS NULL AND (ANDON LIKE '%074%' OR ANDON LIKE '%056%') " +
        //        " AND POSIT IN ('OP','OP.S','TN') ";

        //        SqlCommand cmdData = new SqlCommand();
        //        cmdData.CommandText = StrData;
        //        //cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
        //        cmdData.CommandTimeout = 180;
        //        dtData = oConDCI.Query(cmdData);
        //    }
        //    else
        //    {
        //        StrData = "SELECT CODE " +
        //            " FROM Employee " +
        //            " WHERE RESIGN IS NULL AND ANDON = @LOCATION  " +
        //            " AND POSIT IN ('OP','OP.S','TN') ";
        //        SqlCommand cmdData = new SqlCommand();
        //        cmdData.CommandText = StrData;
        //        cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
        //        cmdData.CommandTimeout = 180;
        //        dtData = oConDCI.Query(cmdData);
        //    }



        //    if (dtData.Rows.Count > 0)
        //    {
        //        foreach (DataRow drEmp in dtData.Rows)
        //        {
        //            string dataShift = "";
        //            string dataShiftGroup = "";
        //            DataTable dtEMCL = new DataTable();
        //            string StrEMCL = "SELECT YM, CODE, STSS, STSO " +
        //                " FROM EMP_EMCL " +
        //                " WHERE YM =@YM AND CODE=@CODE ";
        //            SqlCommand cmdEMCL = new SqlCommand();
        //            cmdEMCL.CommandText = StrEMCL;
        //            cmdEMCL.Parameters.Add(new SqlParameter("YM", DateTime.Now.ToString("yyyyMM")));
        //            cmdEMCL.Parameters.Add(new SqlParameter("CODE", drEmp["CODE"].ToString()));
        //            cmdEMCL.CommandTimeout = 180;
        //            dtEMCL = oConDCI.Query(cmdEMCL);

        //            if (dtEMCL.Rows.Count > 0)
        //            {
        //                dataShiftGroup = dtEMCL.Rows[0]["STSO"].ToString().Substring(DateTime.Now.Day - 1, 1);

        //                // Check 3 Group
        //                if (dataShiftGroup == "3")
        //                {
        //                    dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(DateTime.Now.Day - 1, 1);
        //                }
        //                else
        //                {

        //                    if (DateTime.Now.Day < 5)
        //                    {
        //                        for (int i = DateTime.Now.Day; i <= 27; i++)
        //                        {
        //                            dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
        //                            if (dataShift == "T" || dataShift == "H")
        //                            { }
        //                            else { break; }
        //                        }
        //                    }
        //                    else if (DateTime.Now.Day > 20)
        //                    {
        //                        for (int i = DateTime.Now.Day; i >= 5; i--)
        //                        {
        //                            dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
        //                            if (dataShift == "T" || dataShift == "H")
        //                            { }
        //                            else { break; }
        //                        }
        //                    }
        //                    else
        //                    {
        //                        for (int i = DateTime.Now.Day; i <= 27; i++)
        //                        {
        //                            dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
        //                            if (dataShift == "T" || dataShift == "H")
        //                            { }
        //                            else { break; }
        //                        }
        //                    }
        //                }// end check 3 group
        //            }//end if emcl data



        //            if (dataShift == "D")
        //            {
        //                MP_D++;
        //            }
        //            else if (dataShift == "N")
        //            {
        //                MP_N++;
        //            }

        //        }// end foreach
        //    }// end if have employee data


        //    try
        //    {
        //        MP_ALL = dtData.Rows.Count;
        //    }
        //    catch { }

        //}// end if boardid not null


        ////---- Add Row ---
        //newRow["MP_ALL"] = MP_ALL;
        //newRow["MP_D"] = MP_D;
        //newRow["MP_N"] = MP_N;
        //result.Rows.Add(newRow);
        //return result;
    }

    //--------WORKING ACTUAL-----------
    private int GetWorkActByLineDay(string Board, DateTime DataDate)
    {
        int resultData = 0;
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "-")
        {
            string StrData = "SELECT COUNT(1) AS COUNTS " +
          " FROM EmployeeWorkingTime AS W " +
          " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
          " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
          "   AND ( ANDON like @LOCATION  " +
          "   ) AND E.POSIT IN ('OP','OP.S','TN','PI') ";

            StrData = "SELECT COUNT(1) AS COUNTS " +
                  " FROM EmployeeWorkingTime AS W " +
                  " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
                  " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
                  " AND ( ANDON like @LOCATION  " +
                  " )AND E.POSIT IN ('OP','OP.S','TN','PI') ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 8, 0, 0)));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 17, 45, 0)));
            dtData = oConDCI.Query(cmdData);



            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
        //int resultData = 0;
        //DataTable dtData = new DataTable();

        //if (Board != "" && Board != "-")
        //{
        //    string StrData = "SELECT COUNT(1) AS COUNTS " +
        //  " FROM EmployeeWorkingTime AS W " +
        //  " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
        //  " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
        //  "   AND ANDON = @LOCATION  " +
        //  "   AND E.POSIT IN ('OP','OP.S','TN') ";

        //    if (Board == "074" || Board == "056")
        //    {
        //        StrData = "SELECT COUNT(1) AS COUNTS " +
        //          " FROM EmployeeWorkingTime AS W " +
        //          " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
        //          " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
        //          "   AND (ANDON LIKE '%074%' OR ANDON LIKE '%056%')" +
        //          "   AND E.POSIT IN ('OP','OP.S','TN') ";
        //        SqlCommand cmdData = new SqlCommand();
        //        cmdData.CommandText = StrData;
        //        cmdData.CommandTimeout = 180;
        //        //cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
        //        cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 8, 0, 0)));
        //        cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 17, 45, 0)));
        //        dtData = oConDCI.Query(cmdData);
        //    }
        //    else
        //    {
        //        StrData = "SELECT COUNT(1) AS COUNTS " +
        //          " FROM EmployeeWorkingTime AS W " +
        //          " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
        //          " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
        //          " AND ANDON = @LOCATION  " +
        //          " AND E.POSIT IN ('OP','OP.S','TN') ";
        //        SqlCommand cmdData = new SqlCommand();
        //        cmdData.CommandText = StrData;
        //        cmdData.CommandTimeout = 180;
        //        cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
        //        cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 8, 0, 0)));
        //        cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 17, 45, 0)));
        //        dtData = oConDCI.Query(cmdData);
        //    }



        //    try
        //    {
        //        resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
        //    }
        //    catch { }
        //}


        //return resultData;
    }

    private int GetWorkActByLineNight(string Board, DateTime DataDate)
    {
        int resultData = 0;
        DataTable dtData = new DataTable();
        if (Board != "" && Board != "-")
        {
            string StrData = "SELECT COUNT(1) AS COUNTS " +
          " FROM EmployeeWorkingTime AS W " +
          " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
          " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
          "   AND (ANDON like @LOCATION  " +
          " ) AND E.POSIT IN ('OP','OP.S','TN','PI') ";

            StrData = "SELECT COUNT(1) AS COUNTS " +
                  " FROM EmployeeWorkingTime AS W " +
                  " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
                  " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
                  "   AND (  ANDON like @LOCATION  " +
                  " )AND E.POSIT IN ('OP','OP.S','TN','PI') ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 20, 0, 0)));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 5, 35, 0)));
            dtData = oConDCI.Query(cmdData);



            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
        //int resultData = 0;
        //DataTable dtData = new DataTable();
        //if (Board != "" && Board != "-")
        //{
        //    string StrData = "SELECT COUNT(1) AS COUNTS " +
        //  " FROM EmployeeWorkingTime AS W " +
        //  " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
        //  " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
        //  "   AND ANDON = @LOCATION  " +
        //  " AND E.POSIT IN ('OP','OP.S','TN') ";

        //    if (Board == "074" || Board == "056")
        //    {
        //        StrData = "SELECT COUNT(1) AS COUNTS " +
        //          " FROM EmployeeWorkingTime AS W " +
        //          " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
        //          " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
        //          " AND (ANDON LIKE '%074%' OR ANDON LIKE '%056%')" +
        //          " AND E.POSIT IN ('OP','OP.S','TN') ";
        //        SqlCommand cmdData = new SqlCommand();
        //        cmdData.CommandText = StrData;
        //        cmdData.CommandTimeout = 180;
        //        // cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
        //        cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 20, 0, 0)));
        //        cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 5, 35, 0)));
        //        dtData = oConDCI.Query(cmdData);
        //    }
        //    else
        //    {
        //        StrData = "SELECT COUNT(1) AS COUNTS " +
        //          " FROM EmployeeWorkingTime AS W " +
        //          " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
        //          " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
        //          "   AND ANDON = @LOCATION  " +
        //          " AND E.POSIT IN ('OP','OP.S','TN') ";
        //        SqlCommand cmdData = new SqlCommand();
        //        cmdData.CommandText = StrData;
        //        cmdData.CommandTimeout = 180;
        //        cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
        //        cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 20, 0, 0)));
        //        cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 5, 35, 0)));
        //        dtData = oConDCI.Query(cmdData);
        //    }



        //    try
        //    {
        //        resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
        //    }
        //    catch { }
        //}


        //return resultData;
    }

    private int GetOTActByLineDay(string Board, DateTime DataDate)
    {
        int resultData = 0;
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "-")
        {
            string StrData = "SELECT COUNT(1) AS COUNTS " +
                 " FROM EmployeeWorkingTime AS W " +
                 " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
                 " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'D'" +
                 "   AND ANDON like @LOCATION  " +
                 " AND E.POSIT IN ('OP','OP.S','TN','PI') ";

            StrData = "SELECT COUNT(1) AS COUNTS " +
                 " FROM EmployeeWorkingTime AS W " +
                 " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
                 " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'D'" +
                 "   AND ANDON like @LOCATION  " +
                 " AND E.POSIT IN ('OP','OP.S','TN','PI') ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 18, 45, 0)));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 03, 0, 0))); // --- out lastest night
            dtData = oConDCI.Query(cmdData);



            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
        //int resultData = 0;
        //DataTable dtData = new DataTable();

        //if (Board != "" && Board != "-")
        //{
        //    string StrData = "SELECT COUNT(1) AS COUNTS " +
        //         " FROM EmployeeWorkingTime AS W " +
        //         " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
        //         " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'D'" +
        //         "   AND ANDON = @LOCATION  " +
        //         " AND E.POSIT IN ('OP','OP.S','TN') ";

        //    if (Board == "074" || Board == "056")
        //    {
        //        StrData = "SELECT COUNT(1) AS COUNTS " +
        //         " FROM EmployeeWorkingTime AS W " +
        //         " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
        //         " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'D'" +
        //         " AND (ANDON LIKE '%074%' OR ANDON LIKE '%056%')" +
        //         " AND E.POSIT IN ('OP','OP.S','TN') ";
        //        SqlCommand cmdData = new SqlCommand();
        //        cmdData.CommandText = StrData;
        //        cmdData.CommandTimeout = 180;
        //        //cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
        //        cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 18, 45, 0)));
        //        cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 03, 0, 0))); // --- out lastest night
        //        dtData = oConDCI.Query(cmdData);
        //    }
        //    else
        //    {
        //        StrData = "SELECT COUNT(1) AS COUNTS " +
        //         " FROM EmployeeWorkingTime AS W " +
        //         " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
        //         " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'D'" +
        //         "   AND ANDON = @LOCATION  " +
        //         " AND E.POSIT IN ('OP','OP.S','TN') ";
        //        SqlCommand cmdData = new SqlCommand();
        //        cmdData.CommandText = StrData;
        //        cmdData.CommandTimeout = 180;
        //        cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
        //        cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 18, 45, 0)));
        //        cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 03, 0, 0))); // --- out lastest night
        //        dtData = oConDCI.Query(cmdData);
        //    }



        //    try
        //    {
        //        resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
        //    }
        //    catch { }
        //}


        //return resultData;
    }

    private int GetOTActByLineNight(string Board, DateTime DataDate)
    {
        int resultData = 0;
        DataTable dtData = new DataTable();
        if (Board != "" && Board != "-")
        {
            string StrData = "SELECT COUNT(1) AS COUNTS " +
              " FROM EmployeeWorkingTime AS W " +
              " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
              " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'N' " +
              "   AND ANDON like @LOCATION  " +
              " AND E.POSIT IN ('OP','OP.S','TN','PI') ";

            StrData = "SELECT COUNT(1) AS COUNTS " +
                  " FROM EmployeeWorkingTime AS W " +
                  " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
                  " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'N' " +
                  "   AND ANDON like @LOCATION  " +
                  " AND E.POSIT IN ('OP','OP.S','TN','PI') ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 6, 5, 0)));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 12, 50, 0))); // --- out lastest night
            dtData = oConDCI.Query(cmdData);



            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
        //int resultData = 0;
        //DataTable dtData = new DataTable();
        //if (Board != "" && Board != "-")
        //{
        //    string StrData = "SELECT COUNT(1) AS COUNTS " +
        //      " FROM EmployeeWorkingTime AS W " +
        //      " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
        //      " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'N' " +
        //      "   AND ANDON = @LOCATION  " +
        //      " AND E.POSIT IN ('OP','OP.S','TN') ";

        //    if (Board == "074" || Board == "056")
        //    {

        //        StrData = "SELECT COUNT(1) AS COUNTS " +
        //          " FROM EmployeeWorkingTime AS W " +
        //          " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
        //          " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'N' " +
        //          " AND (ANDON LIKE '%074%' OR ANDON LIKE '%056%')" +
        //          " AND E.POSIT IN ('OP','OP.S','TN') ";
        //        SqlCommand cmdData = new SqlCommand();
        //        cmdData.CommandText = StrData;
        //        cmdData.CommandTimeout = 180;
        //        //cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
        //        cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 6, 5, 0)));
        //        cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 12, 50, 0))); // --- out lastest night
        //        dtData = oConDCI.Query(cmdData);
        //    }
        //    else
        //    {
        //        StrData = "SELECT COUNT(1) AS COUNTS " +
        //          " FROM EmployeeWorkingTime AS W " +
        //          " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
        //          " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'N' " +
        //          "   AND ANDON = @LOCATION  " +
        //          " AND E.POSIT IN ('OP','OP.S','TN') ";
        //        SqlCommand cmdData = new SqlCommand();
        //        cmdData.CommandText = StrData;
        //        cmdData.CommandTimeout = 180;
        //        cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
        //        cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 6, 5, 0)));
        //        cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 12, 50, 0))); // --- out lastest night
        //        dtData = oConDCI.Query(cmdData);
        //    }



        //    try
        //    {
        //        resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
        //    }
        //    catch { }
        //}


        //return resultData;
    }


    //--------OTRQ REQ-----------
    private int GetOTReqByLineDay(string Board, DateTime DataDate)
    {
        int resultData = 0;
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "-")
        {
            string StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
                " FROM EMP_OTRQ AS O " +
                " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
                " WHERE (OTFROM != '06:05' AND OTFROM != '20:00') " +
                "  AND (ANDON like @LOCATION  ) AND ODATE = @ODATE " +
                " AND E.POSIT IN ('OP','OP.S','TN','PI') ";

            StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
                " FROM EMP_OTRQ AS O " +
                " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
                " WHERE (OTFROM != '06:05' AND OTFROM != '20:00') " +
                "  AND ( ANDON like @LOCATION ) AND ODATE = @ODATE " +
                " AND E.POSIT IN ('OP','OP.S','TN','PI') ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("ODATE", DataDate.ToString()));
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
        //int resultData = 0;
        //DataTable dtData = new DataTable();

        //if (Board != "" && Board != "-")
        //{
        //    string StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
        //        " FROM EMP_OTRQ AS O " +
        //        " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
        //        " WHERE (OTFROM != '06:05' AND OTFROM != '20:00') " +
        //        "  AND ANDON=@LOCATION AND ODATE = @ODATE " +
        //        " AND E.POSIT IN ('OP','OP.S','TN') ";

        //    if (Board == "074" || Board == "056")
        //    {

        //        StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
        //        " FROM EMP_OTRQ AS O " +
        //        " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
        //        " WHERE (OTFROM != '06:05' AND OTFROM != '20:00') " +
        //        " AND (ANDON LIKE '%074%' OR ANDON LIKE '%056%') AND ODATE = @ODATE " +
        //        " AND E.POSIT IN ('OP','OP.S','TN') ";
        //        SqlCommand cmdData = new SqlCommand();
        //        cmdData.CommandText = StrData;
        //        cmdData.CommandTimeout = 180;
        //        //cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
        //        cmdData.Parameters.Add(new SqlParameter("ODATE", DataDate.ToString()));
        //        dtData = oConDCI.Query(cmdData);
        //    }
        //    else
        //    {
        //        StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
        //        " FROM EMP_OTRQ AS O " +
        //        " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
        //        " WHERE (OTFROM != '06:05' AND OTFROM != '20:00') " +
        //        "  AND ANDON=@LOCATION AND ODATE = @ODATE " +
        //        " AND E.POSIT IN ('OP','OP.S','TN') ";
        //        SqlCommand cmdData = new SqlCommand();
        //        cmdData.CommandText = StrData;
        //        cmdData.CommandTimeout = 180;
        //        cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
        //        cmdData.Parameters.Add(new SqlParameter("ODATE", DataDate.ToString()));
        //        dtData = oConDCI.Query(cmdData);
        //    }

        //    try
        //    {
        //        resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
        //    }
        //    catch { }
        //}


        //return resultData;
    }

    private int GetOTReqByLineNight(string Board, DateTime DataDate)
    {
        int resultData = 0;
        DataTable dtData = new DataTable();
        if (Board != "" && Board != "-")
        {
            string StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
                " FROM EMP_OTRQ AS O " +
                " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
                " WHERE (OTFROM = '06:05' OR OTFROM = '20:00') " +
                "  AND ( ANDON like @LOCATION ) AND ODATE = @ODATE " +
                " AND E.POSIT IN ('OP','OP.S','TN','PI') ";

            StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
                " FROM EMP_OTRQ AS O " +
                " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
                " WHERE (OTFROM = '06:05' OR OTFROM = '20:00') " +
                "  AND (ANDON like @LOCATION  ) AND ODATE = @ODATE " +
                " AND E.POSIT IN ('OP','OP.S','TN','PI') ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("ODATE", DataDate.AddDays(1).ToString()));
            dtData = oConDCI.Query(cmdData);



            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
        //int resultData = 0;
        //DataTable dtData = new DataTable();
        //if (Board != "" && Board != "-")
        //{
        //    string StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
        //        " FROM EMP_OTRQ AS O " +
        //        " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
        //        " WHERE (OTFROM = '06:05' OR OTFROM = '20:00') " +
        //        "  AND ANDON = @LOCATION AND ODATE = @ODATE " +
        //        " AND E.POSIT IN ('OP','OP.S','TN') ";

        //    if (Board == "074" || Board == "056")
        //    {
        //        StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
        //        " FROM EMP_OTRQ AS O " +
        //        " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
        //        " WHERE (OTFROM != '06:05' AND OTFROM != '20:00') " +
        //        " AND (ANDON LIKE '%074%' OR ANDON LIKE '%056%') AND ODATE = @ODATE " +
        //        " AND E.POSIT IN ('OP','OP.S','TN') ";
        //        SqlCommand cmdData = new SqlCommand();
        //        cmdData.CommandText = StrData;
        //        cmdData.CommandTimeout = 180;
        //        //cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
        //        cmdData.Parameters.Add(new SqlParameter("ODATE", DataDate.AddDays(1).ToString()));
        //        dtData = oConDCI.Query(cmdData);
        //    }
        //    else
        //    {
        //        StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
        //        " FROM EMP_OTRQ AS O " +
        //        " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
        //        " WHERE (OTFROM = '06:05' OR OTFROM = '20:00') " +
        //        "  AND ANDON = @LOCATION AND ODATE = @ODATE " +
        //        " AND E.POSIT IN ('OP','OP.S','TN') ";
        //        SqlCommand cmdData = new SqlCommand();
        //        cmdData.CommandText = StrData;
        //        cmdData.CommandTimeout = 180;
        //        cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
        //        cmdData.Parameters.Add(new SqlParameter("ODATE", DataDate.AddDays(1).ToString()));
        //        dtData = oConDCI.Query(cmdData);
        //    }



        //    try
        //    {
        //        resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
        //    }
        //    catch { }
        //}


        //return resultData;
    }

    //--- ManPower OP
    private DataTable GetManPowerByLineOP(string Board, string Position)
    {
        string[] spBoard = Board.Split(',');
        int MP_ALL = 0;
        int MP_D = 0;
        int MP_N = 0;
        DataTable dtData = new DataTable();

        DataTable result = new DataTable();
        result.Columns.Add("MP_ALL", typeof(int));
        result.Columns.Add("MP_D", typeof(int));
        result.Columns.Add("MP_N", typeof(int));
        DataRow newRow = result.NewRow();

        if (Board.Length > 0)
        {

            //string ConditionAndon = " (";
            //-------------- Loop For Get Manpower FO and LE for Each Board ----------------

            //foreach (string _Board in spBoard)
            //{
            //    ConditionAndon += " (ANDON LIKE '%" + _Board + "%') OR";
            //}
            //ConditionAndon = ConditionAndon.Substring(0, ConditionAndon.Length - 2) + " )";

            string ConditionAndon = "(" + Board + "')";

            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------

            string StrData = "SELECT DISTINCT CODE " +
                    " FROM Employee " +
                    " WHERE RESIGN IS NULL AND POSIT IN ('','OP','OP.S','TN') AND " + ConditionAndon + "  ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            //cmdData.Parameters.Add(new SqlParameter("LOCATION", _Board));
            //cmdData.Parameters.Add(new SqlParameter("POSI", Position));
            cmdData.CommandTimeout = 180;
            dtData = oConDCI.Query(cmdData);

            if (dtData.Rows.Count > 0)
            {
                foreach (DataRow drEmp in dtData.Rows)
                {
                    string dataShift = "";
                    DataTable dtEMCL = new DataTable();
                    string StrEMCL = "SELECT YM, CODE, STSS, STSO " +
                        " FROM EMP_EMCL " +
                        " WHERE YM =@YM AND CODE=@CODE ";
                    SqlCommand cmdEMCL = new SqlCommand();
                    cmdEMCL.CommandText = StrEMCL;
                    cmdEMCL.Parameters.Add(new SqlParameter("YM", DateTime.Now.ToString("yyyyMM")));
                    cmdEMCL.Parameters.Add(new SqlParameter("CODE", drEmp["CODE"].ToString()));
                    cmdEMCL.CommandTimeout = 180;
                    dtEMCL = oConDCI.Query(cmdEMCL);

                    if (dtEMCL.Rows.Count > 0)
                    {
                        if (DateTime.Now.Day < 5)
                        {
                            for (int i = DateTime.Now.Day; i <= 27; i++)
                            {
                                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                if (dataShift == "T" || dataShift == "H")
                                { }
                                else { break; }
                            }
                        }
                        else if (DateTime.Now.Day > 20)
                        {
                            for (int i = DateTime.Now.Day; i >= 5; i--)
                            {
                                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                if (dataShift == "T" || dataShift == "H")
                                { }
                                else { break; }
                            }
                        }
                        else
                        {
                            for (int i = DateTime.Now.Day; i <= 27; i++)
                            {
                                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                if (dataShift == "T" || dataShift == "H")
                                { }
                                else { break; }
                            }
                        }
                    }//end if emcl data



                    if (dataShift == "D")
                    {
                        MP_D++;
                    }
                    else if (dataShift == "N")
                    {
                        MP_N++;
                    }

                }// end foreach
            }// end if have employee data



            try
            {
                MP_ALL = dtData.Rows.Count;
            }
            catch { }

        }// end if boardid not null


        //---- Add Row ---
        newRow["MP_ALL"] = MP_ALL;
        newRow["MP_D"] = MP_D;
        newRow["MP_N"] = MP_N;
        result.Rows.Add(newRow);
        return result;
    }

    //---- Work Actual LEFO --------
    private DataTable GetManPowerByLineFOLE(string Board, string CostCen,string Position)
    {
        string[] spBoard = Board.Split(',');
        int MP_ALL = 0;
        int MP_D = 0;
        int MP_N = 0;
        DataTable dtData = new DataTable();

        DataTable result = new DataTable();
        result.Columns.Add("MP_ALL", typeof(int));
        result.Columns.Add("MP_D", typeof(int));
        result.Columns.Add("MP_N", typeof(int));
        DataRow newRow = result.NewRow();

        if (CostCen.Length > 0)
        {

            //string ConditionAndon = " (";
            //-------------- Loop For Get Manpower FO and LE for Each Board ----------------

            //foreach (string _Board in spBoard)
            //{
            //    ConditionAndon += " (ANDON LIKE '%" + _Board + "%') OR";
            //}
            //ConditionAndon = ConditionAndon.Substring(0, ConditionAndon.Length - 2) + " )";

            string ConditionAndon = " (CostCenter = " + CostCen + ")";
            

            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------

            string StrData = "SELECT DISTINCT CODE " +
                    " FROM Employee " +
                    //" WHERE RESIGN IS NULL AND POSIT = @POSI AND " + ConditionAndon + "  ";
            " WHERE (ANDON <>'') AND RESIGN IS NULL AND POSIT = @POSI AND " + ConditionAndon + " AND  " + " ( " + Board + ")";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            //cmdData.Parameters.Add(new SqlParameter("LOCATION", _Board));
            cmdData.Parameters.Add(new SqlParameter("POSI", Position));
            cmdData.CommandTimeout = 180;
            dtData = oConDCI.Query(cmdData);

            if (dtData.Rows.Count > 0)
            {
                foreach (DataRow drEmp in dtData.Rows)
                {
                    string dataShift = "";
                    DataTable dtEMCL = new DataTable();
                    string StrEMCL = "SELECT YM, CODE, STSS, STSO " +
                        " FROM EMP_EMCL " +
                        " WHERE YM =@YM AND CODE=@CODE ";
                    SqlCommand cmdEMCL = new SqlCommand();
                    cmdEMCL.CommandText = StrEMCL;
                    cmdEMCL.Parameters.Add(new SqlParameter("YM", DateTime.Now.ToString("yyyyMM")));
                    cmdEMCL.Parameters.Add(new SqlParameter("CODE", drEmp["CODE"].ToString()));
                    cmdEMCL.CommandTimeout = 180;
                    dtEMCL = oConDCI.Query(cmdEMCL);

                    if (dtEMCL.Rows.Count > 0)
                    {
                        if (DateTime.Now.Day < 5)
                        {
                            for (int i = DateTime.Now.Day; i <= 27; i++)
                            {
                                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                if (dataShift == "T" || dataShift == "H")
                                { }
                                else { break; }
                            }
                        }
                        else if (DateTime.Now.Day > 20)
                        {
                            for (int i = DateTime.Now.Day; i >= 5; i--)
                            {
                                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                if (dataShift == "T" || dataShift == "H")
                                { }
                                else { break; }
                            }
                        }
                        else
                        {
                            for (int i = DateTime.Now.Day; i <= 27; i++)
                            {
                                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                if (dataShift == "T" || dataShift == "H")
                                { }
                                else { break; }
                            }
                        }
                    }//end if emcl data



                    if (dataShift == "D")
                    {
                        MP_D++;
                    }
                    else if (dataShift == "N")
                    {
                        MP_N++;
                    }

                }// end foreach
            }// end if have employee data



            try
            {
                MP_ALL = dtData.Rows.Count;
            }
            catch { }

        }// end if boardid not null


        //---- Add Row ---
        newRow["MP_ALL"] = MP_ALL;
        newRow["MP_D"] = MP_D;
        newRow["MP_N"] = MP_N;
        result.Rows.Add(newRow);
        return result;
    }

    private int GetWorkActByLineDayFOLE(string Board, DateTime DataDate)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "000")
        {
            //string WhereAndon = "";
            //int idxWhereAndon = 0;
            //-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            //foreach (string _Board in spBoard)
            //{
            //    if (idxWhereAndon == 0)
            //    {
            //        WhereAndon += "ANDON LIKE '%" + _Board + "%'";
            //    }
            //    else if (idxWhereAndon > 0 && idxWhereAndon < spBoard.Length - 1)
            //    {
            //        WhereAndon += " OR ANDON LIKE '%" + _Board + "%'";
            //    }
            //    else if (idxWhereAndon == spBoard.Length - 1)
            //    {
            //        WhereAndon += " OR ANDON LIKE '%" + _Board + "%'";
            //    }
            //    idxWhereAndon++;
            //}
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------

            string WhereAndon = "(" + Board + "')";

            string StrData = "SELECT COUNT(1) AS COUNTS " +
              " FROM EmployeeWorkingTime AS W " +
              " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
              " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
              " AND " + WhereAndon + " AND E.POSIT IN ('LE','FO')";

            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 8, 0, 0)));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 17, 45, 0)));
            // cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }

    private int GetWorkActByLineNightFOLE(string Board, DateTime DataDate)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "000")
        {
            //string WhereAndon = "";
            //int idxWhereAndon = 0;
            ////-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            //foreach (string _Board in spBoard)
            //{
            //    if (idxWhereAndon == 0)
            //    {
            //        WhereAndon += "ANDON LIKE '%" + _Board + "%'";
            //    }
            //    else if (idxWhereAndon > 0 && idxWhereAndon < spBoard.Length - 1)
            //    {
            //        WhereAndon += " OR ANDON LIKE '%" + _Board + "%'";
            //    }
            //    else if (idxWhereAndon == spBoard.Length - 1)
            //    {
            //        WhereAndon += " OR ANDON LIKE '%" + _Board + "%'";
            //    }
            //    idxWhereAndon++;
            //}
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            string WhereAndon = "(" + Board + "')";
            string StrData = "SELECT COUNT(1) AS COUNTS " +
              " FROM EmployeeWorkingTime AS W " +
              " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
              " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
               " AND " + WhereAndon + " AND E.POSIT IN ('LE','FO')";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 20, 0, 0)));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 7, 50, 0)));
            //cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }


    //---- OTRQ ------------
    private int GetOTReqByLineDayFOLE(string Board, DateTime DataDate, string Position)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "-")
        {
            string WhereAndon = "(";
            //-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            foreach (string _Board in spBoard)
            {
                WhereAndon += "(ANDON LIKE '%" + _Board + "%') OR";
            }
            WhereAndon = WhereAndon.Substring(0, WhereAndon.Length - 2) + ")";
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------

            string StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
                " FROM EMP_OTRQ AS O " +
                " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
                " WHERE (OTFROM != '06:05' AND OTFROM != '20:00') " +
                "  AND POSIT = @Posi AND ODATE = @ODATE AND " + WhereAndon + " ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            // cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("ODATE", DataDate.ToString("yyyy-MM-dd")));
            cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }

    private int GetOTReqByLineNightFOLE(string Board, DateTime DataDate, string Position)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        DataTable dtData = new DataTable();
        if (Board != "" && Board != "-")
        {
            string WhereAndon = "(";
            //-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            foreach (string _Board in spBoard)
            {
                WhereAndon += "(ANDON LIKE '%" + _Board + "%') OR";
            }
            WhereAndon = WhereAndon.Substring(0, WhereAndon.Length - 2) + ")";
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------

            string StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
                " FROM EMP_OTRQ AS O " +
                " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
                " WHERE (OTFROM = '06:05' OR OTFROM = '20:00') " +
                " AND POSIT = @Posi AND ODATE = @ODATE AND " + WhereAndon + "";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            // cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("ODATE", DataDate.AddDays(1).ToString("yyyy-MM-dd")));
            cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }

    //---- OTACT ---------
    private int GetOTActByLineDayFOLE(string Board, DateTime DataDate, string Position)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "-")
        {
            string WhereAndon = "(";
            //-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            foreach (string _Board in spBoard)
            {
                WhereAndon += "(ANDON LIKE '%" + _Board + "%') OR";
            }
            WhereAndon = WhereAndon.Substring(0, WhereAndon.Length - 2) + ")";
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------

            string StrData = "SELECT COUNT(1) AS COUNTS " +
                 " FROM EmployeeWorkingTime AS W " +
                 " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
                 " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'D'" +
                 " AND POSIT = @Posi AND " + WhereAndon + " ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            //cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 18, 45, 0).ToString("yyyy-MM-dd HH:mm:ss")));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 03, 0, 0).ToString("yyyy-MM-dd HH:mm:ss"))); // --- out lastest night
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }

    private int GetOTActByLineNightFOLE(string Board, DateTime DataDate, string Position)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        DataTable dtData = new DataTable();
        if (Board != "" && Board != "-")
        {
            string WhereAndon = "(";
            //-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            foreach (string _Board in spBoard)
            {
                WhereAndon += "(ANDON LIKE '%" + _Board + "%') OR";
            }
            WhereAndon = WhereAndon.Substring(0, WhereAndon.Length - 2) + ")";
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------

            string StrData = "SELECT COUNT(1) AS COUNTS " +
                 " FROM EmployeeWorkingTime AS W " +
                 " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
                 " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'N'" +
                 " AND POSIT = @Posi AND " + WhereAndon + " ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 6, 5, 0).ToString("yyyy-MM-dd HH:mm:ss")));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 12, 50, 0).ToString("yyyy-MM-dd HH:mm:ss"))); // --- out lastest night
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }


    //---------- Man Power by Line Direct ------------------
    private DataTable GetManPowerByLine_Direct(string Board)
    {
        int MP_ALL = 0;
        int MP_D = 0;
        int MP_N = 0;
        string Txt_Posit = "";
        DataTable dtData = new DataTable();

        DataTable result = new DataTable();
        result.Columns.Add("MP_ALL", typeof(int));
        result.Columns.Add("MP_D", typeof(int));
        result.Columns.Add("MP_N", typeof(int));
        DataRow newRow = result.NewRow();

        if (Board != "")
        {
            if (Board == "4620")
            {
                //Txt_Posit = " AND POSIT  NOT IN ('MG','AG','SF','EN','SU') ";
                Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU','FO','SV','FM/T','AG','LD/T','LE','LD')";

            }
            else if (Board == "4710")
            {
                Txt_Posit = " AND  CODE IN ('14313','39796','19491','34542','12409','15237','18892','37785','39132','12063','15019','33763','40450','40515') ";

            }
            else
            {

             //   Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU')";
                //Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU','FO','SV','FM/T','AG','LD/T','LE','LD')";
                Txt_Posit=" AND POSIT = 'OP' ";
            }

            string Condition = "(CostCenter = " + Board + " )";

            string StrData = "SELECT CODE " +
            " FROM Employee " +
            " WHERE (ANDON <>'') AND RESIGN IS NULL AND   " + " ( " + Board + ")" + " " + Txt_Posit + "";
            //" AND POSIT  NOT IN ('MG','AG','SF','EN','SU')";

            //StrData = "SELECT CODE " +
            //        " FROM Employee " +
            //            " WHERE (ANDON <>'') AND RESIGN IS NULL AND   " + Condition + " " + Txt_Posit + "";
            //" WHERE RESIGN IS NULL AND " + Condition + " " +
            //" AND POSIT  NOT IN ('MG','AG','SF','EN','SU') ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.Parameters.Add(new SqlParameter("COSTCENTER", Board));
            cmdData.CommandTimeout = 180;
            dtData = oConDCI.Query(cmdData);


            if (dtData.Rows.Count > 0)
            {
                foreach (DataRow drEmp in dtData.Rows)
                {
                    string dataShift = "";
                    string dataShiftGroup = "";
                    DataTable dtEMCL = new DataTable();
                    string StrEMCL = "SELECT YM, CODE, STSS, STSO " +
                        " FROM EMP_EMCL " +
                        " WHERE YM =@YM AND CODE=@CODE ";
                    SqlCommand cmdEMCL = new SqlCommand();
                    cmdEMCL.CommandText = StrEMCL;
                    cmdEMCL.Parameters.Add(new SqlParameter("YM", DateTime.Now.ToString("yyyyMM")));
                    cmdEMCL.Parameters.Add(new SqlParameter("CODE", drEmp["CODE"].ToString()));
                    cmdEMCL.CommandTimeout = 180;
                    dtEMCL = oConDCI.Query(cmdEMCL);

                    if (dtEMCL.Rows.Count > 0)
                    {
                        dataShiftGroup = dtEMCL.Rows[0]["STSO"].ToString().Substring(DateTime.Now.Day - 1, 1);

                        // Check 3 Group
                        if (dataShiftGroup == "3")
                        {
                            dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(DateTime.Now.Day - 1, 1);
                        }
                        else
                        {

                            if (DateTime.Now.Day < 5)
                            {
                                for (int i = DateTime.Now.Day; i <= 27; i++)
                                {
                                    dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                    if (dataShift == "T" || dataShift == "H")
                                    { }
                                    else { break; }
                                }
                            }
                            else if (DateTime.Now.Day > 20)
                            {
                                for (int i = DateTime.Now.Day; i >= 5; i--)
                                {
                                    dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                    if (dataShift == "T" || dataShift == "H")
                                    { }
                                    else { break; }
                                }
                            }
                            else
                            {
                                for (int i = DateTime.Now.Day; i <= 27; i++)
                                {
                                    dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                    if (dataShift == "T" || dataShift == "H")
                                    { }
                                    else { break; }
                                }
                            }
                        }// end check 3 group
                    }//end if emcl data



                    if (dataShift == "D")
                    {
                        MP_D++;
                    }
                    else if (dataShift == "N")
                    {
                        MP_N++;
                    }

                }// end foreach
            }// end if have employee data


            try
            {
                MP_ALL = dtData.Rows.Count;
            }
            catch { }

        }// end if boardid not null


        //---- Add Row ---
        newRow["MP_ALL"] = MP_ALL;
        newRow["MP_D"] = MP_D;
        newRow["MP_N"] = MP_N;
        result.Rows.Add(newRow);
        return result;


    }
    //---------- Man Power by Line INDirect ------------------
    private DataTable GetManPowerByLine_INDirect(string Board)
    {
        int MP_ALL = 0;
        int MP_D = 0;
        int MP_N = 0;
        string Txt_Posit = "";
        DataTable dtData = new DataTable();

        DataTable result = new DataTable();
        result.Columns.Add("MP_ALL", typeof(int));
        result.Columns.Add("MP_D", typeof(int));
        result.Columns.Add("MP_N", typeof(int));
        DataRow newRow = result.NewRow();

        if (Board != "")
        {
            if (Board == "4620")
            {
                Txt_Posit = " AND POSIT  IN ('MG','SF','EN','AM','AG','SU')";

            }
            else if (Board == "4710")
            {
                Txt_Posit = " AND  W.CODE NOT IN ('14313','39796','19491','34542','12409','15237','18892','37785','39132','12063','15019','33763','40450','40515') ";

            }
            else
            {

                Txt_Posit = " AND POSIT  IN('MG','SF','AM','SU')";
            }

            string Condition = "(CostCenter =" + Board + " )";

            string StrData = "SELECT CODE " +
            " FROM Employee " +
            " WHERE RESIGN IS NULL AND   " + Condition + " " +
            " AND POSIT " + Txt_Posit + "";

            StrData = "SELECT CODE " +
                    " FROM Employee " +
                    " WHERE RESIGN IS NULL AND " + Condition + " " + Txt_Posit + "";

            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.Parameters.Add(new SqlParameter("COSTCENTER", Board));
            cmdData.CommandTimeout = 180;
            dtData = oConDCI.Query(cmdData);


            if (dtData.Rows.Count > 0)
            {
                foreach (DataRow drEmp in dtData.Rows)
                {
                    string dataShift = "";
                    string dataShiftGroup = "";
                    DataTable dtEMCL = new DataTable();
                    string StrEMCL = "SELECT YM, CODE, STSS, STSO " +
                        " FROM EMP_EMCL " +
                        " WHERE YM =@YM AND CODE=@CODE ";
                    SqlCommand cmdEMCL = new SqlCommand();
                    cmdEMCL.CommandText = StrEMCL;
                    cmdEMCL.Parameters.Add(new SqlParameter("YM", DateTime.Now.ToString("yyyyMM")));
                    cmdEMCL.Parameters.Add(new SqlParameter("CODE", drEmp["CODE"].ToString()));
                    cmdEMCL.CommandTimeout = 180;
                    dtEMCL = oConDCI.Query(cmdEMCL);

                    if (dtEMCL.Rows.Count > 0)
                    {
                        dataShiftGroup = dtEMCL.Rows[0]["STSO"].ToString().Substring(DateTime.Now.Day - 1, 1);

                        // Check 3 Group
                        if (dataShiftGroup == "3")
                        {
                            dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(DateTime.Now.Day - 1, 1);
                        }
                        else
                        {

                            if (DateTime.Now.Day < 5)
                            {
                                for (int i = DateTime.Now.Day; i <= 27; i++)
                                {
                                    dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                    if (dataShift == "T" || dataShift == "H")
                                    { }
                                    else { break; }
                                }
                            }
                            else if (DateTime.Now.Day > 20)
                            {
                                for (int i = DateTime.Now.Day; i >= 5; i--)
                                {
                                    dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                    if (dataShift == "T" || dataShift == "H")
                                    { }
                                    else { break; }
                                }
                            }
                            else
                            {
                                for (int i = DateTime.Now.Day; i <= 27; i++)
                                {
                                    dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                    if (dataShift == "T" || dataShift == "H")
                                    { }
                                    else { break; }
                                }
                            }
                        }// end check 3 group
                    }//end if emcl data



                    if (dataShift == "D")
                    {
                        MP_D++;
                    }
                    else if (dataShift == "N")
                    {
                        MP_N++;
                    }

                }// end foreach
            }// end if have employee data


            try
            {
                MP_ALL = dtData.Rows.Count;
            }
            catch { }

        }// end if boardid not null


        //---- Add Row ---
        newRow["MP_ALL"] = MP_ALL;
        newRow["MP_D"] = MP_D;
        newRow["MP_N"] = MP_N;
        result.Rows.Add(newRow);
        return result;


    }
    private DataTable GetManPowerByLine_INDirectSupport(string Board)
    {
        int MP_ALL = 0;
        int MP_D = 0;
        int MP_N = 0;
        DataTable dtData = new DataTable();

        DataTable result = new DataTable();
        result.Columns.Add("MP_ALL", typeof(int));
        result.Columns.Add("MP_D", typeof(int));
        result.Columns.Add("MP_N", typeof(int));
        DataRow newRow = result.NewRow();

        if (Board != "")
        {
            string Condition = "(CostCenter =" + Board + " )";

            string StrData = "SELECT CODE " +
            " FROM Employee " +
            " WHERE RESIGN IS NULL AND   " + Condition + " ";
            //" AND POSIT NOT IN ('OP','OP.S','TN','TE',LE','FO','EN') ";

            StrData = "SELECT CODE " +
                    " FROM Employee " +
                    " WHERE RESIGN IS NULL AND " + Condition + " ";
            //" AND POSIT NOT IN ('OP','OP.S','TN','TE','LE','FO','EN') ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.Parameters.Add(new SqlParameter("COSTCENTER", Board));
            cmdData.CommandTimeout = 180;
            dtData = oConDCI.Query(cmdData);


            if (dtData.Rows.Count > 0)
            {
                foreach (DataRow drEmp in dtData.Rows)
                {
                    string dataShift = "";
                    string dataShiftGroup = "";
                    DataTable dtEMCL = new DataTable();
                    string StrEMCL = "SELECT YM, CODE, STSS, STSO " +
                        " FROM EMP_EMCL " +
                        " WHERE YM =@YM AND CODE=@CODE ";
                    SqlCommand cmdEMCL = new SqlCommand();
                    cmdEMCL.CommandText = StrEMCL;
                    cmdEMCL.Parameters.Add(new SqlParameter("YM", DateTime.Now.ToString("yyyyMM")));
                    cmdEMCL.Parameters.Add(new SqlParameter("CODE", drEmp["CODE"].ToString()));
                    cmdEMCL.CommandTimeout = 180;
                    dtEMCL = oConDCI.Query(cmdEMCL);

                    if (dtEMCL.Rows.Count > 0)
                    {
                        dataShiftGroup = dtEMCL.Rows[0]["STSO"].ToString().Substring(DateTime.Now.Day - 1, 1);

                        // Check 3 Group
                        if (dataShiftGroup == "3")
                        {
                            dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(DateTime.Now.Day - 1, 1);
                        }
                        else
                        {

                            if (DateTime.Now.Day < 5)
                            {
                                for (int i = DateTime.Now.Day; i <= 27; i++)
                                {
                                    dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                    if (dataShift == "T" || dataShift == "H")
                                    { }
                                    else { break; }
                                }
                            }
                            else if (DateTime.Now.Day > 20)
                            {
                                for (int i = DateTime.Now.Day; i >= 5; i--)
                                {
                                    dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                    if (dataShift == "T" || dataShift == "H")
                                    { }
                                    else { break; }
                                }
                            }
                            else
                            {
                                for (int i = DateTime.Now.Day; i <= 27; i++)
                                {
                                    dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                    if (dataShift == "T" || dataShift == "H")
                                    { }
                                    else { break; }
                                }
                            }
                        }// end check 3 group
                    }//end if emcl data



                    if (dataShift == "D")
                    {
                        MP_D++;
                    }
                    else if (dataShift == "N")
                    {
                        MP_N++;
                    }

                }// end foreach
            }// end if have employee data


            try
            {
                MP_ALL = dtData.Rows.Count;
            }
            catch { }

        }// end if boardid not null


        //---- Add Row ---
        newRow["MP_ALL"] = MP_ALL;
        newRow["MP_D"] = MP_D;
        newRow["MP_N"] = MP_N;
        result.Rows.Add(newRow);
        return result;


    }

    //---------- Man Power Direct FOLE ---------------------
    private DataTable GetManPowerByLineFOLE_Direct(string Board, string Position)
    {
        string[] spBoard = Board.Split(',');
        int MP_ALL = 0;
        int MP_D = 0;
        int MP_N = 0;
        DataTable dtData = new DataTable();

        DataTable result = new DataTable();
        result.Columns.Add("MP_ALL", typeof(int));
        result.Columns.Add("MP_D", typeof(int));
        result.Columns.Add("MP_N", typeof(int));
        DataRow newRow = result.NewRow();

        if (Board.Length > 0)
        {

            //string ConditionAndon = " (";
            //-------------- Loop For Get Manpower FO and LE for Each Board ----------------

            //foreach (string _Board in spBoard)
            //{
            //    ConditionAndon += " (ANDON LIKE '%" + _Board + "%') OR";
            //}
            //ConditionAndon = ConditionAndon.Substring(0, ConditionAndon.Length - 2) + " )";

            string ConditionAndon = "(CostCenter = " + txtCostCenter + " )";

            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------

            string StrData = "SELECT DISTINCT CODE " +
                    " FROM Employee " +
                    " WHERE RESIGN IS NULL AND POSIT = @POSI AND " + ConditionAndon + "  ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            //cmdData.Parameters.Add(new SqlParameter("LOCATION", _Board));
            cmdData.Parameters.Add(new SqlParameter("POSI", Position));
            cmdData.CommandTimeout = 180;
            dtData = oConDCI.Query(cmdData);

            if (dtData.Rows.Count > 0)
            {
                foreach (DataRow drEmp in dtData.Rows)
                {
                    string dataShift = "";
                    DataTable dtEMCL = new DataTable();
                    string StrEMCL = "SELECT YM, CODE, STSS, STSO " +
                        " FROM EMP_EMCL " +
                        " WHERE YM =@YM AND CODE=@CODE ";
                    SqlCommand cmdEMCL = new SqlCommand();
                    cmdEMCL.CommandText = StrEMCL;
                    cmdEMCL.Parameters.Add(new SqlParameter("YM", DateTime.Now.ToString("yyyyMM")));
                    cmdEMCL.Parameters.Add(new SqlParameter("CODE", drEmp["CODE"].ToString()));
                    cmdEMCL.CommandTimeout = 180;
                    dtEMCL = oConDCI.Query(cmdEMCL);

                    if (dtEMCL.Rows.Count > 0)
                    {
                        if (DateTime.Now.Day < 5)
                        {
                            for (int i = DateTime.Now.Day; i <= 27; i++)
                            {
                                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                if (dataShift == "T" || dataShift == "H")
                                { }
                                else { break; }
                            }
                        }
                        else if (DateTime.Now.Day > 20)
                        {
                            for (int i = DateTime.Now.Day; i >= 5; i--)
                            {
                                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                if (dataShift == "T" || dataShift == "H")
                                { }
                                else { break; }
                            }
                        }
                        else
                        {
                            for (int i = DateTime.Now.Day; i <= 27; i++)
                            {
                                dataShift = dtEMCL.Rows[0]["STSS"].ToString().Substring(i - 1, 1);
                                if (dataShift == "T" || dataShift == "H")
                                { }
                                else { break; }
                            }
                        }
                    }//end if emcl data



                    if (dataShift == "D")
                    {
                        MP_D++;
                    }
                    else if (dataShift == "N")
                    {
                        MP_N++;
                    }

                }// end foreach
            }// end if have employee data



            try
            {
                MP_ALL = dtData.Rows.Count;
            }
            catch { }

        }// end if boardid not null


        //---- Add Row ---
        newRow["MP_ALL"] = MP_ALL;
        newRow["MP_D"] = MP_D;
        newRow["MP_N"] = MP_N;
        result.Rows.Add(newRow);
        return result;
    }

    //--------- Getwork Direct FOLE Day and Night ---------------------
    private int GetWorkActByLineDayFOLE_Direct(string Board, DateTime DataDate)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        string Txt_Posit = "";
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "000")
        {

            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            if (Board == "4620")
            {
                //Txt_Posit = " AND POSIT  NOT IN ('MG','AG','SF','EN','SU') ";
                Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU','FO','SV','FM/T','AG','LD/T','LE','LD')";

            }
            else if (Board == "4710")
            {
                Txt_Posit = " AND  E.CODE IN ('14313','39796','19491','34542','12409','15237','18892','37785','39132','12063','15019','33763','40450','40515') ";

            }
            else
            {

                //Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU')";
                //Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU','FO','SV','FM/T','AG','LD/T','LE','LD')";
                Txt_Posit = " AND POSIT IN ('OP','OP.S','TN','PI') ";
            }

            string WhereAndon = "(CostCenter = " + Board + " )";

            string StrData = "SELECT COUNT(1) AS COUNTS " +
              " FROM EmployeeWorkingTime AS W " +
              " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
              " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
                  " AND (ANDON <>'') AND RESIGN IS NULL AND   " + " ( " + Board + ")" + " " + Txt_Posit + "";
           //   " AND " + WhereAndon + " " + " ( " + Board + "')" + " + Txt_Posit + "";


            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 8, 0, 0)));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 17, 45, 0)));
            // cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }
    private int GetWorkActByLineDayFOLE_INDirect(string Board, DateTime DataDate)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        string Txt_Posit = "";
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "000")
        {
            if (Board == "4620")
            {
                Txt_Posit = " AND POSIT  IN ('MG','SF','EN','AM','AG','SU')";

            }
            else if (Board == "4710")
            {
                Txt_Posit = " AND  W.CODE NOT IN ('14313','39796','19491','34542','12409','15237','18892','37785','39132','12063','15019','33763','40450','40515') ";

            }
            else
            {

                Txt_Posit = " AND POSIT  IN('MG','SF','AM','SU')";
            }
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------

            string WhereAndon = "(CostCenter =" + Board + " )";

            string StrData = "SELECT COUNT(1) AS COUNTS " +
              " FROM EmployeeWorkingTime AS W " +
              " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
              " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
              " AND " + WhereAndon + " " + Txt_Posit + "";


            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 8, 0, 0)));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 17, 45, 0)));
            // cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }
    private int GetWorkActByLineDayFOLE_INDirectSupport(string Board, DateTime DataDate)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "000")
        {
            //string WhereAndon = "";
            //int idxWhereAndon = 0;
            //-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            //foreach (string _Board in spBoard)
            //{
            //    if (idxWhereAndon == 0)
            //    {
            //        WhereAndon += "ANDON LIKE '%" + _Board + "%'";
            //    }
            //    else if (idxWhereAndon > 0 && idxWhereAndon < spBoard.Length - 1)
            //    {
            //        WhereAndon += " OR ANDON LIKE '%" + _Board + "%'";
            //    }
            //    else if (idxWhereAndon == spBoard.Length - 1)
            //    {
            //        WhereAndon += " OR ANDON LIKE '%" + _Board + "%'";
            //    }
            //    idxWhereAndon++;
            //}
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------

            string WhereAndon = "(CostCenter =" + Board + " )";

            string StrData = "SELECT COUNT(1) AS COUNTS " +
              " FROM EmployeeWorkingTime AS W " +
              " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
              " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
              " AND " + WhereAndon + "";
            //AND E.POSIT NOT IN ('OP','OP.S','TN','TE','LE','FO','EN')";


            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 8, 0, 0)));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 17, 45, 0)));
            // cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }
    private int GetWorkActByLineNightFOLE_INDirect(string Board, DateTime DataDate)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        string Txt_Posit = "";
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "000")
        {
            if (Board == "4620")
            {
                Txt_Posit = " AND POSIT  IN ('MG','SF','EN','AM','AG','SU')";

            }
            else if (Board == "4710")
            {
                Txt_Posit = " AND  W.CODE NOT IN ('14313','39796','19491','34542','12409','15237','18892','37785','39132','12063','15019','33763','40450','40515') ";

            }
            else
            {

                Txt_Posit = " AND POSIT  IN('MG','SF','AM','SU')";
            }
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            string WhereAndon = "(CostCenter =" + Board + " )";
            string StrData = "SELECT COUNT(1) AS COUNTS " +
              " FROM EmployeeWorkingTime AS W " +
              " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
              " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
               " AND " + WhereAndon + "" + Txt_Posit + "";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 20, 0, 0)));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 7, 50, 0)));
            //cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }
    private int GetWorkActByLineNightFOLE_INDirectSupport(string Board, DateTime DataDate)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "000")
        {
            //string WhereAndon = "";
            //int idxWhereAndon = 0;
            ////-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            //foreach (string _Board in spBoard)
            //{
            //    if (idxWhereAndon == 0)
            //    {
            //        WhereAndon += "ANDON LIKE '%" + _Board + "%'";
            //    }
            //    else if (idxWhereAndon > 0 && idxWhereAndon < spBoard.Length - 1)
            //    {
            //        WhereAndon += " OR ANDON LIKE '%" + _Board + "%'";
            //    }
            //    else if (idxWhereAndon == spBoard.Length - 1)
            //    {
            //        WhereAndon += " OR ANDON LIKE '%" + _Board + "%'";
            //    }
            //    idxWhereAndon++;
            //}
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            string WhereAndon = "(CostCenter =" + Board + " )";
            string StrData = "SELECT COUNT(1) AS COUNTS " +
              " FROM EmployeeWorkingTime AS W " +
              " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
              " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
               " AND " + WhereAndon + " ";
            //AND E.POSIT NOT IN ('OP','OP.S','TN','TE','LE','FO','EN')";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 20, 0, 0)));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 7, 50, 0)));
            //cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }
    private int GetWorkActByLineNightFOLE_Direct(string Board, DateTime DataDate)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        string Txt_Posit = "";
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "000")
        {
            if (Board == "4620")
            {
                //Txt_Posit = " AND POSIT  NOT IN ('MG','AG','SF','EN','SU') ";
                Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU','FO','SV','FM/T','AG','LD/T','LE','LD')";

            }
            else if (Board == "4710")
            {
                Txt_Posit = " AND  E.CODE IN ('14313','39796','19491','34542','12409','15237','18892','37785','39132','12063','15019','33763','40450','40515') ";

            }
            else
            {

                //Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU')";
                //Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU','FO','SV','FM/T','AG','LD/T','LE','LD')";
                Txt_Posit = " AND POSIT IN ('OP','OP.S','TN','PI') ";
            }
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            string WhereAndon = "(CostCenter =  " + Board + " )";
            string StrData = "SELECT COUNT(1) AS COUNTS " +
              " FROM EmployeeWorkingTime AS W " +
              " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
              " WHERE SystemIN BETWEEN @StartDT AND @EndDT " +
                " AND (ANDON <>'') AND RESIGN IS NULL AND   " + " ( " + Board + ")" + " " + Txt_Posit + "";
               //" AND " + WhereAndon + " " + Txt_Posit + "";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 20, 0, 0)));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 7, 50, 0)));
            //cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }

    //---- OTRQ Direct FOLE Day and Night ---------------------
    private int GetOTReqByLineDayFOLE_Direct(string Board, DateTime DataDate)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        string Txt_Posit = "";
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "-")
        {
            if (Board == "4620")
            {
                //Txt_Posit = " AND POSIT  NOT IN ('MG','AG','SF','EN','SU') ";
                Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU','FO','SV','FM/T','AG','LD/T','LE','LD')";

            }
            else if (Board == "4710")
            {
                Txt_Posit = " AND   E.CODE IN ('14313','39796','19491','34542','12409','15237','18892','37785','39132','12063','15019','33763','40450','40515') ";

            }
            else
            {

                //Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU')";
                //Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU','FO','SV','FM/T','AG','LD/T','LE','LD')";
                Txt_Posit = " AND POSIT IN ('OP','OP.S','TN','PI') ";

            }
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            string WhereAndon = "(CostCenter = " + Board + " )";

            string StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
                " FROM EMP_OTRQ AS O " +
                " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
                " WHERE (OTFROM != '06:05' AND OTFROM != '20:00') " +
                " AND ODATE = @ODATE AND " +
            "  (ANDON <>'') AND RESIGN IS NULL AND   " + " ( " + Board + ")" + " " + Txt_Posit + "";
            //+WhereAndon + " " + Txt_Posit + "";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            // cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("ODATE", DataDate.ToString("yyyy-MM-dd")));
            //cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }
    private int GetOTReqByLineDayFOLE_INDirect(string Board, DateTime DataDate)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        string Txt_Posit = "";
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "-")
        {
            if (Board == "4620")
            {
                Txt_Posit = " AND POSIT  IN ('MG','SF','EN','AM','AG','SU')";

            }
            else if (Board == "4710")
            {
                Txt_Posit = " AND  W.CODE NOT IN ('14313','39796','19491','34542','12409','15237','18892','37785','39132','12063','15019','33763','40450','40515') ";

            }
            else
            {

                Txt_Posit = " AND POSIT  IN('MG','SF','AM','SU')";
            }
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            string WhereAndon = "(CostCenter =" + Board + " )";

            string StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
                " FROM EMP_OTRQ AS O " +
                " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
                " WHERE (OTFROM != '06:05' AND OTFROM != '20:00') " +
                " AND ODATE = @ODATE " +
                " AND " + WhereAndon + "" + Txt_Posit + "";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            // cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("ODATE", DataDate.ToString("yyyy-MM-dd")));
            //cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }
    private int GetOTReqByLineDayFOLE_INDirectSupport(string Board, DateTime DataDate)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "-")
        {
            //string WhereAndon = "(";
            ////-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            //foreach (string _Board in spBoard)
            //{
            //    WhereAndon += "(ANDON LIKE '%" + _Board + "%') OR";
            //}
            //WhereAndon = WhereAndon.Substring(0, WhereAndon.Length - 2) + ")";
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            string WhereAndon = "(CostCenter =" + Board + " )";

            string StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
                " FROM EMP_OTRQ AS O " +
                " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
                " WHERE (OTFROM != '06:05' AND OTFROM != '20:00') " +
                " AND ODATE = @ODATE " +
                " AND " + WhereAndon + " ";
            //AND E.POSIT NOT IN ('OP','OP.S','TN','TE','LE','FO','EN')";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            // cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("ODATE", DataDate.ToString("yyyy-MM-dd")));
            //cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }
    private int GetOTReqByLineNightFOLE_Direct(string Board, DateTime DataDate)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        string Txt_Posit = "";
        DataTable dtData = new DataTable();
        if (Board != "" && Board != "-")
        {
            if (Board == "4620")
            {
                //Txt_Posit = " AND POSIT  NOT IN ('MG','AG','SF','EN','SU') ";
                Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU','FO','SV','FM/T','AG','LD/T','LE','LD')";

            }
            else if (Board == "4710")
            {
                Txt_Posit = " AND   E.CODE IN ('14313','39796','19491','34542','12409','15237','18892','37785','39132','12063','15019','33763','40450','40515') ";

            }
            else
            {

                //Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU')";
                //Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU','FO','SV','FM/T','AG','LD/T','LE','LD')";
                Txt_Posit = " AND POSIT IN ('OP','OP.S','TN','PI') ";
            }
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------

            string WhereAndon = "(CostCenter = " + Board + " )";

            string StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
                " FROM EMP_OTRQ AS O " +
                " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
                " WHERE (OTFROM = '06:05' OR OTFROM = '20:00') " +
                //" AND ODATE = @ODATE AND " + WhereAndon + "";
                " AND ODATE = @ODATE AND " +
                //WhereAndon + " " + Txt_Posit + "";
                  "  (ANDON <>'') AND RESIGN IS NULL AND   " + " ( " + Board + ")" + " " + Txt_Posit + "";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            // cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("ODATE", DataDate.AddDays(1).ToString("yyyy-MM-dd")));
            //cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }
    private int GetOTReqByLineNightFOLE_INDirect(string Board, DateTime DataDate)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        string Txt_Posit = "";
        DataTable dtData = new DataTable();
        if (Board != "" && Board != "-")
        {
            if (Board == "4620")
            {
                Txt_Posit = " AND POSIT  IN ('MG','SF','EN','AM','AG','SU')";

            }
            else if (Board == "4710")
            {
                Txt_Posit = " AND  CODE NOT IN ('14313','39796','19491','34542','12409','15237','18892','37785','39132','12063','15019','33763','40450','40515') ";

            }
            else
            {

                Txt_Posit = " AND POSIT  IN('MG','SF','AM','SU')";
            }
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------

            string WhereAndon = "(CostCenter =" + Board + " )";

            string StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
                " FROM EMP_OTRQ AS O " +
                " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
                " WHERE (OTFROM = '06:05' OR OTFROM = '20:00') " +
            " AND ODATE = @ODATE " +
            " AND " + WhereAndon + " " + Txt_Posit + "";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            // cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("ODATE", DataDate.AddDays(1).ToString("yyyy-MM-dd")));
            //cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }
    private int GetOTReqByLineNightFOLE_INDirectSupport(string Board, DateTime DataDate)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        DataTable dtData = new DataTable();
        if (Board != "" && Board != "-")
        {
            //string WhereAndon = "(";
            ////-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            //foreach (string _Board in spBoard)
            //{
            //    WhereAndon += "(ANDON LIKE '%" + _Board + "%') OR";
            //}
            //WhereAndon = WhereAndon.Substring(0, WhereAndon.Length - 2) + ")";
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------

            string WhereAndon = "(CostCenter =" + Board + " )";

            string StrData = "SELECT COUNT(DISTINCT O.CODE) AS COUNTS " +
                " FROM EMP_OTRQ AS O " +
                " LEFT JOIN Employee AS E ON O.CODE = E.CODE " +
                " WHERE (OTFROM = '06:05' OR OTFROM = '20:00') " +
            " AND ODATE = @ODATE " +
            " AND " + WhereAndon + "";
            //AND E.POSIT NOT IN ('OP','OP.S','TN','TE','LE','FO','EN')";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            // cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            cmdData.Parameters.Add(new SqlParameter("ODATE", DataDate.AddDays(1).ToString("yyyy-MM-dd")));
            //cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }

    //---- OTACT Actual FOLE Day and Night ---------------------
    private int GetOTActByLineDayFOLE_Direct(string Board, DateTime DataDate)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        string Txt_Posit = "";
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "-")
        {
            if (Board == "4620")
            {
                //Txt_Posit = " AND POSIT  NOT IN ('MG','AG','SF','EN','SU') ";
                Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU','FO','SV','FM/T','AG','LD/T','LE','LD')";

            }
            else if (Board == "4710")
            {
                Txt_Posit = " AND   E.CODE IN ('14313','39796','19491','34542','12409','15237','18892','37785','39132','12063','15019','33763','40450','40515') ";

            }
            else
            {

                //Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU')";
                //Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU','FO','SV','FM/T','AG','LD/T','LE','LD')";
                Txt_Posit = " AND POSIT IN ('OP','OP.S','TN','PI') ";
            }
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            string WhereAndon = "(CostCenter = " + Board + " )";
            string StrData = "SELECT COUNT(1) AS COUNTS " +
                 " FROM EmployeeWorkingTime AS W " +
                 " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
                 " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'D'" +
                   " AND (ANDON <>'') AND RESIGN IS NULL AND   " + " ( " + Board + ")" + " " + Txt_Posit + "";
             //    " AND " + WhereAndon + " " + Txt_Posit + "";
            //" AND " + WhereAndon + " ";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            //cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            //cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 18, 45, 0).ToString("yyyy-MM-dd HH:mm:ss")));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 03, 0, 0).ToString("yyyy-MM-dd HH:mm:ss"))); // --- out lastest night
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }
    private int GetOTActByLineDayFOLE_INDirect(string Board, DateTime DataDate)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        string Txt_Posit = "";
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "-")
        {
            if (Board == "4620")
            {
                Txt_Posit = " AND POSIT  IN ('MG','SF','EN','AM','AG','SU')";

            }
            else if (Board == "4710")
            {
                Txt_Posit = " AND  W.CODE NOT IN ('14313','39796','19491','34542','12409','15237','18892','37785','39132','12063','15019','33763','40450','40515') ";

            }
            else
            {

                Txt_Posit = " AND POSIT  IN('MG','SF','AM','SU')";
            }
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            string WhereAndon = "(CostCenter =" + Board + " )";
            string StrData = "SELECT COUNT(1) AS COUNTS " +
                 " FROM EmployeeWorkingTime AS W " +
                 " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
                 " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'D'" +
                 " AND " + WhereAndon + "" + Txt_Posit + "";

            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            //cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            //cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 18, 45, 0).ToString("yyyy-MM-dd HH:mm:ss")));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 03, 0, 0).ToString("yyyy-MM-dd HH:mm:ss"))); // --- out lastest night
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }
    private int GetOTActByLineDayFOLE_INDirectSupport(string Board, DateTime DataDate)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        DataTable dtData = new DataTable();

        if (Board != "" && Board != "-")
        {
            //string WhereAndon = "(";
            ////-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            //foreach (string _Board in spBoard)
            //{
            //    WhereAndon += "(ANDON LIKE '%" + _Board + "%') OR";
            //}
            //WhereAndon = WhereAndon.Substring(0, WhereAndon.Length - 2) + ")";
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            string WhereAndon = "(CostCenter = " + Board + " )";
            string StrData = "SELECT COUNT(1) AS COUNTS " +
                 " FROM EmployeeWorkingTime AS W " +
                 " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
                 " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'D'" +
                 " AND " + WhereAndon + "";
            //AND E.POSIT NOT IN ('OP','OP.S','TN','TE','LE','FO','EN')";

            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            //cmdData.Parameters.Add(new SqlParameter("LOCATION", Board));
            //cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.Year, DataDate.Month, DataDate.Day, 18, 45, 0).ToString("yyyy-MM-dd HH:mm:ss")));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 03, 0, 0).ToString("yyyy-MM-dd HH:mm:ss"))); // --- out lastest night
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }
    private int GetOTActByLineNightFOLE_Direct(string Board, DateTime DataDate)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        string Txt_Posit = "";
        DataTable dtData = new DataTable();
        if (Board != "" && Board != "-")
        {
            if (Board == "4620")
            {
                //Txt_Posit = " AND POSIT  NOT IN ('MG','AG','SF','EN','SU') ";
                Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU','FO','SV','FM/T','AG','LD/T','LE','LD')";

            }
            else if (Board == "4710")
            {
                Txt_Posit = " AND   E.CODE IN ('14313','39796','19491','34542','12409','15237','18892','37785','39132','12063','15019','33763','40450','40515') ";

            }
            else
            {

                //Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU')";
                //Txt_Posit = " AND POSIT  NOT IN('MG','SF','AM','SU','FO','SV','FM/T','AG','LD/T','LE','LD')";
                Txt_Posit = " AND POSIT IN ('OP','OP.S','TN','PI') ";
            }
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            string WhereAndon = "(CostCenter = " + Board + " )";
            string StrData = "SELECT COUNT(1) AS COUNTS " +
                 " FROM EmployeeWorkingTime AS W " +
                 " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
                 " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'N'" +
                   " AND (ANDON <>'') AND RESIGN IS NULL AND   " + " ( " + Board + ")" + " " + Txt_Posit + "";
                 //" AND " + WhereAndon + " " + Txt_Posit + "";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            //cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 6, 5, 0).ToString("yyyy-MM-dd HH:mm:ss")));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 12, 50, 0).ToString("yyyy-MM-dd HH:mm:ss"))); // --- out lastest night
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }
    private int GetOTActByLineNightFOLE_INDirect(string Board, DateTime DataDate)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        string Txt_Posit = "";
        DataTable dtData = new DataTable();
        if (Board != "" && Board != "-")
        {
            if (Board == "4620")
            {
                Txt_Posit = " AND POSIT  IN ('MG','SF','EN','AM','AG','SU')";

            }
            else if (Board == "4710")
            {
                Txt_Posit = " AND  W.CODE NOT IN ('14313','39796','19491','34542','12409','15237','18892','37785','39132','12063','15019','33763','40450','40515') ";

            }
            else
            {

                Txt_Posit = " AND POSIT  IN('MG','SF','AM','SU')";
            }
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            string WhereAndon = "(CostCenter =" + Board + " )";
            string StrData = "SELECT COUNT(1) AS COUNTS " +
                 " FROM EmployeeWorkingTime AS W " +
                 " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
                 " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'N'" +
            " AND " + WhereAndon + " " + Txt_Posit + "";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            //cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 6, 5, 0).ToString("yyyy-MM-dd HH:mm:ss")));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 12, 50, 0).ToString("yyyy-MM-dd HH:mm:ss"))); // --- out lastest night
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }
    private int GetOTActByLineNightFOLE_INDirectSupport(string Board, DateTime DataDate)
    {
        string[] spBoard = Board.Split(',');
        int resultData = 0;
        DataTable dtData = new DataTable();
        if (Board != "" && Board != "-")
        {
            //string WhereAndon = "(";
            ////-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            //foreach (string _Board in spBoard)
            //{
            //    WhereAndon += "(ANDON LIKE '%" + _Board + "%') OR";
            //}
            //WhereAndon = WhereAndon.Substring(0, WhereAndon.Length - 2) + ")";
            //<-------------- Loop For Get Manpower FO and LE for Each Board ----------------
            string WhereAndon = "(CostCenter =" + Board + " )";
            string StrData = "SELECT COUNT(1) AS COUNTS " +
                 " FROM EmployeeWorkingTime AS W " +
                 " LEFT JOIN Employee AS E ON W.Code = E.CODE " +
                 " WHERE SystemOUT BETWEEN @StartDT AND @EndDT AND WorkShift = 'N'" +
            " AND " + WhereAndon + " AND E.POSIT IN ('OP','OP.S','TN','TE','LE','LD','LD/T','FO','EN')";
            //AND E.POSIT NOT IN ('OP','OP.S','TN','TE','LE','FO','EN')";
            SqlCommand cmdData = new SqlCommand();
            cmdData.CommandText = StrData;
            cmdData.CommandTimeout = 180;
            //cmdData.Parameters.Add(new SqlParameter("Posi", Position));
            cmdData.Parameters.Add(new SqlParameter("StartDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 6, 5, 0).ToString("yyyy-MM-dd HH:mm:ss")));
            cmdData.Parameters.Add(new SqlParameter("EndDT", new DateTime(DataDate.AddDays(1).Year, DataDate.AddDays(1).Month, DataDate.AddDays(1).Day, 12, 50, 0).ToString("yyyy-MM-dd HH:mm:ss"))); // --- out lastest night
            dtData = oConDCI.Query(cmdData);

            try
            {
                resultData = Convert.ToInt16(dtData.Rows[0]["COUNTS"].ToString());
            }
            catch { }
        }


        return resultData;
    }

}




//public List<MMPMonth> GetChartMPMonth(int Month, int Year, string CostCenter)
//{
//    string[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
//    List<MMPMonth> olistMPMonth = new List<MMPMonth>();

//    DateTime strDate = new DateTime(DateTime.Now.Year, Month, 1, 0, 0, 0);
//    DateTime endDate = strDate.AddMonths(1).Date + new TimeSpan(0, 0, 0);



//    return olistMPMonth;
//}
